This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
postcss.config.mjs
public/vite.svg
README.md
src/App.tsx
src/assets/react.svg
src/components/AiNoteModal/AiNoteModal.view.tsx
src/components/AiNoteModal/index.tsx
src/components/AiNoteModal/useAiNoteModal.ts
src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx
src/components/AiNoteModal/views/ChoiceView/index.tsx
src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts
src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx
src/components/AiNoteModal/views/CodeInputView/index.tsx
src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts
src/components/AiNoteModal/views/ManualInputView/index.tsx
src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx
src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts
src/components/AiNoteModal/views/ResultsView/index.tsx
src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx
src/components/AiNoteModal/views/ResultsView/useResultsView.ts
src/components/AiNoteModal/views/UrlInputView/index.tsx
src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx
src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts
src/components/AuthProvider/AuthProvider.view.tsx
src/components/AuthProvider/index.tsx
src/components/AuthProvider/useAuthProvider.ts
src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx
src/components/IncorrectAnswerNoteModal/index.tsx
src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts
src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx
src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx
src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx
src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx
src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx
src/components/ProtectedRoute/index.tsx
src/components/ProtectedRoute/ProtectedRoute.view.tsx
src/components/ProtectedRoute/useProtectedRoute.ts
src/hooks/useApiClient.ts
src/hooks/useUserProfile.ts
src/index.css
src/main.tsx
src/pages/Components/Components.view.tsx
src/pages/Components/index.tsx
src/pages/Components/useComponents.ts
src/pages/Dashboard/index.tsx
src/pages/SetupAccount/index.tsx
src/pages/SetupAccount/SetupAccount.view.tsx
src/pages/SetupAccount/useSetupAccount.ts
src/pages/SignIn/index.tsx
src/pages/SignIn/SignInPage.view.tsx
src/pages/SignIn/useSignIn.ts
src/pages/SignInWithEmail/index.tsx
src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx
src/pages/SignInWithEmail/useSignInWithEmail.ts
src/pages/SignUp/index.tsx
src/pages/SignUp/SignUpPage.view.tsx
src/pages/SignUp/useSignUp.ts
src/pages/SignUpWithEmail/index.tsx
src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx
src/pages/SignUpWithEmail/useSignUpWithEmail.ts
src/pages/SSOCallback/index.tsx
src/pages/Unauthorized/index.tsx
src/schemas/user.schema.ts
src/services/apiClient.ts
src/services/userService.ts
src/store/useAiNoteModalStore.ts
src/store/useAuthStore.ts
src/store/useIncorrectAnswerNoteStore.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <link href="/dist/styles.css" rel="stylesheet">
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@ai-sdk/react": "^2.0.44",
    "@clerk/clerk-react": "^5.2.8",
    "@codemirror/lang-cpp": "^6.0.2",
    "@codemirror/lang-java": "^6.0.1",
    "@codemirror/lang-javascript": "^6.2.2",
    "@codemirror/lang-python": "^6.1.6",
    "@codemirror/view": "^6.34.2",
    "@tanstack/react-query": "^5.51.15",
    "@uiw/codemirror-theme-vscode": "^4.23.6",
    "@uiw/react-codemirror": "^4.23.6",
    "ai": "^5.0.44",
    "axios": "^1.7.2",
    "firebase": "^10.12.4",
    "framer-motion": "^11.3.19",
    "lucide-react": "^0.417.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.52.1",
    "react-router-dom": "^6.25.1",
    "reactflow": "^11.11.4",
    "recharts": "^2.12.7",
    "ui-components": "workspace:*",
    "zod": "^3.23.8",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="postcss.config.mjs">
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="src/App.tsx">
import { Routes, Route } from "react-router-dom"
import { AuthProvider } from "./components/AuthProvider"
import { ProtectedRoute } from "./components/ProtectedRoute"
import { useApiClient } from "./hooks/useApiClient"
import SignInPage from "./pages/SignIn"
import SignInWithEmailPage from "./pages/SignInWithEmail"
import SignUpPage from "./pages/SignUp"
import SignUpWithEmailPage from "./pages/SignUpWithEmail"
import SSOCallbackPage from "./pages/SSOCallback"
import SetupAccountPage from "./pages/SetupAccount"
import DashboardPage from "./pages/Dashboard"
import UnauthorizedPage from "./pages/Unauthorized"
import { Components } from "./pages/Components"

function AppContent() {
  // Initialize API client with authentication
  useApiClient();

  return (
    <Routes>
        <Route path="/" element={<SignInPage />} />
        <Route path="/sign-in" element={<SignInPage />} />
        <Route path="/sign-in/email" element={<SignInWithEmailPage />} />
        <Route path="/sign-up" element={<SignUpPage />} />
        <Route path="/sign-up/email" element={<SignUpWithEmailPage />} />
        <Route path="/sso-callback" element={<SSOCallbackPage />} />
        <Route path="/setup-account" element={<SetupAccountPage />} />
        <Route path="/unauthorized" element={<UnauthorizedPage />} />

        <Route
          path="/dashboard"
          element={
            //<ProtectedRoute requiredRole="member">
              <DashboardPage />
            //</ProtectedRoute>
          }
        />

        <Route path="/components" element={<Components />} />
      </Routes>
  );
}

function App() {
  return (
      <AuthProvider>
        <AppContent />
      </AuthProvider>
  );
}

export default App
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/AiNoteModal/AiNoteModal.view.tsx">
import { AnimatePresence, motion } from 'framer-motion';
import { AlertTriangle, X } from 'lucide-react';
import { type ModalView } from '../../store/useAiNoteModalStore';

interface AiNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  viewSizes: { width: string; height: string };
  children: React.ReactNode;
  onOverlayClick: () => void;
  onConfirmExit: () => void;
  onCancelExit: () => void;
}

export function AiNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  viewSizes,
  children,
  onOverlayClick,
  onConfirmExit,
  onCancelExit,
}: AiNoteModalViewProps) {
  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className="fixed inset-0 z-50 flex items-center justify-center"
        >
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container with Dynamic Sizing */}
          <motion.div
            layout
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className={`
              relative z-10 w-full mx-4 bg-white rounded-lg shadow-2xl
              transition-all duration-300 ease-in-out
              ${viewSizes.width} ${viewSizes.height}
            `}
          >
            {children}

            {/* Exit Confirmation Dialog */}
            <AnimatePresence>
              {isExitConfirmationVisible && (
                <>
                  {/* Overlay for confirmation dialog */}
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="absolute inset-0 bg-black/50 rounded-lg flex items-center justify-center z-20"
                  />

                  {/* Confirmation Dialog */}
                  <motion.div
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0.9, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                    className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
                               bg-white rounded-lg p-6 shadow-xl z-30 max-w-sm w-full mx-4"
                  >
                    <div className="flex items-center space-x-3 mb-4">
                      <AlertTriangle className="h-6 w-6 text-amber-500" />
                      <h3 className="text-lg font-semibold text-gray-900">
                        Confirm Exit
                      </h3>
                    </div>

                    <p className="text-gray-600 mb-6">
                      Are you sure you want to exit? Any unsaved progress will be lost.
                    </p>

                    <div className="flex space-x-3">
                      <button
                        onClick={onCancelExit}
                        className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md
                                 hover:bg-gray-50 transition duration-200"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={onConfirmExit}
                        className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md
                                 hover:bg-red-700 transition duration-200"
                      >
                        Confirm
                      </button>
                    </div>
                  </motion.div>
                </>
              )}
            </AnimatePresence>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/AiNoteModal/index.tsx">
import { useAiNoteModal } from './useAiNoteModal';
import { AiNoteModalView } from './AiNoteModal.view';
import { ChoiceView } from './views/ChoiceView';
import { UrlInputView } from './views/UrlInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';

export function AiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  } = useAiNoteModal();

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView />;
      case 'URL_INPUT':
        return <UrlInputView />;
      case 'MANUAL_INPUT':
        return <ManualInputView />;
      case 'CODE_INPUT':
        return <CodeInputView />;
      case 'RESULTS':
        return <ResultsView />;
      default:
        return <ChoiceView />;
    }
  };

  return (
    <AiNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      viewSizes={viewSizes}
      onOverlayClick={handleOverlayClick}
      onConfirmExit={handleConfirmExit}
      onCancelExit={handleCancelExit}
    >
      {renderCurrentView()}
    </AiNoteModalView>
  );
}
</file>

<file path="src/components/AiNoteModal/useAiNoteModal.ts">
import { useEffect } from 'react';
import { useAiNoteModalStore, type ModalView } from '../../store/useAiNoteModalStore';

const VIEW_SIZES: Record<ModalView, { width: string; height: string }> = {
  CHOICE: { width: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { width: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { width: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { width: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { width: 'max-w-5xl', height: 'h-[700px]' }
};

export function useAiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
  } = useAiNoteModalStore();

  const viewSizes = VIEW_SIZES[currentView];

  const handleOverlayClick = () => {
    if (!isExitConfirmationVisible) {
      showExitConfirmation();
    }
  };

  const handleConfirmExit = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleCancelExit = () => {
    hideExitConfirmation();
  };

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isModalOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isModalOpen]);

  // Close on Escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isModalOpen && !isExitConfirmationVisible) {
        showExitConfirmation();
      }
    };

    if (isModalOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isModalOpen, isExitConfirmationVisible, showExitConfirmation]);

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx">
import { Link, Edit } from 'lucide-react';

interface ChoiceViewProps {
  onUrlChoice: () => void;
  onManualChoice: () => void;
}

export function ChoiceViewComponent({ onUrlChoice, onManualChoice }: ChoiceViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Select Problem Registration Method
        </h2>
        <p className="text-gray-600">
          Choose how you would like to register your algorithm problem
        </p>
      </div>

      {/* Choice Cards */}
      <div className="flex-1 flex flex-col space-y-4">
        {/* URL Registration Card */}
        <button
          onClick={onUrlChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500
                   hover:bg-blue-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition duration-200">
              <Link className="h-6 w-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Register by URL
              </h3>
              <p className="text-gray-600 mb-2">
                Register problem using Baekjoon URL link
              </p>
              <p className="text-sm text-blue-600 font-medium">
                Only Baekjoon Online Judge allowed
              </p>
            </div>
          </div>
        </button>

        {/* Manual Registration Card */}
        <button
          onClick={onManualChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-green-500
                   hover:bg-green-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition duration-200">
              <Edit className="h-6 w-6 text-green-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Manual Input
              </h3>
              <p className="text-gray-600">
                Manually input problem information
              </p>
            </div>
          </div>
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/index.tsx">
import { useChoiceView } from './useChoiceView';
import { ChoiceViewComponent } from './ChoiceView.view';

export function ChoiceView() {
  const { handleUrlChoice, handleManualChoice } = useChoiceView();

  return (
    <ChoiceViewComponent
      onUrlChoice={handleUrlChoice}
      onManualChoice={handleManualChoice}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useChoiceView() {
  const { setSubmissionType, setCurrentView } = useAiNoteModalStore();

  const handleUrlChoice = () => {
    setSubmissionType('url');
    setCurrentView('URL_INPUT');
  };

  const handleManualChoice = () => {
    setSubmissionType('manual');
    setCurrentView('MANUAL_INPUT');
  };

  return {
    handleUrlChoice,
    handleManualChoice,
  };
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx">
import { ArrowLeft, Loader2 } from 'lucide-react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { vscodeDark } from '@uiw/codemirror-theme-vscode';
import { EditorView } from '@codemirror/view';

interface LanguageOption {
  value: string;
  label: string;
  extension: string;
}

interface CodeInputViewProps {
  code: string;
  language: string;
  isLoading: boolean;
  error: string | null;
  languageOptions: LanguageOption[];
  onCodeChange: (code: string) => void;
  onLanguageChange: (language: string) => void;
  onAnalyze: () => void;
  onBack: () => void;
}

const getLanguageExtension = (language: string) => {
  switch (language) {
    case 'javascript':
      return javascript();
    case 'python':
      return python();
    case 'java':
      return java();
    case 'cpp':
    case 'c':
      return cpp();
    default:
      return javascript();
  }
};

export function CodeInputViewComponent({
  code,
  language,
  isLoading,
  error,
  languageOptions,
  onCodeChange,
  onLanguageChange,
  onAnalyze,
  onBack,
}: CodeInputViewProps) {
  const extensions = [
    getLanguageExtension(language),
    EditorView.theme({
      '&': {
        fontSize: '14px',
      },
      '.cm-focused': {
        outline: 'none',
      },
    }),
  ];

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Code Input
        </h2>
        <p className="text-gray-600">
          Please enter the code that solved the problem.
        </p>
      </div>

      {/* Language Selection */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Programming Language
        </label>
        <select
          value={language}
          onChange={(e) => onLanguageChange(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-md bg-white
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                   transition duration-200"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Solution Code
        </label>
        <div className={`
          border rounded-lg overflow-hidden
          ${error ? 'border-red-300' : 'border-gray-300'}
        `}>
          <CodeMirror
            value={code}
            onChange={onCodeChange}
            extensions={extensions}
            theme={vscodeDark}
            placeholder="Enter your solution code here..."
            className="h-80"
          />
        </div>

        {error && (
          <p className="mt-2 text-sm text-red-600">
            {error}
          </p>
        )}
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          disabled={isLoading}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200
                   disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onAnalyze}
          disabled={!code.trim() || isLoading}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>Analyzing...</span>
            </>
          ) : (
            <span>Analyze</span>
          )}
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/index.tsx">
import { useCodeInputView } from './useCodeInputView';
import { CodeInputViewComponent } from './CodeInputView.view';

export function CodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    languageOptions,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  } = useCodeInputView();

  return (
    <CodeInputViewComponent
      code={codeData.code}
      language={codeData.language}
      isLoading={isLoading}
      error={error}
      languageOptions={languageOptions}
      onCodeChange={handleCodeChange}
      onLanguageChange={handleLanguageChange}
      onAnalyze={handleAnalyze}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

const LANGUAGE_OPTIONS = [
  { value: 'javascript', label: 'JavaScript', extension: 'js' },
  { value: 'python', label: 'Python', extension: 'py' },
  { value: 'java', label: 'Java', extension: 'java' },
  { value: 'cpp', label: 'C++', extension: 'cpp' },
  { value: 'c', label: 'C', extension: 'c' },
];

export function useCodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    setCodeData,
    setCurrentView,
    startAnalysis,
  } = useAiNoteModalStore();

  const [validationError, setValidationError] = useState<string | null>(null);

  const handleCodeChange = (code: string) => {
    setCodeData({ code });
    if (validationError) {
      setValidationError(null);
    }
  };

  const handleLanguageChange = (language: string) => {
    setCodeData({ language });
  };

  const handleAnalyze = async () => {
    if (!codeData.code.trim()) {
      setValidationError('Please enter your solution code');
      return;
    }

    await startAnalysis();
  };

  const handleBack = () => {
    const { submissionType } = useAiNoteModalStore.getState();
    setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  return {
    codeData,
    isLoading,
    error: error || validationError,
    languageOptions: LANGUAGE_OPTIONS,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/index.tsx">
import { useManualInputView } from './useManualInputView';
import { ManualInputViewComponent } from './ManualInputView.view';

export function ManualInputView() {
  const {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  } = useManualInputView();

  return (
    <ManualInputViewComponent
      formData={formData}
      errors={errors}
      onInputChange={handleInputChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

interface ManualInputViewProps {
  formData: FormData;
  errors: Partial<FormData>;
  onInputChange: (field: keyof FormData, value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function ManualInputViewComponent({
  formData,
  errors,
  onInputChange,
  onNext,
  onBack,
}: ManualInputViewProps) {
  const hasRequiredFields = formData.title.trim() && formData.description.trim() && formData.inputOutput.trim();

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Manual Problem Information Input
        </h2>
        <p className="text-gray-600">
          Please enter the detailed problem information directly.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        <div className="space-y-6 w-4/5 mx-auto">
          {/* Problem Title */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Title *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => onInputChange('title', e.target.value)}
              placeholder="Enter problem title"
              className={`
                w-full px-4 py-3 border rounded-lg
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.title
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* Problem Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Description *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => onInputChange('description', e.target.value)}
              placeholder="Enter detailed problem description"
              rows={8}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.description
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description}</p>
            )}
          </div>

          {/* Input/Output Conditions */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Input/Output Conditions *
            </label>
            <textarea
              value={formData.inputOutput}
              onChange={(e) => onInputChange('inputOutput', e.target.value)}
              placeholder="Enter input and output format specifications"
              rows={4}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.inputOutput
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.inputOutput && (
              <p className="mt-1 text-sm text-red-600">{errors.inputOutput}</p>
            )}
          </div>

          {/* Constraints */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Constraints
            </label>
            <input
              type="text"
              value={formData.constraints}
              onChange={(e) => onInputChange('constraints', e.target.value)}
              placeholder="Enter problem constraints (optional)"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg
                       focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                       transition duration-200"
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-6">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!hasRequiredFields}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

export function useManualInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();

  const [formData, setFormData] = useState<FormData>({
    title: problemData.title || '',
    description: problemData.description || '',
    inputOutput: problemData.inputOutput || '',
    constraints: problemData.constraints || '',
  });

  const [errors, setErrors] = useState<Partial<FormData>>({});

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<FormData> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Problem title is required';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Problem description is required';
    }

    if (!formData.inputOutput.trim()) {
      newErrors.inputOutput = 'Input/Output conditions are required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateForm()) {
      setProblemData({
        title: formData.title.trim(),
        description: formData.description.trim(),
        inputOutput: formData.inputOutput.trim(),
        constraints: formData.constraints.trim(),
      });
      setCurrentView('CODE_INPUT');
    }
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/index.tsx">
import { useResultsView } from './useResultsView';
import { ResultsViewComponent } from './ResultsView.view';

export function ResultsView() {
  const {
    analysisResult,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  } = useResultsView();

  return (
    <ResultsViewComponent
      analysisResult={analysisResult}
      hasSelectedUnits={hasSelectedUnits}
      onUnitToggle={handleUnitToggle}
      onGenerate={handleGenerate}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx">
import { ArrowLeft, Check } from 'lucide-react';
import { type AnalysisUnit } from '../../../../store/useAiNoteModalStore';

interface ResultsViewProps {
  analysisResult: AnalysisUnit[];
  hasSelectedUnits: boolean;
  onUnitToggle: (index: number) => void;
  onGenerate: () => void;
  onBack: () => void;
}

export function ResultsViewComponent({
  analysisResult,
  hasSelectedUnits,
  onUnitToggle,
  onGenerate,
  onBack,
}: ResultsViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <p className="text-gray-600">
          AI has analyzed your code into logical units. Select the parts you want to focus on.
        </p>
      </div>

      {/* Analysis Results */}
      <div className="flex-1 overflow-y-auto space-y-4 scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        {analysisResult.map((unit, index) => (
          <div
            key={index}
            className={`
              border-2 rounded-lg p-4 cursor-pointer transition duration-200
              ${unit.selected
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
              }
            `}
            onClick={() => onUnitToggle(index)}
          >
            <div className="flex items-start space-x-3">
              {/* Checkbox */}
              <div className={`
                w-5 h-5 rounded border-2 flex items-center justify-center mt-1
                transition duration-200
                ${unit.selected
                  ? 'border-blue-500 bg-blue-500'
                  : 'border-gray-300'
                }
              `}>
                {unit.selected && (
                  <Check className="h-3 w-3 text-white" />
                )}
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {unit.title}
                </h3>
                <p className="text-gray-600 mb-3">
                  {unit.description}
                </p>

                {/* Code Block */}
                <div className="bg-gray-900 rounded-md p-3 overflow-x-auto">
                  <pre className="text-sm text-gray-100">
                    <code>{unit.code}</code>
                  </pre>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Selection Summary */}
      {hasSelectedUnits && (
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-800">
            {analysisResult.filter(unit => unit.selected).length} logic unit(s) selected
          </p>
        </div>
      )}

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-4">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onGenerate}
          disabled={!hasSelectedUnits}
          className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md
                   hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          Generate Note with Selected Logic
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/useResultsView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useResultsView() {
  const {
    analysisResult,
    toggleAnalysisSelection,
    closeModal,
    setCurrentView,
  } = useAiNoteModalStore();

  const selectedUnits = analysisResult.filter(unit => unit.selected);
  const hasSelectedUnits = selectedUnits.length > 0;

  const handleUnitToggle = (index: number) => {
    toggleAnalysisSelection(index);
  };

  const handleGenerate = () => {
    // In a real implementation, this would send the selected logic to the backend
    console.log('Generating notes with selected logic:', selectedUnits);

    // For now, just close the modal with success
    alert(`Generated incorrect answer notes for ${selectedUnits.length} selected logic units!`);
    closeModal();
  };

  const handleBack = () => {
    setCurrentView('CODE_INPUT');
  };

  return {
    analysisResult,
    selectedUnits,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/index.tsx">
import { useUrlInputView } from './useUrlInputView';
import { UrlInputViewComponent } from './UrlInputView.view';

export function UrlInputView() {
  const {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  } = useUrlInputView();

  return (
    <UrlInputViewComponent
      url={url}
      error={error}
      onUrlChange={handleUrlChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface UrlInputViewProps {
  url: string;
  error: string | null;
  onUrlChange: (value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function UrlInputViewComponent({
  url,
  error,
  onUrlChange,
  onNext,
  onBack,
}: UrlInputViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Register Problem Link (URL)
        </h2>
        <p className="text-gray-600">
          Please enter the full URL of the problem to register.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 flex flex-col">
        <div className="mb-6">
          <div className="relative">
            <input
              type="url"
              value={url}
              onChange={(e) => onUrlChange(e.target.value)}
              placeholder="https://www.acmicpc.net/problem/1000"
              className={`
                w-full px-4 py-3 border rounded-lg bg-gray-50
                focus:outline-none focus:ring-2 focus:bg-white transition duration-200
                ${error
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            <label className={`
              absolute left-4 transition-all duration-200 pointer-events-none
              ${url
                ? '-top-2 text-xs bg-white px-1 text-blue-600'
                : 'top-3 text-gray-500'
              }
            `}>
              Problem Link
            </label>
          </div>

          {error && (
            <p className="mt-2 text-sm text-red-600">
              {error}
            </p>
          )}
        </div>

        {/* Example */}
        <div className="mb-8 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">Example:</h4>
          <code className="text-sm text-blue-700">
            https://www.acmicpc.net/problem/1000
          </code>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!url.trim()}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useUrlInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();
  const [url, setUrl] = useState(problemData.url || '');
  const [error, setError] = useState<string | null>(null);

  const validateBaekjoonUrl = (url: string): boolean => {
    const baekjoonPattern = /^https?:\/\/(www\.)?acmicpc\.net\/problem\/\d+\/?$/;
    return baekjoonPattern.test(url);
  };

  const handleUrlChange = (value: string) => {
    setUrl(value);
    if (error) {
      setError(null);
    }
  };

  const handleNext = () => {
    if (!url.trim()) {
      setError('Please enter a problem URL');
      return;
    }

    if (!validateBaekjoonUrl(url)) {
      setError('Please enter a valid Baekjoon Online Judge URL (e.g., https://www.acmicpc.net/problem/1000)');
      return;
    }

    setProblemData({ url: url.trim() });
    setCurrentView('CODE_INPUT');
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="src/components/AuthProvider/AuthProvider.view.tsx">
import type { ReactNode } from 'react';

interface AuthProviderViewProps {
  children: ReactNode;
  isLoaded: boolean;
}

export function AuthProviderView({ children, isLoaded }: AuthProviderViewProps) {
  // Show loading indicator while Clerk initializes
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return <>{children}</>;
}
</file>

<file path="src/components/AuthProvider/index.tsx">
import type { ReactNode } from 'react';
import { useAuthProvider } from './useAuthProvider';
import { AuthProviderView } from './AuthProvider.view';

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const { isLoaded } = useAuthProvider();

  return <AuthProviderView isLoaded={isLoaded}>{children}</AuthProviderView>;
}
</file>

<file path="src/components/AuthProvider/useAuthProvider.ts">
import { useEffect } from 'react';
import { useAuth, useUser } from '@clerk/clerk-react';
import { useAuthStore } from '../../store/useAuthStore';
import type { User } from '../../store/useAuthStore';

export function useAuthProvider() {
  const { isLoaded: clerkIsLoaded, isSignedIn: clerkIsSignedIn } = useAuth();
  const { user: clerkUser } = useUser();
  const { setAuthState, setUser, clearAuth } = useAuthStore();

  useEffect(() => {
    // Sync Clerk auth state with Zustand store
    setAuthState({
      isLoaded: clerkIsLoaded,
      isSignedIn: clerkIsSignedIn,
    });

    if (clerkIsLoaded) {
      if (clerkIsSignedIn && clerkUser) {
        // Transform Clerk user to our User interface
        const user: User = {
          id: clerkUser.id,
          emailAddress: clerkUser.primaryEmailAddress?.emailAddress || '',
          firstName: clerkUser.firstName || undefined,
          lastName: clerkUser.lastName || undefined,
          imageUrl: clerkUser.imageUrl || undefined,
          publicMetadata: {
            role: clerkUser.publicMetadata?.role as string | undefined,
          },
        };
        setUser(user);
      } else {
        clearAuth();
      }
    }
  }, [clerkIsLoaded, clerkIsSignedIn, clerkUser, setAuthState, setUser, clearAuth]);

  return {
    isLoaded: clerkIsLoaded,
  };
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx">
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, X } from 'lucide-react';
import { ChoiceView } from './views/ChoiceView';
import { URLInputView } from './views/URLInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import type { ViewType } from '../../store/useIncorrectAnswerNoteStore';

interface IncorrectAnswerNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: any;
  submissionType: 'url' | 'manual' | null;
  codeData: any;
  analysisResult: any[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
  onOverlayClick: () => void;
  onExitConfirm: () => void;
  onExitCancel: () => void;
  onBackClick: () => void;
  onChoiceSelect: (type: 'url' | 'manual') => void;
  onNext: () => void;
  onAnalyze: () => void;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
  onProblemDataChange: (data: any) => void;
  onCodeDataChange: (data: any) => void;
}

const modalSizes = {
  CHOICE: { maxWidth: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { maxWidth: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { maxWidth: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { maxWidth: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { maxWidth: 'max-w-5xl', height: 'h-[700px]' },
};

export function IncorrectAnswerNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  problemData,
  submissionType,
  codeData,
  analysisResult,
  selectedAnalysisIndex,
  isLoading,
  error,
  onOverlayClick,
  onExitConfirm,
  onExitCancel,
  onBackClick,
  onChoiceSelect,
  onNext,
  onAnalyze,
  onAnalysisSelect,
  onGenerateNote,
  onProblemDataChange,
  onCodeDataChange,
}: IncorrectAnswerNoteModalViewProps) {
  const canShowBack = currentView !== 'CHOICE';
  const currentSize = modalSizes[currentView];

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView onChoiceSelect={onChoiceSelect} />;
      case 'URL_INPUT':
        return (
          <URLInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'MANUAL_INPUT':
        return (
          <ManualInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'CODE_INPUT':
        return (
          <CodeInputView
            codeData={codeData}
            onCodeDataChange={onCodeDataChange}
            onAnalyze={onAnalyze}
            isLoading={isLoading}
          />
        );
      case 'RESULTS':
        return (
          <ResultsView
            analysisResult={analysisResult}
            selectedAnalysisIndex={selectedAnalysisIndex}
            onAnalysisSelect={onAnalysisSelect}
            onGenerateNote={onGenerateNote}
          />
        );
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container */}
          <motion.div
            layout
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', duration: 0.3 }}
            className={`relative bg-gray-900 rounded-xl shadow-2xl ${currentSize.maxWidth} ${currentSize.height} transition-all duration-300 ease-in-out`}
          >
            {/* Back Button */}
            {canShowBack && (
              <button
                onClick={onBackClick}
                className="absolute top-6 left-6 z-10 p-2 rounded-full text-gray-400 hover:bg-gray-800 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
            )}

            {/* Loading Overlay */}
            {isLoading && (
              <div className="absolute inset-0 bg-gray-900/80 flex items-center justify-center z-20 rounded-xl">
                <div className="flex flex-col items-center gap-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500" />
                  <p className="text-white text-lg">Analyzing your code...</p>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <div className="absolute top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-md z-20">
                {error}
              </div>
            )}

            {/* Modal Content */}
            <div className="h-full flex flex-col">
              {renderCurrentView()}
            </div>
          </motion.div>

          {/* Exit Confirmation Dialog */}
          <AnimatePresence>
            {isExitConfirmationVisible && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="absolute inset-0 bg-black/60 flex items-center justify-center z-60"
              >
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                  className="bg-gray-800 rounded-lg p-6 max-w-md mx-4"
                >
                  <div className="flex items-center gap-3 mb-4">
                    <X className="w-6 h-6 text-red-400" />
                    <h3 className="text-lg font-semibold text-white">Confirm Exit</h3>
                  </div>
                  <p className="text-gray-300 mb-6">
                    Are you sure you want to cancel the operation and exit?
                  </p>
                  <div className="flex gap-3">
                    <button
                      onClick={onExitCancel}
                      className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={onExitConfirm}
                      className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                    >
                      Confirm
                    </button>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/index.tsx">
import { useIncorrectAnswerNoteModal } from './useIncorrectAnswerNoteModal';
import { IncorrectAnswerNoteModalView } from './IncorrectAnswerNoteModal.view';

export function IncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  } = useIncorrectAnswerNoteModal();

  return (
    <IncorrectAnswerNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      problemData={problemData}
      submissionType={submissionType}
      codeData={codeData}
      analysisResult={analysisResult}
      selectedAnalysisIndex={selectedAnalysisIndex}
      isLoading={isLoading}
      error={error}
      onOverlayClick={handleOverlayClick}
      onExitConfirm={handleExitConfirm}
      onExitCancel={handleExitCancel}
      onBackClick={handleBackClick}
      onChoiceSelect={handleChoiceSelect}
      onNext={handleNextClick}
      onAnalyze={handleAnalyzeClick}
      onAnalysisSelect={handleAnalysisSelect}
      onGenerateNote={handleGenerateNote}
      onProblemDataChange={setProblemData}
      onCodeDataChange={setCodeData}
    />
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts">
import { useIncorrectAnswerNoteStore } from '../../store/useIncorrectAnswerNoteStore';

export function useIncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
    setCurrentView,
    setSubmissionType,
    setProblemData,
    setCodeData,
    setSelectedAnalysisIndex,
    analyzeCode,
  } = useIncorrectAnswerNoteStore();

  const handleOverlayClick = () => {
    showExitConfirmation();
  };

  const handleExitConfirm = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleExitCancel = () => {
    hideExitConfirmation();
  };

  const handleBackClick = () => {
    switch (currentView) {
      case 'URL_INPUT':
      case 'MANUAL_INPUT':
        setCurrentView('CHOICE');
        break;
      case 'CODE_INPUT':
        setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
        break;
      case 'RESULTS':
        setCurrentView('CODE_INPUT');
        break;
      default:
        break;
    }
  };

  const handleChoiceSelect = (type: 'url' | 'manual') => {
    setSubmissionType(type);
    setCurrentView(type === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  const handleNextClick = () => {
    if (currentView === 'URL_INPUT' || currentView === 'MANUAL_INPUT') {
      setCurrentView('CODE_INPUT');
    }
  };

  const handleAnalyzeClick = () => {
    analyzeCode();
  };

  const handleAnalysisSelect = (index: number) => {
    setSelectedAnalysisIndex(index);
  };

  const handleGenerateNote = () => {
    if (analysisResult.length > 0 && analysisResult[selectedAnalysisIndex]) {
      const selectedLogic = analysisResult[selectedAnalysisIndex];
      console.log({
        title: selectedLogic.title,
        description: selectedLogic.description,
        code: selectedLogic.code,
      });
    }
  };

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  };
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx">
import { Link, Bell } from 'lucide-react';

interface ChoiceViewProps {
  onChoiceSelect: (type: 'url' | 'manual') => void;
}

export function ChoiceView({ onChoiceSelect }: ChoiceViewProps) {
  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Please register the problem first
      </h2>
      <div className="grid grid-cols-2 gap-6">
        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('url')}
        >
          <Link className="w-12 h-12 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Register by URL</h3>
          <p className="text-gray-300 text-sm">
            Register problem using Baekjoon URL link
          </p>
          <p className="text-gray-400 text-xs">
            Only Baekjoon Online Judge allowed
          </p>
        </div>

        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('manual')}
        >
          <Bell className="w-12 h-12 text-green-400" />
          <h3 className="text-lg font-semibold text-white">Manual Input</h3>
          <p className="text-gray-300 text-sm">
            Manually enter problem information
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx">
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import type { CodeData } from '../../../store/useIncorrectAnswerNoteStore';

interface CodeInputViewProps {
  codeData: CodeData;
  onCodeDataChange: (data: Partial<CodeData>) => void;
  onAnalyze: () => void;
  isLoading: boolean;
}

const languageExtensions = {
  javascript: javascript(),
  python: python(),
  java: java(),
  cpp: cpp(),
};

const languageOptions = [
  { value: 'javascript', label: 'JavaScript' },
  { value: 'python', label: 'Python' },
  { value: 'java', label: 'Java' },
  { value: 'cpp', label: 'C++' },
];

export function CodeInputView({ codeData, onCodeDataChange, onAnalyze, isLoading }: CodeInputViewProps) {
  const handleLanguageChange = (language: string) => {
    onCodeDataChange({ language });
  };

  const handleCodeChange = (code: string) => {
    onCodeDataChange({ code });
  };

  const handleSubmit = () => {
    if (codeData.code.trim()) {
      onAnalyze();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Code Input
      </h2>

      {/* Language Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Select Language
        </label>
        <select
          value={codeData.language}
          onChange={(e) => handleLanguageChange(e.target.value)}
          className="w-48 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500 transition-colors"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-6">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Your Solution Code
        </label>
        <div className="h-[350px] border border-gray-600 rounded-md overflow-hidden">
          <CodeMirror
            value={codeData.code}
            onChange={handleCodeChange}
            extensions={[languageExtensions[codeData.language as keyof typeof languageExtensions] || javascript()]}
            theme={oneDark}
            placeholder={`Enter your ${languageOptions.find(opt => opt.value === codeData.language)?.label || 'JavaScript'} code here...`}
            basicSetup={{
              lineNumbers: true,
              foldGutter: true,
              dropCursor: false,
              allowMultipleSelections: false,
              indentOnInput: true,
              bracketMatching: true,
              closeBrackets: true,
              autocompletion: true,
              highlightSelectionMatches: false,
            }}
            style={{ fontSize: '14px' }}
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!codeData.code.trim() || isLoading}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        {isLoading ? 'Analyzing...' : 'Analyze'}
      </button>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx">
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface ManualInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function ManualInputView({ problemData, onProblemDataChange, onNext }: ManualInputViewProps) {
  const handleInputChange = (field: keyof ProblemData, value: string) => {
    onProblemDataChange({ [field]: value });
  };

  const handleSubmit = () => {
    if (problemData.title.trim() && problemData.description.trim()) {
      onNext();
    }
  };

  const isFormValid = problemData.title.trim() && problemData.description.trim();

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Manual Problem Information Input
      </h2>

      <div className="flex-1 overflow-y-auto space-y-4 mb-6" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
        {/* Problem Title */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Title *
          </label>
          <input
            type="text"
            value={problemData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Enter problem title"
          />
        </div>

        {/* Problem Description */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Description *
          </label>
          <textarea
            value={problemData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            className="w-full h-40 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Enter detailed problem description"
          />
        </div>

        {/* Input Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Input Conditions
          </label>
          <textarea
            value={problemData.inputCondition}
            onChange={(e) => handleInputChange('inputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe input format and constraints"
          />
        </div>

        {/* Output Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Output Conditions
          </label>
          <textarea
            value={problemData.outputCondition}
            onChange={(e) => handleInputChange('outputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe expected output format"
          />
        </div>

        {/* Constraints */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Constraints
          </label>
          <input
            type="text"
            value={problemData.constraints}
            onChange={(e) => handleInputChange('constraints', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Time and memory limits, data ranges"
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!isFormValid}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx">
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import type { AnalysisResult } from '../../../store/useIncorrectAnswerNoteStore';

interface ResultsViewProps {
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
}

export function ResultsView({
  analysisResult,
  selectedAnalysisIndex,
  onAnalysisSelect,
  onGenerateNote
}: ResultsViewProps) {
  const selectedLogic = analysisResult[selectedAnalysisIndex];

  return (
    <div className="p-6 flex flex-col h-full">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-white">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <button
          onClick={onGenerateNote}
          className="bg-green-600 hover:bg-green-700 text-white font-medium px-4 py-2 rounded-md transition-colors"
        >
          Generate Note with Selected Logic
        </button>
      </div>

      <div className="flex gap-6 h-full pt-4">
        {/* Left Column - Logic Title List */}
        <div className="w-1/3 flex flex-col gap-2 overflow-y-auto" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
          {analysisResult.map((result, index) => (
            <button
              key={index}
              onClick={() => onAnalysisSelect(index)}
              className={`w-full text-left p-3 rounded-md transition-colors ${
                index === selectedAnalysisIndex
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {result.title}
            </button>
          ))}
        </div>

        {/* Right Column - Selected Logic Details */}
        <div className="w-2/3 flex flex-col">
          {selectedLogic && (
            <>
              {/* Code Display */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold text-white mb-2">Code</h3>
                <div className="border border-gray-600 rounded-md overflow-hidden">
                  <CodeMirror
                    value={selectedLogic.code}
                    extensions={[javascript()]}
                    theme={oneDark}
                    readOnly={true}
                    basicSetup={{
                      lineNumbers: true,
                      foldGutter: false,
                      dropCursor: false,
                      allowMultipleSelections: false,
                      indentOnInput: false,
                      bracketMatching: true,
                      closeBrackets: false,
                      autocompletion: false,
                      highlightSelectionMatches: false,
                      searchKeymap: false,
                    }}
                    style={{ fontSize: '14px' }}
                  />
                </div>
              </div>

              {/* Description Display */}
              <div className="mt-4 p-4 bg-gray-800 rounded-md text-gray-300">
                <h3 className="text-lg font-semibold text-white mb-2">Description</h3>
                <p className="leading-relaxed">{selectedLogic.description}</p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx">
import { useState } from 'react';
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface URLInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function URLInputView({ problemData, onProblemDataChange, onNext }: URLInputViewProps) {
  const [isFocused, setIsFocused] = useState(false);
  const [inputValue, setInputValue] = useState(problemData.url || '');

  const handleInputChange = (value: string) => {
    setInputValue(value);
    onProblemDataChange({ url: value });
  };

  const handleSubmit = () => {
    if (inputValue.trim()) {
      onNext();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Register Problem Link (URL)
      </h2>

      <div className="flex-1 flex flex-col justify-center">
        <div className="relative mb-6">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => handleInputChange(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-transparent focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Problem Link"
          />
          <label
            className={`absolute left-4 transition-all duration-200 pointer-events-none ${
              isFocused || inputValue
                ? '-top-2 text-xs text-blue-400 bg-gray-900 px-2'
                : 'top-3 text-gray-400'
            }`}
          >
            Problem Link
          </label>
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!inputValue.trim()}
        className="w-full mt-auto bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="src/components/ProtectedRoute/index.tsx">
import type { ReactNode } from 'react';
import { useProtectedRoute } from './useProtectedRoute';
import { ProtectedRouteView } from './ProtectedRoute.view';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredRole?: string;
  redirectTo?: string;
}

export function ProtectedRoute({
  children,
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: ProtectedRouteProps) {
  const { shouldShowContent, shouldShowLoading } = useProtectedRoute({
    requiredRole,
    redirectTo
  });

  return (
    <ProtectedRouteView
      shouldShowContent={shouldShowContent}
      shouldShowLoading={shouldShowLoading}
    >
      {children}
    </ProtectedRouteView>
  );
}
</file>

<file path="src/components/ProtectedRoute/ProtectedRoute.view.tsx">
import { ReactNode } from 'react';

interface ProtectedRouteViewProps {
  children: ReactNode;
  shouldShowContent: boolean;
  shouldShowLoading: boolean;
}

export function ProtectedRouteView({
  children,
  shouldShowContent,
  shouldShowLoading
}: ProtectedRouteViewProps) {
  // Show loading spinner while authentication is being checked
  if (shouldShowLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Loading...</span>
      </div>
    );
  }

  // Only render children if user is properly authenticated and authorized
  if (shouldShowContent) {
    return <>{children}</>;
  }

  // Return null while redirecting (to prevent flash of content)
  return null;
}
</file>

<file path="src/components/ProtectedRoute/useProtectedRoute.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';

interface UseProtectedRouteProps {
  requiredRole?: string;
  redirectTo?: string;
}

export function useProtectedRoute({
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: UseProtectedRouteProps = {}) {
  const navigate = useNavigate();
  const { isLoaded, isSignedIn, role } = useAuthStore();

  useEffect(() => {
    // Only proceed with checks after Clerk has loaded
    if (!isLoaded) return;

    // Redirect to sign-in if not authenticated
    if (!isSignedIn) {
      navigate(redirectTo);
      return;
    }

    // Redirect if user doesn't have the required role
    if (requiredRole && role !== requiredRole) {
      navigate('/unauthorized'); // You might want to create an unauthorized page
      return;
    }
  }, [isLoaded, isSignedIn, role, requiredRole, navigate, redirectTo]);

  const shouldShowContent = isLoaded && isSignedIn && (!requiredRole || role === requiredRole);
  const shouldShowLoading = !isLoaded;

  return {
    shouldShowContent,
    shouldShowLoading,
    isLoaded,
    isSignedIn,
    role,
  };
}
</file>

<file path="src/hooks/useApiClient.ts">
import { useEffect } from 'react';
import { useAuth } from '@clerk/clerk-react';
import { initializeApiClient } from '../services/apiClient';

/**
 * Hook to initialize the API client with Clerk authentication
 * Should be used at the root level of the authenticated app
 */
export function useApiClient() {
  const { getToken } = useAuth();

  useEffect(() => {
    // Initialize the API client with Clerk's getToken function
    initializeApiClient(getToken);
  }, [getToken]);

  return {
    isInitialized: true,
  };
}
</file>

<file path="src/hooks/useUserProfile.ts">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getUserProfile, updateUserProfile } from '../services/userService';
import type { UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Query keys for user-related data
 */
export const userQueryKeys = {
  profile: ['user', 'profile'] as const,
  stats: ['user', 'stats'] as const,
};

/**
 * Hook to fetch and manage user profile data
 */
export function useUserProfile() {
  const queryClient = useQueryClient();

  // Query for user profile
  const profileQuery = useQuery({
    queryKey: userQueryKeys.profile,
    queryFn: getUserProfile,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation for updating user profile
  const updateProfileMutation = useMutation({
    mutationFn: updateUserProfile,
    onSuccess: (updatedProfile) => {
      // Update the cached profile data
      queryClient.setQueryData(userQueryKeys.profile, updatedProfile);
    },
  });

  return {
    // Profile data
    profile: profileQuery.data,
    isLoading: profileQuery.isLoading,
    isError: profileQuery.isError,
    error: profileQuery.error,

    // Update profile function
    updateProfile: (data: UpdateUserProfileRequest) => updateProfileMutation.mutate(data),
    isUpdating: updateProfileMutation.isPending,
    updateError: updateProfileMutation.error,

    // Utility functions
    refetch: profileQuery.refetch,
  };
}
</file>

<file path="src/index.css">
@import "tailwindcss";
@import "ui-components/src/index.css";

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* 추가적인 브라우저 기본값 제거 */
button, input, optgroup, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

button, select {
  text-transform: none;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* 링크 기본 스타일 제거 */
a {
  color: inherit;
  text-decoration: none;
}

/* 브라우저 기본 포커스 스타일 제거 */
:focus {
  outline: none;
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import { ClerkProvider } from '@clerk/clerk-react';
import './index.css';
import App from './App.tsx';

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error('Missing Publishable Key');
}

function ClerkProviderWithRoutes() {
  const navigate = useNavigate();

  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={import.meta.env.VITE_CLERK_SIGN_IN_URL}
      signUpUrl={import.meta.env.VITE_CLERK_SIGN_UP_URL}
    >
      <App />
    </ClerkProvider>
  );
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <ClerkProviderWithRoutes />
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="src/pages/Components/Components.view.tsx">
import React from 'react';
import { useComponents } from './useComponents';
import { Button, Card, Footer, Input, Spinner, Typography } from 'ui-components/src/components';

export const ComponentsView = () => {
  const { selectedComponent, components, handleComponentSelect } = useComponents();

  const renderButtonDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Button Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Variants</Typography>
          <div className="flex flex-wrap gap-3">
            <Button variant="primary">Primary Button</Button>
            <Button variant="secondary">Secondary Button</Button>
            <Button variant="outline">Outline Button</Button>
            <Button variant="ghost">Ghost Button</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex flex-wrap items-center gap-3">
            <Button size="sm">Small</Button>
            <Button size="md">Medium</Button>
            <Button size="lg">Large</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">States</Typography>
          <div className="flex flex-wrap gap-3">
            <Button>Normal</Button>
            <Button isLoading>Loading</Button>
            <Button disabled>Disabled</Button>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderCardDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Card Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card variant="default">
          <Typography variant="h6" className="mb-2">Default Card</Typography>
          <Typography variant="body2" color="secondary">
            This is a default card with standard styling and shadow.
          </Typography>
        </Card>

        <Card variant="elevated" padding="lg">
          <Typography variant="h6" className="mb-2">Elevated Card</Typography>
          <Typography variant="body2" color="secondary">
            This card has an elevated appearance with more shadow depth and larger padding.
          </Typography>
        </Card>

        <Card variant="outlined" padding="sm">
          <Typography variant="h6" className="mb-2">Outlined Card</Typography>
          <Typography variant="body2" color="secondary">
            This card uses an outlined style with smaller padding.
          </Typography>
        </Card>
      </div>
    </div>
  );

  const renderInputDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Input Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <Input
            label="Basic Input"
            placeholder="Enter some text..."
            helperText="This is helper text"
          />

          <Input
            label="Email Input"
            type="email"
            placeholder="your@email.com"
          />

          <Input
            label="Password Input"
            type="password"
            placeholder="••••••••"
          />
        </div>

        <div className="space-y-4">
          <Input
            label="Input with Error"
            placeholder="Enter value"
            error="This field is required"
          />

          <Input
            label="Disabled Input"
            placeholder="Can't edit this"
            disabled
          />

          <Input
            label="Search Input"
            placeholder="Search..."
            leftIcon={<span>🔍</span>}
          />
        </div>
      </div>
    </Card>
  );

  const renderTypographyDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Typography Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Headings</Typography>
          <div className="space-y-2">
            <Typography variant="h1">Heading 1</Typography>
            <Typography variant="h2">Heading 2</Typography>
            <Typography variant="h3">Heading 3</Typography>
            <Typography variant="h4">Heading 4</Typography>
            <Typography variant="h5">Heading 5</Typography>
            <Typography variant="h6">Heading 6</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Body Text</Typography>
          <div className="space-y-2">
            <Typography variant="body1">Body 1 - Regular paragraph text for main content</Typography>
            <Typography variant="body2">Body 2 - Smaller text for secondary content</Typography>
            <Typography variant="caption">Caption - Very small text for labels and metadata</Typography>
            <Typography variant="overline">Overline - Small caps text</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="space-y-2">
            <Typography color="primary">Primary text color</Typography>
            <Typography color="secondary">Secondary text color</Typography>
            <Typography color="tertiary">Tertiary text color</Typography>
            <Typography color="success">Success text color</Typography>
            <Typography color="warning">Warning text color</Typography>
            <Typography color="error">Error text color</Typography>
            <Typography color="info">Info text color</Typography>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderFooterDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Footer Examples</Typography>

      <div className="space-y-8">
        <div>
          <Typography variant="h6" className="mb-4">Basic Footer</Typography>
          <Footer />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Footer with Links</Typography>
          <Footer
            links={[
              { label: 'About', href: '/about' },
              { label: 'Contact', href: '/contact' },
              { label: 'Privacy', href: '/privacy' },
              { label: 'Terms', href: '/terms' }
            ]}
            socialLinks={[
              { label: 'GitHub', href: 'https://github.com', icon: '🐙' },
              { label: 'Twitter', href: 'https://twitter.com', icon: '🐦' },
              { label: 'LinkedIn', href: 'https://linkedin.com', icon: '💼' }
            ]}
          />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Custom Company Footer</Typography>
          <Footer
            companyName="Custom Company"
            copyrightYear={2024}
            links={[
              { label: 'Documentation', href: '/docs' },
              { label: 'API', href: '/api' },
              { label: 'Support', href: '/support' }
            ]}
          />
        </div>
      </div>
    </div>
  );

  const renderSpinnerDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Spinner Examples</Typography>
      <div className="space-y-6">
        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner size="sm" />
              <Typography variant="caption" className="block mt-2">Small</Typography>
            </div>
            <div className="text-center">
              <Spinner size="md" />
              <Typography variant="caption" className="block mt-2">Medium</Typography>
            </div>
            <div className="text-center">
              <Spinner size="lg" />
              <Typography variant="caption" className="block mt-2">Large</Typography>
            </div>
            <div className="text-center">
              <Spinner size="xl" />
              <Typography variant="caption" className="block mt-2">Extra Large</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner color="brand" />
              <Typography variant="caption" className="block mt-2">Brand</Typography>
            </div>
            <div className="text-center">
              <Spinner color="neutral" />
              <Typography variant="caption" className="block mt-2">Neutral</Typography>
            </div>
            <div className="text-center bg-neutral-800 p-4 rounded">
              <Spinner color="white" />
              <Typography variant="caption" className="block mt-2 text-white">White</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Usage Examples</Typography>
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Spinner size="sm" />
              <Typography variant="body2">Loading content...</Typography>
            </div>

            <Button isLoading disabled>
              Submit Form
            </Button>

            <div className="flex items-center justify-center p-8 bg-background-secondary rounded-lg">
              <div className="text-center">
                <Spinner size="lg" className="mb-3" />
                <Typography variant="body1">Processing your request</Typography>
                <Typography variant="body2" color="secondary">Please wait a moment</Typography>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderSelectedDemo = () => {
    switch (selectedComponent) {
      case 'button':
        return renderButtonDemo();
      case 'card':
        return renderCardDemo();
      case 'footer':
        return renderFooterDemo();
      case 'input':
        return renderInputDemo();
      case 'spinner':
        return renderSpinnerDemo();
      case 'typography':
        return renderTypographyDemo();
      default:
        return renderButtonDemo();
    }
  };

  return (
    <div className="min-h-screen bg-background-primary">
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-8">
          <Typography variant="h2" className="mb-2">Component Library</Typography>
          <Typography variant="body1" color="secondary">
            Explore and test the reusable UI components built with Linear design system
          </Typography>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Component Navigation */}
          <aside className="lg:w-64 shrink-0">
            <Card padding="sm">
              <Typography variant="h6" className="mb-4">Components</Typography>
              <nav className="space-y-2">
                {components.map((component) => (
                  <button
                    key={component.id}
                    onClick={() => handleComponentSelect(component.id)}
                    className={`w-full text-left p-3 rounded-md text-sm font-medium transition-colors ${
                      selectedComponent === component.id
                        ? 'bg-brand text-white'
                        : 'text-text-primary hover:bg-background-tertiary'
                    }`}
                  >
                    <div>
                      <div className="font-medium">{component.name}</div>
                      <div className={`text-xs mt-1 ${
                        selectedComponent === component.id ? 'text-white/80' : 'text-text-tertiary'
                      }`}>
                        {component.description}
                      </div>
                    </div>
                  </button>
                ))}
              </nav>
            </Card>
          </aside>

          {/* Component Demo */}
          <main className="flex-1">
            {renderSelectedDemo()}
          </main>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Components/index.tsx">
export { ComponentsView as Components } from './Components.view';
</file>

<file path="src/pages/Components/useComponents.ts">
import { useState } from 'react';

export const useComponents = () => {
  const [selectedComponent, setSelectedComponent] = useState<string>('button');

  const components = [
    { id: 'button', name: 'Button', description: 'Interactive button component with multiple variants' },
    { id: 'card', name: 'Card', description: 'Container component for grouping related content' },
    { id: 'footer', name: 'Footer', description: 'Website footer with links and company information' },
    { id: 'input', name: 'Input', description: 'Form input component with validation support' },
    { id: 'spinner', name: 'Spinner', description: 'Loading spinner with different sizes and colors' },
    { id: 'typography', name: 'Typography', description: 'Text component with consistent styling' },
  ];

  const handleComponentSelect = (componentId: string) => {
    setSelectedComponent(componentId);
  };

  return {
    selectedComponent,
    components,
    handleComponentSelect,
  };
};
</file>

<file path="src/pages/Dashboard/index.tsx">
import { useAuthStore } from '../../store/useAuthStore';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';
import { AiNoteModal } from '../../components/AiNoteModal';

export default function DashboardPage() {
  const { user, role } = useAuthStore();
  const { openModal } = useAiNoteModalStore();

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            Welcome to AlgoRevise Dashboard
          </h1>
          <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h2 className="text-lg font-semibold text-blue-900 mb-2">User Information</h2>
            <div className="space-y-2 text-sm">
              <p><span className="font-medium">Name:</span> {user?.firstName} {user?.lastName}</p>
              <p><span className="font-medium">Email:</span> {user?.emailAddress}</p>
              <p><span className="font-medium">Role:</span> {role || 'No role assigned'}</p>
              <p><span className="font-medium">User ID:</span> {user?.id}</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">AI Incorrect Answer Note</h3>
            <p className="text-gray-600 mb-4">Generate AI-powered notes from your algorithm solutions</p>
            <button
              onClick={openModal}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
            >
              Generate Incorrect Answer Note
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">View Analytics</h3>
            <p className="text-gray-600 mb-4">Check your learning progress and statistics</p>
            <button className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              View Analytics
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">Practice Problems</h3>
            <p className="text-gray-600 mb-4">Solve AI-generated practice problems</p>
            <button className="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              Start Practice
            </button>
          </div>
        </div>
      </div>

      {/* AI Note Modal */}
      <AiNoteModal />
    </div>
  );
}
</file>

<file path="src/pages/SetupAccount/index.tsx">
import { useSetupAccount } from './useSetupAccount';
import { SetupAccountView } from './SetupAccount.view';

export default function SetupAccountPage() {
  useSetupAccount();

  return <SetupAccountView />;
}
</file>

<file path="src/pages/SetupAccount/SetupAccount.view.tsx">
export function SetupAccountView() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="text-center p-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6"></div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">계정을 설정하고 있습니다</h2>
        <p className="text-gray-600">잠시만 기다려주세요...</p>
        <div className="mt-4 text-sm text-gray-500">
          역할을 확인하고 대시보드로 이동합니다
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/SetupAccount/useSetupAccount.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';
import { useUser } from '@clerk/clerk-react';
import type { User } from '../../store/useAuthStore';

export function useSetupAccount() {
  const navigate = useNavigate();
  const { user, isLoaded } = useUser();
  const { setUser: setStoreUser, setAuthState } = useAuthStore();

  useEffect(() => {
    if (isLoaded && user) {
      const role = user.publicMetadata?.role as string | undefined;
      console.log('User info:', user);
      console.log('User Role:', user.publicMetadata?.role);

      if (role === 'member') {
        // Store에 사용자 정보 저장
        const storeUser: User = {
          id: user.id,
          emailAddress: user.primaryEmailAddress?.emailAddress || '',
          firstName: user.firstName || undefined,
          lastName: user.lastName || undefined,
          imageUrl: user.imageUrl || undefined,
          publicMetadata: {
            role: role,
          },
        };

        setStoreUser(storeUser);
        setAuthState({
          isLoaded: true,
          isSignedIn: true,
        });

        navigate('/dashboard');
        return;
      }
    }

    const reloadInterval = setInterval(() => {
      if (user) {
        console.log('Reloading user info...');
        user.reload();
      }
    }, 1000);

    // role이 member가 아니거나 사용자 정보가 없는 경우 타이머 설정
    const timeoutTimer = setTimeout(() => {
      if (isLoaded && (!user || user.publicMetadata?.role !== 'member')) {
        console.log('Unauthorized access or user info missing, redirecting to /unauthorized');
        navigate('/unauthorized');
      }
    }, 15000);

    return () => {
      clearInterval(reloadInterval);
      clearTimeout(timeoutTimer);
    };
  }, [isLoaded, user, setStoreUser, setAuthState, navigate]);

  return {};
}
</file>

<file path="src/pages/SignIn/index.tsx">
import SignInPageView from "./SignInPage.view";
import { useSignIn } from "./useSignIn";

const SignInPage = () => {
  const { handleEmailSignInClick, handleSignUpClick } = useSignIn();

  return (
    <SignInPageView
      onEmailSignInClick={handleEmailSignInClick}
      onSignUpClick={handleSignUpClick}
    />
  )
}

export default SignInPage;
</file>

<file path="src/pages/SignIn/SignInPage.view.tsx">
import React from 'react';
import { SignInWithGoogleButton } from '../../../../../libs/ui-components/src/components/index';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/index';

interface SignInPageViewProps {
  onEmailSignInClick: () => void;
  onSignUpClick: () => void;
}

const SignInPageView: React.FC<SignInPageViewProps> = ({ onEmailSignInClick, onSignUpClick }) => {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      
      <div className="w-full max-w-xs flex flex-col items-center">
        
        <div className="h-10 w-10 mb-8 bg-white rounded-full">
            {/* <YourLogo className="h-10 w-10" /> */}
        </div>
        
        <h1 className="text-xl font-normal mb-6">Log in to AlgorNote</h1>
        
        <div className="w-full flex flex-col space-y-3">
          <SignInWithGoogleButton />
          <SignInWithEmailButton onClick={onEmailSignInClick} />
        </div>
        
        <p className="mt-8 text-sm text-gray-400 text-xs">
          Don't have an account?
          <button onClick={onSignUpClick} className="font-semibold text-white hover:underline ml-1 text-xs">
            Sign up
          </button> or
          <a href="#" className="font-semibold text-white hover:underline ml-1 text-xs">
            Learn more
          </a>
        </p>

      </div>
    </main>
  );
};

export default SignInPageView;
</file>

<file path="src/pages/SignIn/useSignIn.ts">
import { useNavigate } from 'react-router-dom';

export function useSignIn() {
  const navigate = useNavigate();

  const handleEmailSignInClick = () => {
    navigate('/sign-in/email');
  };

  const handleSignUpClick = () => {
    navigate('/sign-up');
  };

  return {
    handleEmailSignInClick,
    handleSignUpClick
  };
}
</file>

<file path="src/pages/SignInWithEmail/index.tsx">
import { useSignInWithEmail } from './useSignInWithEmail';
import { SignInWithEmailPageView } from './SignInWithEmailPage.view';

export function SignInWithEmailPage() {
  const {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick
  } = useSignInWithEmail();

  return (
    <SignInWithEmailPageView
      email={email}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onBackToLogin={handleBackToLogin}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignInWithEmailPage;
</file>

<file path="src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignInWithEmailPageViewProps {
  email: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onBackToLogin: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignInWithEmailPageView({
  email,
  error,
  isLoading,
  onEmailChange,
  onBackToLogin,
  onSubmit,
  onContinueClick
}: SignInWithEmailPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          What's your email address?
        </h1>

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type="email"
              value={email}
              onChange={(e) => onEmailChange(e.target.value)}
              placeholder="Enter your email address..."
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isLoading || !email.trim()}
          />

        </form>

        <button
          type="button"
          onClick={onBackToLogin}
          disabled={isLoading}
          className={`
            mt-6 text-sm text-gray-400
            hover:text-white hover:underline
            disabled:opacity-50 disabled:cursor-not-allowed
            transition-colors duration-200
          `}
        >
          Back to login
        </button>

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignInWithEmail/useSignInWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignIn } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schema for email validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

export function useSignInWithEmail() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signIn } = useSignIn();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleEmailLogin = async () => {
    // Validate email with Zod
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signIn?.create({
        identifier: email,
      });
      console.log('Email sign-in initiated for:', email);

    } catch (err) {
      console.error('Sign-in error:', err);
      setError('An error occurred during sign-in. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await handleEmailLogin();
  };

  return {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick: handleEmailLogin
  };
}
</file>

<file path="src/pages/SignUp/index.tsx">
import { useSignUp } from './useSignUp';
import { SignUpPageView } from './SignUpPage.view';

export function SignUpPage() {
  const {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  } = useSignUp();

  return (
    <SignUpPageView
      hasGoogleHistory={hasGoogleHistory}
      isLoaded={isLoaded}
      onGoogleSignUp={handleGoogleSignUp}
      onEmailSignUp={handleEmailSignUp}
      onSignInClick={handleSignInClick}
    />
  );
}

export default SignUpPage;
</file>

<file path="src/pages/SignUp/SignUpPage.view.tsx">
import { SignInWithGoogleButtonView } from '../../../../../libs/ui-components/src/components/sign-in-with-google-button/SignInWithGoogleButton.view';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignUpPageViewProps {
  hasGoogleHistory: boolean;
  isLoaded: boolean;
  onGoogleSignUp: () => void;
  onEmailSignUp: () => void;
  onSignInClick: () => void;
}

export function SignUpPageView({
  hasGoogleHistory,
  isLoaded,
  onGoogleSignUp,
  onEmailSignUp,
  onSignInClick
}: SignUpPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
          {/* Logo would go here */}
        </div>

        {/* Title */}
        <h1 className="text-xl font-normal mb-2 text-center">
          Create your workspace
        </h1>

        <div className="w-full flex flex-col space-y-3 mb-6">
          <SignInWithEmailButton onClick={onEmailSignUp} />
        </div>

        <p className="text-xs text-gray-400 text-center mb-8 leading-relaxed">
          By signing up, you agree to our{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Terms of Service
          </a>{' '}
          and{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Data Processing Agreement
          </a>
        </p>

        <p className="text-xs text-gray-400">
          Already have an account?{' '}
          <button
            onClick={onSignInClick}
            className="text-white hover:underline font-medium"
          >
            Log in
          </button>
        </p>

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignUp/useSignUp.ts">
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp as useClerkSignUp } from '@clerk/clerk-react';

export function useSignUp() {
  const [hasGoogleHistory, setHasGoogleHistory] = useState(false);
  const navigate = useNavigate();
  const { signUp, isLoaded } = useClerkSignUp();

  useEffect(() => {
    const googleHistory = localStorage.getItem('previous-google-login');
    setHasGoogleHistory(!!googleHistory);
  }, []);

  const handleGoogleSignUp = async () => {
    if (!isLoaded || !signUp) {
      console.error('Clerk is not loaded yet');
      return;
    }

    try {
      await signUp.authenticateWithRedirect({
        strategy: 'oauth_google',
        redirectUrl: '/sso-callback',
        redirectUrlComplete: '/dashboard',
      });

      // Store Google login preference
      localStorage.setItem('previous-google-login', 'true');
    } catch (error) {
      console.error('Error signing up with Google:', error);
    }
  };

  const handleEmailSignUp = () => {
    navigate('/sign-up/email');
  };

  const handleSignInClick = () => {
    navigate('/sign-in');
  };

  return {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  };
}
</file>

<file path="src/pages/SignUpWithEmail/index.tsx">
import { useSignUpWithEmail } from './useSignUpWithEmail';
import { SignUpWithEmailPageView } from './SignUpWithEmailPage.view';

export function SignUpWithEmailPage() {
  const {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  } = useSignUpWithEmail();

  return (
    <SignUpWithEmailPageView
      step={step}
      email={email}
      password={password}
      verificationCode={verificationCode}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onPasswordChange={handlePasswordChange}
      onVerificationCodeChange={handleVerificationCodeChange}
      onBackToLogin={handleBackToLogin}
      onBackToEmail={handleBackToEmail}
      onBackToPassword={handleBackToPassword}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignUpWithEmailPage;
</file>

<file path="src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

type SignUpStep = 'email' | 'password' | 'verification';

interface SignUpWithEmailPageViewProps {
  step: SignUpStep;
  email: string;
  password: string;
  verificationCode: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onPasswordChange: (value: string) => void;
  onVerificationCodeChange: (value: string) => void;
  onBackToLogin: () => void;
  onBackToEmail: () => void;
  onBackToPassword: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignUpWithEmailPageView({
  step,
  email,
  password,
  verificationCode,
  error,
  isLoading,
  onEmailChange,
  onPasswordChange,
  onVerificationCodeChange,
  onBackToLogin,
  onBackToEmail,
  onBackToPassword,
  onSubmit,
  onContinueClick
}: SignUpWithEmailPageViewProps) {
  const getTitle = () => {
    switch (step) {
      case 'email':
        return "What's your email address?";
      case 'password':
        return 'Create your password';
      case 'verification':
        return 'Check your email';
    }
  };

  const getButtonText = () => {
    switch (step) {
      case 'email':
        return 'Continue with Email';
      case 'password':
        return 'Create Account';
      case 'verification':
        return 'Verify & Complete';
    }
  };

  const getPlaceholder = () => {
    switch (step) {
      case 'email':
        return 'Enter your email address...';
      case 'password':
        return 'Create a strong password...';
      case 'verification':
        return 'Enter 6-digit code...';
    }
  };

  const getCurrentValue = () => {
    switch (step) {
      case 'email':
        return email;
      case 'password':
        return password;
      case 'verification':
        return verificationCode;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch (step) {
      case 'email':
        onEmailChange(value);
        break;
      case 'password':
        onPasswordChange(value);
        break;
      case 'verification':
        onVerificationCodeChange(value);
        break;
    }
  };

  const getInputType = () => {
    switch (step) {
      case 'email':
        return 'email';
      case 'password':
        return 'password';
      case 'verification':
        return 'text';
    }
  };

  const isButtonDisabled = () => {
    const currentValue = getCurrentValue();
    return isLoading || !currentValue.trim();
  };

  const getBackButton = () => {
    switch (step) {
      case 'email':
        return (
          <button
            type="button"
            onClick={onBackToLogin}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to login
          </button>
        );
      case 'password':
        return (
          <button
            type="button"
            onClick={onBackToEmail}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to email
          </button>
        );
      case 'verification':
        return (
          <button
            type="button"
            onClick={onBackToPassword}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to password
          </button>
        );
    }
  };

  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          {getTitle()}
        </h1>

        {step === 'verification' && (
          <p className="text-sm text-gray-400 mb-4 text-center">
            We sent a verification code to {email}
          </p>
        )}

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type={getInputType()}
              value={getCurrentValue()}
              onChange={handleInputChange}
              placeholder={getPlaceholder()}
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {step === 'password' && (
              <p className="text-xs text-gray-500 mt-1">
                Password must be at least 8 characters with uppercase, lowercase, and number
              </p>
            )}

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isButtonDisabled()}
          >
            {getButtonText()}
          </SignInWithEmailButton>

        </form>

        {getBackButton()}

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignUpWithEmail/useSignUpWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schemas for validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

const passwordSchema = z.object({
  password: z
    .string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number')
});

const verificationCodeSchema = z.object({
  code: z
    .string()
    .min(6, 'Verification code must be 6 digits')
    .max(6, 'Verification code must be 6 digits')
});

type SignUpStep = 'email' | 'password' | 'verification';

export function useSignUpWithEmail() {
  const [step, setStep] = useState<SignUpStep>('email');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signUp, setActive } = useSignUp();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handlePasswordChange = (value: string) => {
    setPassword(value);
    if (error) {
      setError('');
    }
  };

  const handleVerificationCodeChange = (value: string) => {
    setVerificationCode(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleBackToEmail = () => {
    setStep('email');
    setPassword('');
    setError('');
  };

  const handleBackToPassword = () => {
    setStep('password');
    setVerificationCode('');
    setError('');
  };

  const checkEmailAndProceed = async () => {
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signUp?.create({
        emailAddress: email,
      });

      setStep('password');
    } catch (err: any) {
      console.error('Email check error:', err);

      // Check if it's an existing user error
      if (err.errors?.some((error: any) =>
        error.code === 'form_identifier_exists' ||
        error.code === 'form_identifier_not_found'
      )) {
        setError('This email is already registered. Please sign in instead.');
      } else {
        setError('An error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const createAccount = async () => {
    const validation = passwordSchema.safeParse({ password });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      // Create account with email and password
      await signUp?.update({
        password: password,
      });

      // Send verification email
      await signUp?.prepareEmailAddressVerification({ strategy: 'email_code' });

      setStep('verification');
    } catch (err: any) {
      console.error('Account creation error:', err);
      setError('Failed to create account. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const verifyEmailAndComplete = async () => {
    const validation = verificationCodeSchema.safeParse({ code: verificationCode });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      const result = await signUp?.attemptEmailAddressVerification({
        code: verificationCode,
      });


      // 이메일인증에 성공했을 때
      if (result?.status === 'complete' && result.createdSessionId) {
        console.log('reuslt', result);

        if (setActive) {
          await setActive({ session: result.createdSessionId });
          navigate('/setup-account');
        } else {
          console.error('setActive is not available');
          setError('Authentication setup failed. Please try again.');
        }
      }
    } catch (err: any) {
      console.error('Verification error:', err);
      setError('Invalid verification code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  const handleContinueClick = async () => {
    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  return {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  };
}
</file>

<file path="src/pages/SSOCallback/index.tsx">
import { useEffect } from 'react'
import { useClerk, useSession } from '@clerk/clerk-react'
import { useNavigate } from 'react-router-dom'

interface RedirectResult {
  createdSessionId?: string;
}

export default function SSOCallbackPage() {
  const { handleRedirectCallback } = useClerk();
  const { session, isLoaded } = useSession(); // isLoaded 추가
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        await handleRedirectCallback({
          afterSignInUrl: '/dashboard',
          afterSignUpUrl: '/setup-account'
        }) as RedirectResult;
      } catch (error) {
        console.error('SSO callback error:', error);
        navigate('/error');
      }
    })();
  }, []); 

  useEffect(() => {
    if (isLoaded && session) {
      console.log('Session is active, navigating...');
      navigate('/setup-account');
    }
  }, [isLoaded, session, navigate]);

  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">세션 확인 중...</p>
        </div>
      </div>
    );
  }

  // 로딩 UI
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600">인증 처리 중...</p>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/Unauthorized/index.tsx">
import { useNavigate } from 'react-router-dom';

export default function UnauthorizedPage() {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate('/');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center">
        <div className="mb-4">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg
              className="w-8 h-8 text-red-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z"
              />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-6">
            You don't have permission to access this page. Please contact an administrator if you believe this is an error.
          </p>
        </div>
        <button
          onClick={handleGoHome}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
        >
          Go to Home
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/schemas/user.schema.ts">
import { z } from 'zod';

// User profile response schema
export const userProfileSchema = z.object({
  id: z.string(),
  email: z.string().email(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  avatarUrl: z.string().url().optional(),
  role: z.string().optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).default('system'),
    language: z.string().default('en'),
    notifications: z.boolean().default(true),
  }).optional(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

// User profile update request schema
export const updateUserProfileSchema = z.object({
  firstName: z.string().min(1).optional(),
  lastName: z.string().min(1).optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).optional(),
    language: z.string().optional(),
    notifications: z.boolean().optional(),
  }).optional(),
});

// Infer TypeScript types from schemas
export type UserProfile = z.infer<typeof userProfileSchema>;
export type UpdateUserProfileRequest = z.infer<typeof updateUserProfileSchema>;
</file>

<file path="src/services/apiClient.ts">
import axios from 'axios';
import type { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { useAuthStore } from '../store/useAuthStore';

const apiClient: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

let getTokenFn: (() => Promise<string | null>) | null = null;

export function initializeApiClient(getToken: () => Promise<string | null>) {
  getTokenFn = getToken;
}

// Request interceptor to add authentication token
apiClient.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    if (getTokenFn) {
      try {
        const token = await getTokenFn();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
      } catch (error) {
        console.warn('Failed to get authentication token:', error);
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle authentication errors
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      // Clear auth state when authentication fails
      const { clearAuth } = useAuthStore.getState();
      clearAuth();

      // Redirect to sign-in page
      window.location.href = '/sign-in';
    }
    return Promise.reject(error);
  }
);

export default apiClient;
</file>

<file path="src/services/userService.ts">
import apiClient from './apiClient';
import { userProfileSchema, updateUserProfileSchema } from '../schemas/user.schema';
import type { UserProfile, UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Get current user's profile information
 */
export async function getUserProfile(): Promise<UserProfile> {
  const response = await apiClient.get('/users/profile');
  return userProfileSchema.parse(response.data);
}

/**
 * Update current user's profile information
 */
export async function updateUserProfile(data: UpdateUserProfileRequest): Promise<UserProfile> {
  // Validate request data
  const validatedData = updateUserProfileSchema.parse(data);

  const response = await apiClient.put('/users/profile', validatedData);
  return userProfileSchema.parse(response.data);
}

/**
 * Delete current user's account
 */
export async function deleteUserAccount(): Promise<void> {
  await apiClient.delete('/users/profile');
}

/**
 * Get user's activity statistics
 */
export async function getUserStats(): Promise<{
  problemsSolved: number;
  weeklyActivity: number[];
  streakDays: number;
  totalTimeSpent: number;
}> {
  const response = await apiClient.get('/users/stats');
  return response.data;
}
</file>

<file path="src/store/useAiNoteModalStore.ts">
import { create } from 'zustand';

export type ModalView = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  url?: string;
  title?: string;
  description?: string;
  inputOutput?: string;
  constraints?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisUnit {
  title: string;
  description: string;
  code: string;
  selected?: boolean;
}

interface AiNoteModalState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisUnit[];
  isLoading: boolean;
  error: string | null;
}

interface AiNoteModalActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ModalView) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (result: AnalysisUnit[]) => void;
  toggleAnalysisSelection: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetModal: () => void;
  startAnalysis: () => Promise<void>;
}

type AiNoteModalStore = AiNoteModalState & AiNoteModalActions;

const initialState: AiNoteModalState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {},
  submissionType: null,
  codeData: { code: '', language: 'javascript' },
  analysisResult: [],
  isLoading: false,
  error: null,
};

const generateDummyAnalysis = (): AnalysisUnit[] => [
  {
    title: "1. Initial Variable Declaration and Input Processing",
    description: "This section initializes variables required for the algorithm and reads data via standard input.",
    code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`,
    selected: false,
  },
  {
    title: "2. Core Logic: Dynamic Programming (DP)",
    description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
    code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`,
    selected: false,
  },
  {
    title: "3. Output Result",
    description: "This section outputs the final value from the calculated DP table in the specified format.",
    code: `console.log(dp[N]);`,
    selected: false,
  }
];

export const useAiNoteModalStore = create<AiNoteModalStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => {
    const { resetModal } = get();
    resetModal();
    set({ isModalOpen: false });
  },

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view) => set({ currentView: view }),

  setSubmissionType: (type) => set({ submissionType: type }),

  setProblemData: (data) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (result) => set({ analysisResult: result }),

  toggleAnalysisSelection: (index) =>
    set((state) => ({
      analysisResult: state.analysisResult.map((unit, i) =>
        i === index ? { ...unit, selected: !unit.selected } : unit
      ),
    })),

  setLoading: (loading) => set({ isLoading: loading }),

  setError: (error) => set({ error }),

  resetModal: () => set(initialState),

  startAnalysis: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate API call with 2-second delay
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const dummyAnalysis = generateDummyAnalysis();
      set({
        analysisResult: dummyAnalysis,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: 'Failed to analyze code. Please try again.',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="src/store/useAuthStore.ts">
import { create } from 'zustand';

export interface User {
  id: string;
  emailAddress: string;
  firstName?: string;
  lastName?: string;
  imageUrl?: string;
  publicMetadata: {
    role?: string;
  };
}

interface AuthState {
  isLoaded: boolean;
  isSignedIn: boolean;
  user: User | null;
  role: string | null;
}

interface AuthActions {
  setAuthState: (state: Partial<AuthState>) => void;
  setUser: (user: User | null) => void;
  clearAuth: () => void;
}

type AuthStore = AuthState & AuthActions;

const initialState: AuthState = {
  isLoaded: false,
  isSignedIn: false,
  user: null,
  role: null,
};

export const useAuthStore = create<AuthStore>((set) => ({
  ...initialState,

  setAuthState: (newState) =>
    set((state) => {
      const updatedState = { ...state, ...newState };
      // Extract role from user's publicMetadata when user is set
      if (newState.user) {
        updatedState.role = newState.user.publicMetadata?.role || null;
      }
      return updatedState;
    }),

  setUser: (user) =>
    set((state) => ({
      ...state,
      user,
      role: user?.publicMetadata?.role || null,
      isSignedIn: !!user,
    })),

  clearAuth: () => set(initialState),
}));
</file>

<file path="src/store/useIncorrectAnswerNoteStore.ts">
import { create } from 'zustand';

export type ViewType = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  title: string;
  description: string;
  inputCondition: string;
  outputCondition: string;
  constraints: string;
  url?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisResult {
  title: string;
  description: string;
  code: string;
}

interface IncorrectAnswerNoteState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
}

interface IncorrectAnswerNoteActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ViewType) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (results: AnalysisResult[]) => void;
  setSelectedAnalysisIndex: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetState: () => void;
  analyzeCode: () => Promise<void>;
}

type IncorrectAnswerNoteStore = IncorrectAnswerNoteState & IncorrectAnswerNoteActions;

const initialState: IncorrectAnswerNoteState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {
    title: '',
    description: '',
    inputCondition: '',
    outputCondition: '',
    constraints: '',
    url: '',
  },
  submissionType: null,
  codeData: {
    code: '',
    language: 'javascript',
  },
  analysisResult: [],
  selectedAnalysisIndex: 0,
  isLoading: false,
  error: null,
};

export const useIncorrectAnswerNoteStore = create<IncorrectAnswerNoteStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => set((state) => ({
    ...initialState,
    isModalOpen: false,
  })),

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view: ViewType) => set({ currentView: view }),

  setSubmissionType: (type: SubmissionType) => set({ submissionType: type }),

  setProblemData: (data: Partial<ProblemData>) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data: Partial<CodeData>) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (results: AnalysisResult[]) => set({ analysisResult: results }),

  setSelectedAnalysisIndex: (index: number) => set({ selectedAnalysisIndex: index }),

  setLoading: (loading: boolean) => set({ isLoading: loading }),

  setError: (error: string | null) => set({ error }),

  resetState: () => set(initialState),

  analyzeCode: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate 2-second loading
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate dummy analysis data
      const dummyAnalysis: AnalysisResult[] = [
        {
          title: "1. Initial Variable Declaration and Input Processing",
          description: "This section initializes variables required for the algorithm and reads data via standard input.",
          code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`
        },
        {
          title: "2. Core Logic: Dynamic Programming (DP)",
          description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
          code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`
        },
        {
          title: "3. Output Result",
          description: "This section outputs the final value from the calculated DP table in the specified format.",
          code: `console.log(dp[N]);`
        }
      ];

      set({
        analysisResult: dummyAnalysis,
        selectedAnalysisIndex: 0,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: error instanceof Error ? error.message : 'Analysis failed',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    '../../libs/ui-components/src/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          DEFAULT: "#5E6AD2",
          light: "#7B83EB",
          dark: "#4C5AA8"
        },
        neutral: {
          black: "#0D0E10",
          900: "#16181D",
          800: "#1C1F26",
          700: "#22252C",
          600: "#2A2D34",
          500: "#35393F",
          400: "#4E5158",
          300: "#6B7280",
          100: "#D1D5DB",
          50: "#F3F4F6",
          white: "#FFFFFF"
        },
        semantic: {
          success: "#10B981",
          warning: "#F59E0B",
          error: "#EF4444",
          info: "#3B82F6"
        },
        background: {
          primary: "#FAFBFC",
          secondary: "#FFFFFF",
          tertiary: "#F8F9FA"
        },
        text: {
          primary: "#0D0E10",
          secondary: "#6B7280",
          tertiary: "#9CA3AF",
          inverse: "#FFFFFF"
        }
      },
      fontFamily: {
        sans: ["Inter", "-apple-system", "BlinkMacSystemFont", "'Segoe UI'", "Roboto", "sans-serif"],
        mono: ["'SF Mono'", "Monaco", "'Cascadia Code'", "'Roboto Mono'", "Consolas", "'Courier New'", "monospace"]
      },
      fontSize: {
        xs: "12px",
        sm: "14px",
        base: "16px",
        lg: "18px",
        xl: "20px",
        "2xl": "24px",
        "3xl": "30px",
        "4xl": "36px",
        "5xl": "48px",
        "6xl": "64px"
      },
      fontWeight: {
        light: "300",
        normal: "400",
        medium: "500",
        semibold: "600",
        bold: "700"
      },
      lineHeight: {
        tight: "1.25",
        snug: "1.375",
        normal: "1.5",
        relaxed: "1.625",
        loose: "2"
      },
      spacing: {
        "1": "4px",
        "2": "8px",
        "3": "12px",
        "4": "16px",
        "5": "20px",
        "6": "24px",
        "8": "32px",
        "10": "40px",
        "12": "48px",
        "16": "64px",
        "20": "80px",
        "24": "96px",
        "32": "128px"
      },
      borderRadius: {
        sm: "2px",
        DEFAULT: "6px",
        md: "8px",
        lg: "12px",
        xl: "16px"
      },
      boxShadow: {
        xs: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
        sm: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)",
        md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)",
        lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
        xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)",
        "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
      }
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

</files>
