This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.vooster/project.json
.vooster/rules.json
.vooster/vooster.json
apps/backend/.gitattributes
apps/backend/.gitignore
apps/backend/build.gradle
apps/backend/gradlew
apps/backend/gradlew.bat
apps/backend/settings.gradle
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/AlgorithmNoteV2Application.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/ClerkJwtProperties.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/NgrokComponent.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/SecurityConfig.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/WebClientConfig.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/WebhookProperties.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/controller/TestController.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/controller/WebhookController.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkUserDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkWebhookEventDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkWebhookResponseDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/GlobalExceptionHandler.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/JwtVerificationException.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/UserProcessingException.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/filter/ClerkJwtAuthenticationFilter.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/ClerkUserService.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/ClerkWebhookVerificationService.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/JwtVerificationService.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/controller/UserController.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/domain/User.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserRegisterRequestDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserResponseDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserUpdateRequestDto.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/exception/UserNotFoundException.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/repository/UserRepository.java
apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/service/UserService.java
apps/backend/src/main/resources/application.properties
apps/backend/src/test/java/algorithm_note/algorithm_note_v2/AlgorithmNoteV2ApplicationTests.java
apps/dashboard/.gitignore
apps/dashboard/eslint.config.js
apps/dashboard/index.html
apps/dashboard/package.json
apps/dashboard/postcss.config.mjs
apps/dashboard/public/vite.svg
apps/dashboard/README.md
apps/dashboard/repomix-output.xml
apps/dashboard/src/App.tsx
apps/dashboard/src/assets/react.svg
apps/dashboard/src/components/AiNoteModal/AiNoteModal.view.tsx
apps/dashboard/src/components/AiNoteModal/index.tsx
apps/dashboard/src/components/AiNoteModal/useAiNoteModal.ts
apps/dashboard/src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx
apps/dashboard/src/components/AiNoteModal/views/ChoiceView/index.tsx
apps/dashboard/src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts
apps/dashboard/src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx
apps/dashboard/src/components/AiNoteModal/views/CodeInputView/index.tsx
apps/dashboard/src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts
apps/dashboard/src/components/AiNoteModal/views/ManualInputView/index.tsx
apps/dashboard/src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx
apps/dashboard/src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts
apps/dashboard/src/components/AiNoteModal/views/ResultsView/index.tsx
apps/dashboard/src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx
apps/dashboard/src/components/AiNoteModal/views/ResultsView/useResultsView.ts
apps/dashboard/src/components/AiNoteModal/views/UrlInputView/index.tsx
apps/dashboard/src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx
apps/dashboard/src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts
apps/dashboard/src/components/AuthProvider/AuthProvider.view.tsx
apps/dashboard/src/components/AuthProvider/index.tsx
apps/dashboard/src/components/AuthProvider/useAuthProvider.ts
apps/dashboard/src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/index.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts
apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx
apps/dashboard/src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx
apps/dashboard/src/components/ProtectedRoute/index.tsx
apps/dashboard/src/components/ProtectedRoute/ProtectedRoute.view.tsx
apps/dashboard/src/components/ProtectedRoute/useProtectedRoute.ts
apps/dashboard/src/hooks/useApiClient.ts
apps/dashboard/src/hooks/useUserProfile.ts
apps/dashboard/src/index.css
apps/dashboard/src/main.tsx
apps/dashboard/src/pages/Components/Components.view.tsx
apps/dashboard/src/pages/Components/index.tsx
apps/dashboard/src/pages/Components/useComponents.ts
apps/dashboard/src/pages/Dashboard/index.tsx
apps/dashboard/src/pages/SetupAccount/index.tsx
apps/dashboard/src/pages/SetupAccount/SetupAccount.view.tsx
apps/dashboard/src/pages/SetupAccount/useSetupAccount.ts
apps/dashboard/src/pages/SignIn/index.tsx
apps/dashboard/src/pages/SignIn/SignInPage.view.tsx
apps/dashboard/src/pages/SignIn/useSignIn.ts
apps/dashboard/src/pages/SignInWithEmail/index.tsx
apps/dashboard/src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx
apps/dashboard/src/pages/SignInWithEmail/useSignInWithEmail.ts
apps/dashboard/src/pages/SignUp/index.tsx
apps/dashboard/src/pages/SignUp/SignUpPage.view.tsx
apps/dashboard/src/pages/SignUp/useSignUp.ts
apps/dashboard/src/pages/SignUpWithEmail/index.tsx
apps/dashboard/src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx
apps/dashboard/src/pages/SignUpWithEmail/useSignUpWithEmail.ts
apps/dashboard/src/pages/SSOCallback/index.tsx
apps/dashboard/src/pages/Unauthorized/index.tsx
apps/dashboard/src/schemas/user.schema.ts
apps/dashboard/src/services/apiClient.ts
apps/dashboard/src/services/userService.ts
apps/dashboard/src/store/useAiNoteModalStore.ts
apps/dashboard/src/store/useAuthStore.ts
apps/dashboard/src/store/useIncorrectAnswerNoteStore.ts
apps/dashboard/src/vite-env.d.ts
apps/dashboard/tailwind.config.js
apps/dashboard/tsconfig.app.json
apps/dashboard/tsconfig.json
apps/dashboard/tsconfig.node.json
apps/dashboard/vite.config.ts
apps/landing-page/.gitignore
apps/landing-page/eslint.config.js
apps/landing-page/index.html
apps/landing-page/package.json
apps/landing-page/public/vite.svg
apps/landing-page/README.md
apps/landing-page/src/App.tsx
apps/landing-page/src/assets/react.svg
apps/landing-page/src/components/Features/Features.view.tsx
apps/landing-page/src/components/Features/index.tsx
apps/landing-page/src/components/Features/useFeatures.ts
apps/landing-page/src/components/Header/Header.view.tsx
apps/landing-page/src/components/Header/index.tsx
apps/landing-page/src/components/Header/useHeader.ts
apps/landing-page/src/components/Hero/Hero.view.tsx
apps/landing-page/src/components/Hero/index.tsx
apps/landing-page/src/components/Hero/useHero.ts
apps/landing-page/src/index.css
apps/landing-page/src/main.tsx
apps/landing-page/src/pages/home/Home.view.tsx
apps/landing-page/src/pages/home/index.tsx
apps/landing-page/src/pages/home/useHome.ts
apps/landing-page/src/vite-env.d.ts
apps/landing-page/tailwind.config.js
apps/landing-page/tsconfig.app.json
apps/landing-page/tsconfig.json
apps/landing-page/tsconfig.node.json
apps/landing-page/vite.config.ts
CLAUDE.md
libs/api-types/package.json
libs/core-logic/package.json
libs/ui-components/package.json
libs/ui-components/postcss.config.js
libs/ui-components/src/components/Button/Button.view.tsx
libs/ui-components/src/components/Button/index.tsx
libs/ui-components/src/components/Button/useButton.ts
libs/ui-components/src/components/Card/Card.view.tsx
libs/ui-components/src/components/Card/index.tsx
libs/ui-components/src/components/Card/useCard.ts
libs/ui-components/src/components/Footer/Footer.view.tsx
libs/ui-components/src/components/Footer/index.tsx
libs/ui-components/src/components/Footer/useFooter.ts
libs/ui-components/src/components/index.ts
libs/ui-components/src/components/Input/index.tsx
libs/ui-components/src/components/Input/Input.view.tsx
libs/ui-components/src/components/Input/useInput.ts
libs/ui-components/src/components/sign-in-with-email-button/index.tsx
libs/ui-components/src/components/sign-in-with-google-button/index.tsx
libs/ui-components/src/components/sign-in-with-google-button/SignInWithGoogleButton.view.tsx
libs/ui-components/src/components/sign-in-with-google-button/useSignInWithGoogleButton.ts
libs/ui-components/src/components/Spinner/index.tsx
libs/ui-components/src/components/Spinner/Spinner.view.tsx
libs/ui-components/src/components/Spinner/useSpinner.ts
libs/ui-components/src/components/Typography/index.tsx
libs/ui-components/src/components/Typography/Typography.view.tsx
libs/ui-components/src/components/Typography/useTypography.ts
libs/ui-components/src/images.d.ts
libs/ui-components/src/index.css
libs/ui-components/tailwind.config.js
package.json
pnpm-workspace.yaml
rules/back/dto.md
rules/back/entity.md
rules/back/spring.md
rules/front/design-guide.md
rules/front/folder.md
rules/front/libary.md
rules/front/react.md
rules/global/architecture.md
rules/global/clean-code.md
rules/global/git.md
rules/global/prd.md
rules/global/step-by-step.md
vooster-docs/architecture.md
vooster-docs/clean-code.md
vooster-docs/guideline.md
vooster-docs/prd.md
vooster-docs/step-by-step.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="apps/dashboard/postcss.config.mjs">
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
</file>

<file path="apps/landing-page/src/components/Features/Features.view.tsx">
// components/Features/Features.view.tsx

import { ArrowUpRight } from 'lucide-react';

// FeaturesView 컴포넌트가 받을 props 타입 정의 (현재는 비어있음)
interface FeaturesViewProps {
  // 향후 인터랙션이 추가되면 이곳에 props를 정의합니다.
}

export function FeaturesView({}: FeaturesViewProps) {
  return (
    <section className="bg-white py-20 sm:py-28">
      <div className="container mx-auto max-w-7xl px-6">
        <div className="grid grid-cols-1 items-center gap-x-16 gap-y-12 lg:grid-cols-2">
          
          {/* Left Column: Text Content */}
          <div className="max-w-lg">
            <h2 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
              Let banking power your financial operations
            </h2>
            <p className="mt-6 text-lg leading-8 text-gray-600">
              Banking should do more for your business. Now, it can.
            </p>
            <a
              href="/demo"
              className="mt-8 inline-flex items-center gap-x-2 rounded-md border border-gray-300
                         bg-white px-5 py-3 text-sm font-semibold text-gray-700 shadow-sm
                         transition-colors hover:bg-gray-50 focus:outline-none focus:ring-2
                         focus:ring-indigo-500 focus:ring-offset-2"
            >
              Explore Demo
              <ArrowUpRight className="h-4 w-4" />
            </a>
          </div>

          {/* Right Column: Diagram Image */}
          <div className="flex items-center justify-center">
            {/* 이 다이어그램은 CSS로 구현하기 매우 복잡하므로,
              SVG나 PNG 이미지 파일로 처리하는 것이 가장 효율적입니다.
              실제 이미지 경로로 교체해주세요.
            */}
            <img
              src="https://i.imgur.com/gK9JgCg.png" // Placeholder image URL
              alt="A diagram showing interconnected financial services like Banking, Treasury, Cards, and Invoicing."
              className="w-full max-w-2xl"
            />
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="apps/landing-page/src/components/Features/index.tsx">
import { useFeatures } from './useFeatures';
import { FeaturesView } from './Features.view';

export function Features() {
  const {} = useFeatures();
  return <FeaturesView />;
}
</file>

<file path="apps/landing-page/src/components/Features/useFeatures.ts">
export function useFeatures() {

  return {
  };
}
</file>

<file path="apps/landing-page/src/components/Header/Header.view.tsx">
// components/Header/Header.view.tsx

import { ChevronDown } from 'lucide-react';

// 로고 SVG 컴포넌트 (실제 SVG 코드로 교체하세요)
function MercuryLogo() {
  return (
    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M16 0L25.9282 6.52786V19.4721L16 26L6.0718 19.4721V6.52786L16 0Z" stroke="currentColor" strokeWidth="2"/>
      <path d="M16 32L25.9282 25.4721V12.5279L16 6L6.0718 12.5279V25.4721L16 32Z" stroke="currentColor" strokeWidth="2"/>
      <circle cx="16" cy="16" r="3" stroke="currentColor" strokeWidth="2"/>
    </svg>
  );
}


// NavLink 타입 정의
interface NavLink {
  href: string;
  label: string;
  hasDropdown?: boolean;
}

// HeaderView 컴포넌트가 받을 props 타입 정의
interface HeaderViewProps {
  navLinks: NavLink[];
}

export function HeaderView({ navLinks }: HeaderViewProps) {
  return (
    <header className="w-full bg-[#F9F8F6] font-sans">
      <div className="container mx-auto flex h-20 max-w-7xl items-center justify-between px-6">
        {/* Left Section: Logo */}
        <div className="flex items-center space-x-3">
          <MercuryLogo />
          <span className="text-xl font-semibold tracking-wider text-gray-800">MERCURY</span>
        </div>

        {/* Center Section: Navigation */}
        <nav className="hidden md:flex">
          <ul className="flex items-center space-x-8">
            {navLinks.map((link) => (
              <li key={link.label}>
                <a
                  href={link.href}
                  className="flex items-center text-gray-700 transition-colors duration-200 hover:text-gray-900"
                >
                  {link.label}
                  {link.hasDropdown && <ChevronDown className="ml-1 h-4 w-4" />}
                </a>
              </li>
            ))}
          </ul>
        </nav>

        {/* Right Section: Actions */}
        <div className="flex items-center space-x-6">
          <a href="/login" className="text-gray-700 transition-colors duration-200 hover:text-gray-900">
            Log in
          </a>
          <button
            className="rounded-lg bg-[#6A59FF] px-5 py-2.5 text-sm font-medium text-white shadow-sm
                       transition-all duration-200 hover:bg-[#5848d8] focus:outline-none
                       focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Open Account
          </button>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="apps/landing-page/src/components/Header/index.tsx">
import { HeaderView } from './Header.view';
import { useHeader } from './useHeader';

export function Header() {
  const { navLinks } = useHeader();

  return <HeaderView navLinks={navLinks} />;
}
</file>

<file path="apps/landing-page/src/components/Header/useHeader.ts">
const NAV_LINKS = [
  { href: '/products', label: 'Products', hasDropdown: true },
  { href: '/solutions', label: 'Solutions', hasDropdown: true },
  { href: '/resources', label: 'Resources', hasDropdown: true },
  { href: '/about', label: 'About', hasDropdown: true },
  { href: '/pricing', label: 'Pricing' },
];

export function useHeader() {
  const navLinks = NAV_LINKS;

  return {
    navLinks,
  };
}
</file>

<file path="apps/landing-page/src/components/Hero/Hero.view.tsx">
// components/Hero/Hero.view.tsx

import React from 'react';

// HeroView가 받을 props 타입 정의
interface HeroViewProps {
  email: string;
  onEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
}

export function HeroView({ email, onEmailChange, onSubmit }: HeroViewProps) {
  return (
    <section className="bg-[#FBFBFA] py-20 sm:py-28">
      <div className="container mx-auto max-w-4xl px-6 text-center">
        
        {/* Main Headline */}
        <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">
          Powerful banking.
          <br />
          Simplified finances.
        </h1>

        {/* Sub-headline */}
        <p className="mx-auto mt-6 max-w-2xl text-lg leading-8 text-gray-600">
          Apply in 10 minutes for online business banking¹ that transforms how you operate.
        </p>

        {/* Call-to-Action Form */}
        <form
          onSubmit={onSubmit}
          className="mt-10 flex flex-col items-center justify-center gap-4 sm:flex-row"
        >
          <input
            type="email"
            value={email}
            onChange={onEmailChange}
            placeholder="Enter your email"
            required
            className="w-full rounded-md border-gray-300 px-4 py-2.5 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:w-auto sm:min-w-[280px]"
          />
          <button
            type="submit"
            className="w-full whitespace-nowrap rounded-md bg-[#6A59FF] px-6 py-3 text-sm font-semibold text-white shadow-sm transition-colors hover:bg-[#5848d8] focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
          >
            Open Account
          </button>
          <button
            type="button"
            className="w-full whitespace-nowrap rounded-md border border-gray-300 bg-white px-6 py-3 text-sm font-semibold text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto"
          >
            Explore Demo
          </button>
        </form>

      </div>

      {/* Product Dashboard Image */}
      <div className="container mx-auto mt-16 max-w-6xl px-6 sm:mt-24">
        {/* 실제 이미지 경로로 교체해주세요. 
          next/image 또는 <img> 태그를 사용할 수 있습니다.
        */}
        <img
          src="https://i.imgur.com/2A5IKbN.png" // Placeholder image URL, replace with your actual image path
          alt="Product dashboard preview"
          className="rounded-xl shadow-2xl ring-1 ring-gray-900/10"
        />
      </div>
    </section>
  );
}
</file>

<file path="apps/landing-page/src/components/Hero/index.tsx">
import { useHero } from './useHero';
import { HeroView } from './Hero.view';

export function Hero() {
  // 훅을 호출하여 필요한 상태와 로직을 가져옵니다.
  const { email, handleEmailChange, handleSubmit } = useHero();

  // View 컴포넌트에 props로 전달하여 최종 UI를 렌더링합니다.
  return (
    <HeroView
      email={email}
      onEmailChange={handleEmailChange}
      onSubmit={handleSubmit}
    />
  );
}
</file>

<file path="apps/landing-page/src/components/Hero/useHero.ts">
import React, { useState } from 'react';

export function useHero() {
  // 이메일 입력 값을 위한 상태
  const [email, setEmail] = useState('');

  // 이메일 input의 변경 이벤트를 처리하는 핸들러
  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
  };

  // 폼 제출 이벤트를 처리하는 핸들러
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault(); // 페이지 리로드 방지
    
    // 실제 애플리케이션에서는 여기서 API 호출 등을 수행합니다.
    if (email) {
      alert(`Email submitted: ${email}`);
      setEmail(''); // 제출 후 입력 필드 초기화
    } else {
      alert('Please enter your email.');
    }
  };

  // View 컴포넌트에서 사용할 상태와 핸들러들을 반환
  return {
    email,
    handleEmailChange,
    handleSubmit,
  };
}
</file>

<file path="apps/landing-page/src/pages/home/Home.view.tsx">
import { Header } from '../../components/Header';

export function HomeView() {
  return (
    <div className="min-h-screen bg-white">
      <Header />
      <main className="container mx-auto max-w-7xl px-6 py-12">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-6">
            Welcome to AlgoRevise
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            AI-powered algorithm problem management platform that analyzes your solutions,
            visualizes solution flow, and provides personalized test problems.
          </p>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="apps/landing-page/src/pages/home/index.tsx">
import { HomeView } from './Home.view';
import { useHome } from './useHome';

export function Home() {
  const homeData = useHome();

  return <HomeView />;
}
</file>

<file path="apps/landing-page/src/pages/home/useHome.ts">
export function useHome() {
  return {};
}
</file>

<file path="apps/landing-page/tailwind.config.js">
// /** @type {import('tailwindcss').Config} */
// export default {
//   content: [
//     "./src/**/*.{js,jsx,ts,tsx}",
//     '../../libs/ui-components/src/**/*.{js,jsx,ts,tsx}',
//   ],
//   theme: {
//     extend: {
//       colors: {
//         brand: {
//           DEFAULT: "#5E6AD2",
//           light: "#7B83EB",
//           dark: "#4C5AA8"
//         },
//         neutral: {
//           black: "#0D0E10",
//           900: "#16181D",
//           800: "#1C1F26",
//           700: "#22252C",
//           600: "#2A2D34",
//           500: "#35393F",
//           400: "#4E5158",
//           300: "#6B7280",
//           100: "#D1D5DB",
//           50: "#F3F4F6",
//           white: "#FFFFFF"
//         },
//         semantic: {
//           success: "#10B981",
//           warning: "#F59E0B",
//           error: "#EF4444",
//           info: "#3B82F6"
//         },
//         background: {
//           primary: "#FAFBFC",
//           secondary: "#FFFFFF",
//           tertiary: "#F8F9FA"
//         },
//         text: {
//           primary: "#0D0E10",
//           secondary: "#6B7280",
//           tertiary: "#9CA3AF",
//           inverse: "#FFFFFF"
//         }
//       },
//       fontFamily: {
//         sans: ["Inter", "-apple-system", "BlinkMacSystemFont", "'Segoe UI'", "Roboto", "sans-serif"],
//         mono: ["'SF Mono'", "Monaco", "'Cascadia Code'", "'Roboto Mono'", "Consolas", "'Courier New'", "monospace"]
//       },
//       fontSize: {
//         xs: "12px",
//         sm: "14px",
//         base: "16px",
//         lg: "18px",
//         xl: "20px",
//         "2xl": "24px",
//         "3xl": "30px",
//         "4xl": "36px",
//         "5xl": "48px",
//         "6xl": "64px"
//       },
//       fontWeight: {
//         light: "300",
//         normal: "400",
//         medium: "500",
//         semibold: "600",
//         bold: "700"
//       },
//       lineHeight: {
//         tight: "1.25",
//         snug: "1.375",
//         normal: "1.5",
//         relaxed: "1.625",
//         loose: "2"
//       },
//       spacing: {
//         "1": "4px",
//         "2": "8px",
//         "3": "12px",
//         "4": "16px",
//         "5": "20px",
//         "6": "24px",
//         "8": "32px",
//         "10": "40px",
//         "12": "48px",
//         "16": "64px",
//         "20": "80px",
//         "24": "96px",
//         "32": "128px"
//       },
//       borderRadius: {
//         sm: "2px",
//         DEFAULT: "6px",
//         md: "8px",
//         lg: "12px",
//         xl: "16px"
//       },
//       boxShadow: {
//         xs: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
//         sm: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)",
//         md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)",
//         lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
//         xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)",
//         "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
//       }
//     },
//   },
//   plugins: [],
// }
</file>

<file path="libs/ui-components/src/index.css">
@import "tailwindcss";
</file>

<file path=".vooster/project.json">
{
  "uid": "HK6O",
  "name": "알고리바",
  "description": "AI 기반 알고리즘 오답 관리 플랫폼으로, 사용자의 풀이 흐름을 자동 분석하고 맞춤형 테스트 문제를 제공하여 코딩 테스트 합격률을 높입니다.",
  "connectedAt": "2025-09-13T01:31:31.095Z"
}
</file>

<file path="apps/backend/.gitattributes">
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary
</file>

<file path="apps/backend/.gitignore">
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/
</file>

<file path="apps/backend/gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="apps/backend/gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/AlgorithmNoteV2Application.java">
package algorithm_note.algorithm_note_v2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AlgorithmNoteV2Application {

	public static void main(String[] args) {
		SpringApplication.run(AlgorithmNoteV2Application.class, args);
	}

}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/ClerkJwtProperties.java">
package algorithm_note.algorithm_note_v2.global.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

/**
 * Configuration properties for Clerk JWT verification.
 */
@Component
@ConfigurationProperties(prefix = "clerk.jwt")
@Getter
@Setter
public class ClerkJwtProperties {

    /**
     * Clerk instance domain for JWKS URL construction.
     */
    private String instanceDomain;

    /**
     * Expected issuer of JWT tokens.
     */
    private String issuer;

    /**
     * Expected audience of JWT tokens.
     */
    private String audience;

    /**
     * JWKS cache expiration time in seconds.
     */
    private long jwksCacheExpirationSeconds = 3600;

    /**
     * Constructs the JWKS URL from the instance domain.
     *
     * @return The JWKS endpoint URL
     */
    public String getJwksUrl() {
        if (instanceDomain == null || instanceDomain.trim().isEmpty()) {
            throw new IllegalStateException("Clerk instance domain is not configured");
        }
        return String.format("https://%s/.well-known/jwks.json", instanceDomain.trim());
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/NgrokComponent.java">
package algorithm_note.algorithm_note_v2.global.config;

import com.github.alexdlaird.ngrok.NgrokClient;
import com.github.alexdlaird.ngrok.protocol.CreateTunnel;
import com.github.alexdlaird.ngrok.protocol.Tunnel;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class NgrokComponent {

  @Value("${server.port}")
  private int serverPort;

  private NgrokClient ngrokClient;

  @PostConstruct
  public void startNgrok() {
    log.info("Starting ngrok tunnel for port {}...", serverPort);
    ngrokClient = new NgrokClient.Builder().build();

    // CreateTunnel 빌더를 사용해 포트를 명시적으로 지정하는 것이 더 안전합니다.
    final CreateTunnel createTunnel = new CreateTunnel.Builder()
        .withAddr(serverPort)
        .build();

    final Tunnel tunnel = ngrokClient.connect(createTunnel);
    String publicUrl = tunnel.getPublicUrl();

    log.info("****************************************************************");
    log.info("  ngrok tunnel started successfully!");
    log.info("  Public URL: {}", publicUrl);
    log.info("  Copy this URL to your Clerk Webhook endpoint configuration.");
    log.info("****************************************************************");
  }

  @PreDestroy
  public void stopNgrok() {
    if (ngrokClient != null) {
      ngrokClient.kill();
      log.info("ngrok client closed.");
    }
  }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/WebClientConfig.java">
package algorithm_note.algorithm_note_v2.global.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

/**
 * Configuration for WebClient used in JWT verification service.
 */
@Configuration
public class WebClientConfig {

    @Bean
    public WebClient webClient() {
        return WebClient.builder()
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(1024 * 1024)) // 1MB
                .build();
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/WebhookProperties.java">
package algorithm_note.algorithm_note_v2.global.config;

import lombok.Getter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

/**
 * Configuration properties for Clerk webhook processing.
 */
@Component
@ConfigurationProperties(prefix = "clerk.webhook")
@Getter
public class WebhookProperties {

    private String secret;

    private String apiUrl = "https://api.clerk.dev/v1";

    private String apiSecret;

    private long maxTimestampDiff = 300;

    public void setSecret(String secret) {
        this.secret = secret;
    }

    public void setApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
    }

    public void setApiSecret(String apiSecret) {
        this.apiSecret = apiSecret;
    }

    public void setMaxTimestampDiff(long maxTimestampDiff) {
        this.maxTimestampDiff = maxTimestampDiff;
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/controller/TestController.java">
package algorithm_note.algorithm_note_v2.global.controller;

import algorithm_note.algorithm_note_v2.user.domain.User;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * Test controller to verify JWT authentication and User entity integration.
 */
@RestController
@RequestMapping("/api/test")
public class TestController {

    /**
     * Test endpoint to verify authenticated user access.
     *
     * @param user The authenticated User entity from JWT
     * @return User information and authentication status
     */
    @GetMapping("/user")
    public ResponseEntity<Map<String, Object>> getAuthenticatedUser(@AuthenticationPrincipal User user) {
        if (user == null) {
            return ResponseEntity.ok(Map.of(
                    "authenticated", false,
                    "message", "No user found in security context"
            ));
        }

        return ResponseEntity.ok(Map.of(
                "authenticated", true,
                "user", Map.of(
                        "id", user.getId(),
                        "clerkId", user.getClerkId(),
                        "email", user.getEmail(),
                        "firstName", user.getFirstName(),
                        "lastName", user.getLastName(),
                        "createdAt", user.getCreatedAt(),
                        "updatedAt", user.getUpdatedAt()
                )
        ));
    }

    /**
     * Simple health check endpoint for testing authentication flow.
     *
     * @return Health check response
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, String>> healthCheck() {
        return ResponseEntity.ok(Map.of(
                "status", "healthy",
                "message", "JWT authentication is working"
        ));
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkUserDto.java">
package algorithm_note.algorithm_note_v2.global.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * DTO representing Clerk user data in webhook events.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class ClerkUserDto {

    @JsonProperty("id")
    private String id;

    @JsonProperty("email_addresses")
    private EmailAddress[] emailAddresses;

    @JsonProperty("first_name")
    private String firstName;

    @JsonProperty("last_name")
    private String lastName;

    @JsonProperty("created_at")
    private Long createdAt;

    @JsonProperty("updated_at")
    private Long updatedAt;

    public static ClerkUserDto of(String id, EmailAddress[] emailAddresses, String firstName,
                                 String lastName, Long createdAt, Long updatedAt) {
        return new ClerkUserDto(id, emailAddresses, firstName, lastName, createdAt, updatedAt);
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    public static class EmailAddress {

        @JsonProperty("email_address")
        private String emailAddress;

        @JsonProperty("verification")
        private Verification verification;

        public static EmailAddress of(String emailAddress, Verification verification) {
            return new EmailAddress(emailAddress, verification);
        }
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Getter
    @AllArgsConstructor
    @NoArgsConstructor
    public static class Verification {

        @JsonProperty("status")
        private String status;

        public static Verification of(String status) {
            return new Verification(status);
        }
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkWebhookEventDto.java">
package algorithm_note.algorithm_note_v2.global.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * DTO representing incoming Clerk webhook events.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class ClerkWebhookEventDto {

    @JsonProperty("type")
    private String type;

    @JsonProperty("data")
    private ClerkUserDto data;

    @JsonProperty("object")
    private String object;

    public static ClerkWebhookEventDto of(String type, ClerkUserDto data, String object) {
        return new ClerkWebhookEventDto(type, data, object);
    }

    public boolean isUserCreatedEvent() {
        return "user.created".equals(type);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/dto/ClerkWebhookResponseDto.java">
package algorithm_note.algorithm_note_v2.global.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * DTO for webhook processing response.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class ClerkWebhookResponseDto {

    private String message;
    private String userId;
    private String assignedRole;
    private boolean success;

    public static ClerkWebhookResponseDto success(String message, String userId, String assignedRole) {
        return new ClerkWebhookResponseDto(message, userId, assignedRole, true);
    }

    public static ClerkWebhookResponseDto failure(String message) {
        return new ClerkWebhookResponseDto(message, null, null, false);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/JwtVerificationException.java">
package algorithm_note.algorithm_note_v2.global.exception;

/**
 * Exception thrown when JWT token verification fails.
 */
public class JwtVerificationException extends RuntimeException {

    public JwtVerificationException(String message) {
        super(message);
    }

    public JwtVerificationException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/UserProcessingException.java">
package algorithm_note.algorithm_note_v2.global.exception;

public class UserProcessingException extends RuntimeException {

    public UserProcessingException(String message) {
        super(message);
    }

    public UserProcessingException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/filter/ClerkJwtAuthenticationFilter.java">
package algorithm_note.algorithm_note_v2.global.filter;

import algorithm_note.algorithm_note_v2.global.exception.JwtVerificationException;
import algorithm_note.algorithm_note_v2.global.service.JwtVerificationService;
import algorithm_note.algorithm_note_v2.user.domain.User;
import algorithm_note.algorithm_note_v2.user.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

/**
 * Custom filter for Clerk JWT authentication.
 * Verifies JWT tokens and sets User entity as the authenticated principal.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ClerkJwtAuthenticationFilter extends OncePerRequestFilter {

    private static final String AUTHORIZATION_HEADER = "Authorization";
    private static final String BEARER_PREFIX = "Bearer ";

    private final JwtVerificationService jwtVerificationService;
    private final UserService userService;
    private final ObjectMapper objectMapper;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        try {
            String token = extractTokenFromRequest(request);
            if (token != null) {
                authenticateRequest(token);
            }
        } catch (Exception e) {
            log.warn("JWT authentication failed: {}", e.getMessage());
            handleAuthenticationFailure(response, e.getMessage());
            return;
        }

        filterChain.doFilter(request, response);
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        String path = request.getRequestURI();
        return path.startsWith("/webhooks/") ||
               path.startsWith("/public/") ||
               path.startsWith("/actuator/");
    }

    private String extractTokenFromRequest(HttpServletRequest request) {
        String authHeader = request.getHeader(AUTHORIZATION_HEADER);
        if (authHeader != null && authHeader.startsWith(BEARER_PREFIX)) {
            return authHeader.substring(BEARER_PREFIX.length()).trim();
        }
        return null;
    }

    private void authenticateRequest(String token) {
        Map<String, Object> jwtClaims = jwtVerificationService.verifyToken(token);
        User user = userService.findOrCreateUser(jwtClaims);

        UsernamePasswordAuthenticationToken authentication =
                new UsernamePasswordAuthenticationToken(user, null, Collections.emptyList());

        SecurityContextHolder.getContext().setAuthentication(authentication);
        log.debug("Successfully authenticated user with Clerk ID: {}", user.getClerkId());
    }

    private void handleAuthenticationFailure(HttpServletResponse response, String message)
            throws IOException {
        response.setStatus(HttpStatus.UNAUTHORIZED.value());
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);

        Map<String, Object> errorResponse = Map.of(
                "error", "Authentication failed",
                "message", message,
                "status", HttpStatus.UNAUTHORIZED.value()
        );

        response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/ClerkWebhookVerificationService.java">
package algorithm_note.algorithm_note_v2.global.service;

import algorithm_note.algorithm_note_v2.global.config.WebhookProperties;
import com.svix.Webhook;
import com.svix.exceptions.WebhookVerificationException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.net.http.HttpHeaders;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class ClerkWebhookVerificationService {

  private final WebhookProperties webhookProperties;

  public void verify(String payload, Map<String, String> headers) throws WebhookVerificationException {
    String rawSecret = webhookProperties.getSecret();
    String cleanedSecret = rawSecret.startsWith("whsec_")
        ? rawSecret.substring("whsec_".length())
        : rawSecret;

    Webhook webhook = new Webhook(cleanedSecret);
    Map<String, List<String>> headerMap = new HashMap<>();
    headers.forEach((key, value) ->
        headerMap.put(key, Collections.singletonList(value))
    );

    HttpHeaders httpHeaders = HttpHeaders.of(headerMap, (k, v) -> true);
    webhook.verify(payload, httpHeaders);
  }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/JwtVerificationService.java">
package algorithm_note.algorithm_note_v2.global.service;

import algorithm_note.algorithm_note_v2.global.config.ClerkJwtProperties;
import algorithm_note.algorithm_note_v2.global.exception.JwtVerificationException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.time.Duration;
import java.time.Instant;
import java.util.Base64;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Service for verifying Clerk JWT tokens using JWKS.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class JwtVerificationService {

    private final ClerkJwtProperties clerkJwtProperties;
    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    private final Map<String, PublicKey> keyCache = new ConcurrentHashMap<>();
    private volatile Instant lastKeyRefresh = Instant.MIN;

    /**
     * Verifies a JWT token and extracts claims.
     *
     * @param token The JWT token to verify
     * @return Map of claims if verification succeeds
     * @throws JwtVerificationException if verification fails
     */
    public Map<String, Object> verifyToken(String token) {
        try {
            String[] parts = token.split("\\.");
            if (parts.length != 3) {
                throw new JwtVerificationException("Invalid JWT format");
            }

            // token을 검증하려면 공개키를 이용해서 유효한 것인지를 판단해야하는 것 아닌가?
            Map<String, Object> header = parseJwtPart(parts[0]);
            Map<String, Object> payload = parseJwtPart(parts[1]);

            String keyId = (String) header.get("kid");
            if (keyId == null) {
                throw new JwtVerificationException("Missing key ID in JWT header");
            }

            PublicKey publicKey = getPublicKey(keyId);
            if (!verifySignature(token, publicKey)) {
                throw new JwtVerificationException("Invalid JWT signature");
            }

            validateTokenClaims(payload);
            return payload;

        } catch (Exception e) {
            if (e instanceof JwtVerificationException) {
                throw e;
            }
            throw new JwtVerificationException("JWT verification failed", e);
        }
    }

    private Map<String, Object> parseJwtPart(String part) {
        try {
            byte[] decoded = Base64.getUrlDecoder().decode(part);
            return objectMapper.readValue(decoded, Map.class);
        } catch (Exception e) {
            throw new JwtVerificationException("Failed to parse JWT part", e);
        }
    }

    private PublicKey getPublicKey(String keyId) {
        if (shouldRefreshKeys()) {
            refreshKeys();
        }

        PublicKey publicKey = keyCache.get(keyId);
        if (publicKey == null) {
            refreshKeys();
            publicKey = keyCache.get(keyId);
            if (publicKey == null) {
                throw new JwtVerificationException("Public key not found for key ID: " + keyId);
            }
        }

        return publicKey;
    }

    private boolean shouldRefreshKeys() {
        return Duration.between(lastKeyRefresh, Instant.now()).getSeconds()
               > clerkJwtProperties.getJwksCacheExpirationSeconds();
    }

    private void refreshKeys() {
        try {
            String jwksResponse = webClient.get()
                    .uri(clerkJwtProperties.getJwksUrl())
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            JsonNode jwks = objectMapper.readTree(jwksResponse);
            JsonNode keys = jwks.get("keys");

            keyCache.clear();

            for (JsonNode key : keys) {
                String keyId = key.get("kid").asText();
                String modulus = key.get("n").asText();
                String exponent = key.get("e").asText();

                PublicKey publicKey = createRSAPublicKey(modulus, exponent);
                keyCache.put(keyId, publicKey);
            }

            lastKeyRefresh = Instant.now();
            log.info("Refreshed {} JWT keys from JWKS", keyCache.size());

        } catch (Exception e) {
            throw new JwtVerificationException("Failed to refresh JWKS", e);
        }
    }

    private PublicKey createRSAPublicKey(String modulusBase64, String exponentBase64) {
        try {
            byte[] modulusBytes = Base64.getUrlDecoder().decode(modulusBase64);
            byte[] exponentBytes = Base64.getUrlDecoder().decode(exponentBase64);

            BigInteger modulus = new BigInteger(1, modulusBytes);
            BigInteger exponent = new BigInteger(1, exponentBytes);

            RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, exponent);
            KeyFactory factory = KeyFactory.getInstance("RSA");
            return factory.generatePublic(spec);

        } catch (Exception e) {
            throw new JwtVerificationException("Failed to create RSA public key", e);
        }
    }

    private boolean verifySignature(String token, PublicKey publicKey) {
        try {
            String[] parts = token.split("\\.");
            String signedData = parts[0] + "." + parts[1];
            byte[] signature = Base64.getUrlDecoder().decode(parts[2]);

            java.security.Signature sig = java.security.Signature.getInstance("SHA256withRSA");
            sig.initVerify(publicKey);
            sig.update(signedData.getBytes());

            return sig.verify(signature);

        } catch (Exception e) {
            log.error("Error verifying signature", e);
            return false;
        }
    }

    private void validateTokenClaims(Map<String, Object> payload) {
        Object exp = payload.get("exp");
        if (exp instanceof Number) {
            long expiration = ((Number) exp).longValue();
            if (Instant.now().getEpochSecond() >= expiration) {
                throw new JwtVerificationException("JWT token has expired");
            }
        }

        String issuer = (String) payload.get("iss");
        if (clerkJwtProperties.getIssuer() != null && !clerkJwtProperties.getIssuer().equals(issuer)) {
            throw new JwtVerificationException("Invalid issuer: " + issuer);
        }

        String audience = (String) payload.get("aud");
        if (clerkJwtProperties.getAudience() != null && !clerkJwtProperties.getAudience().equals(audience)) {
            throw new JwtVerificationException("Invalid audience: " + audience);
        }
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/controller/UserController.java">
package algorithm_note.algorithm_note_v2.user.controller;

import algorithm_note.algorithm_note_v2.user.domain.User;
import algorithm_note.algorithm_note_v2.user.dto.UserRegisterRequestDto;
import algorithm_note.algorithm_note_v2.user.dto.UserResponseDto;
import algorithm_note.algorithm_note_v2.user.dto.UserUpdateRequestDto;
import algorithm_note.algorithm_note_v2.user.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    /**
     * Manually registers a new user (for admin/test purposes).
     * Note: Normal user registration is handled automatically via Clerk webhook at /webhooks/clerk
     *
     * @param requestDto The user registration request data
     * @return ResponseEntity with user creation result
     */
    @PostMapping("/register")
    public ResponseEntity<UserResponseDto> registerUser(@RequestBody UserRegisterRequestDto requestDto) {
        log.info("Manually registering new user with Clerk ID: {}", requestDto.getClerkId());

        User createdUser = userService.registerUser(requestDto);
        UserResponseDto response = UserResponseDto.success(createdUser, "User registered successfully");

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PutMapping("/{clerkUserId}")
    public ResponseEntity<UserResponseDto> updateUser(
            @PathVariable String clerkUserId,
            @RequestBody UserUpdateRequestDto requestDto) {

        log.info("Updating user with Clerk ID: {}", clerkUserId);

        User updatedUser = userService.updateUser(clerkUserId, requestDto);
        UserResponseDto response = UserResponseDto.success(updatedUser, "User updated successfully");

        return ResponseEntity.ok(response);
    }

    @GetMapping("/{clerkUserId}")
    public ResponseEntity<UserResponseDto> getUser(@PathVariable String clerkUserId) {
        log.info("Retrieving user with Clerk ID: {}", clerkUserId);

        User user = userService.getUserByClerkId(clerkUserId);
        UserResponseDto response = UserResponseDto.success(user, "User retrieved successfully");

        return ResponseEntity.ok(response);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/domain/User.java">
package algorithm_note.algorithm_note_v2.user.domain;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

/**
 * User entity representing application users linked to Clerk authentication.
 */
@Entity
@Table(name = "users")
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false, name = "clerk_id")
    private String clerkId;

    @Column(nullable = false)
    private String email;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        LocalDateTime now = LocalDateTime.now();
        this.createdAt = now;
        this.updatedAt = now;
    }

    @PreUpdate
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }

    /**
     * Updates user information from JWT claims.
     *
     * @param email User's email address
     * @param firstName User's first name
     * @param lastName User's last name
     * @return Updated User entity for method chaining
     */
    public User updateFromJwtClaims(String email, String firstName, String lastName) {
        return User.builder()
                .id(this.id)
                .clerkId(this.clerkId)
                .email(email != null ? email : this.email)
                .firstName(firstName != null ? firstName : this.firstName)
                .lastName(lastName != null ? lastName : this.lastName)
                .createdAt(this.createdAt)
                .updatedAt(LocalDateTime.now())
                .build();
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserRegisterRequestDto.java">
package algorithm_note.algorithm_note_v2.user.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UserRegisterRequestDto {
    private String clerkId;
    private String email;
    private String firstName;
    private String lastName;

    public static UserRegisterRequestDto of(String clerkId, String email, String firstName, String lastName) {
        return new UserRegisterRequestDto(clerkId, email, firstName, lastName);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserResponseDto.java">
package algorithm_note.algorithm_note_v2.user.dto;

import algorithm_note.algorithm_note_v2.user.domain.User;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * DTO for user response.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UserResponseDto {
    private Long id;
    private String clerkId;
    private String email;
    private String firstName;
    private String lastName;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private boolean success;
    private String message;

    /**
     * Creates a success response DTO from User entity.
     * @param user The User entity
     * @param message The success message
     * @return A DTO representing a success state
     */
    public static UserResponseDto success(User user, String message) {
        return new UserResponseDto(
                user.getId(),
                user.getClerkId(),
                user.getEmail(),
                user.getFirstName(),
                user.getLastName(),
                user.getCreatedAt(),
                user.getUpdatedAt(),
                true,
                message
        );
    }

    /**
     * Creates a success response DTO from User entity with default message.
     * @param user The User entity
     * @return A DTO representing a success state
     */
    public static UserResponseDto success(User user) {
        return success(user, "User operation completed successfully");
    }

    /**
     * Creates a failure response DTO.
     * @param message The failure message
     * @return A DTO representing a failure state
     */
    public static UserResponseDto failure(String message) {
        return new UserResponseDto(null, null, null, null, null, null, null, false, message);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/dto/UserUpdateRequestDto.java">
package algorithm_note.algorithm_note_v2.user.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * DTO for user update request.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class UserUpdateRequestDto {
    private String email;
    private String firstName;
    private String lastName;

    /**
     * Creates a user update request DTO.
     * @param email The user's email address
     * @param firstName The user's first name
     * @param lastName The user's last name
     * @return A DTO for user update
     */
    public static UserUpdateRequestDto of(String email, String firstName, String lastName) {
        return new UserUpdateRequestDto(email, firstName, lastName);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/exception/UserNotFoundException.java">
package algorithm_note.algorithm_note_v2.user.exception;

/**
 * Exception thrown when a user is not found.
 */
public class UserNotFoundException extends RuntimeException {

    public UserNotFoundException(String message) {
        super(message);
    }

    public UserNotFoundException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/repository/UserRepository.java">
package algorithm_note.algorithm_note_v2.user.repository;

import algorithm_note.algorithm_note_v2.user.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * Repository for User entity operations.
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    /**
     * Finds a user by their Clerk ID.
     *
     * @param clerkId The unique Clerk identifier
     * @return Optional containing the user if found
     */
    Optional<User> findByClerkId(String clerkId);

    /**
     * Checks if a user exists with the given Clerk ID.
     *
     * @param clerkId The unique Clerk identifier
     * @return true if user exists, false otherwise
     */
    boolean existsByClerkId(String clerkId);
}
</file>

<file path="apps/backend/src/test/java/algorithm_note/algorithm_note_v2/AlgorithmNoteV2ApplicationTests.java">
package algorithm_note.algorithm_note_v2;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AlgorithmNoteV2ApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="apps/dashboard/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="apps/dashboard/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="apps/dashboard/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <link href="/dist/styles.css" rel="stylesheet">
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/dashboard/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="apps/dashboard/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="apps/dashboard/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.tsx
src/assets/react.svg
src/components/AiNoteModal/AiNoteModal.view.tsx
src/components/AiNoteModal/index.tsx
src/components/AiNoteModal/useAiNoteModal.ts
src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx
src/components/AiNoteModal/views/ChoiceView/index.tsx
src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts
src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx
src/components/AiNoteModal/views/CodeInputView/index.tsx
src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts
src/components/AiNoteModal/views/ManualInputView/index.tsx
src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx
src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts
src/components/AiNoteModal/views/ResultsView/index.tsx
src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx
src/components/AiNoteModal/views/ResultsView/useResultsView.ts
src/components/AiNoteModal/views/UrlInputView/index.tsx
src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx
src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts
src/components/AuthProvider/AuthProvider.view.tsx
src/components/AuthProvider/index.tsx
src/components/AuthProvider/useAuthProvider.ts
src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx
src/components/IncorrectAnswerNoteModal/index.tsx
src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts
src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx
src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx
src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx
src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx
src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx
src/components/ProtectedRoute/index.tsx
src/components/ProtectedRoute/ProtectedRoute.view.tsx
src/components/ProtectedRoute/useProtectedRoute.ts
src/hooks/useApiClient.ts
src/hooks/useUserProfile.ts
src/index.css
src/main.tsx
src/pages/Components/Components.view.tsx
src/pages/Components/index.tsx
src/pages/Components/useComponents.ts
src/pages/Dashboard/index.tsx
src/pages/SetupAccount/index.tsx
src/pages/SetupAccount/SetupAccount.view.tsx
src/pages/SetupAccount/useSetupAccount.ts
src/pages/SignIn/index.tsx
src/pages/SignIn/SignInPage.view.tsx
src/pages/SignIn/useSignIn.ts
src/pages/SignInWithEmail/index.tsx
src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx
src/pages/SignInWithEmail/useSignInWithEmail.ts
src/pages/SignUp/index.tsx
src/pages/SignUp/SignUpPage.view.tsx
src/pages/SignUp/useSignUp.ts
src/pages/SignUpWithEmail/index.tsx
src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx
src/pages/SignUpWithEmail/useSignUpWithEmail.ts
src/pages/SSOCallback/index.tsx
src/pages/Unauthorized/index.tsx
src/schemas/user.schema.ts
src/services/apiClient.ts
src/services/userService.ts
src/store/useAiNoteModalStore.ts
src/store/useAuthStore.ts
src/store/useIncorrectAnswerNoteStore.ts
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@ai-sdk/react": "^2.0.44",
    "@clerk/clerk-react": "^5.2.8",
    "@codemirror/lang-cpp": "^6.0.2",
    "@codemirror/lang-java": "^6.0.1",
    "@codemirror/lang-javascript": "^6.2.2",
    "@codemirror/lang-python": "^6.1.6",
    "@codemirror/view": "^6.34.2",
    "@tanstack/react-query": "^5.51.15",
    "@uiw/codemirror-theme-vscode": "^4.23.6",
    "@uiw/react-codemirror": "^4.23.6",
    "ai": "^5.0.44",
    "axios": "^1.7.2",
    "firebase": "^10.12.4",
    "framer-motion": "^11.3.19",
    "lucide-react": "^0.417.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.52.1",
    "react-router-dom": "^6.25.1",
    "reactflow": "^11.11.4",
    "recharts": "^2.12.7",
    "ui-components": "workspace:*",
    "zod": "^3.23.8",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="src/App.tsx">
import { Routes, Route } from "react-router-dom"
import { AuthProvider } from "./components/AuthProvider"
import { ProtectedRoute } from "./components/ProtectedRoute"
import { useApiClient } from "./hooks/useApiClient"
import SignInPage from "./pages/SignIn"
import SignInWithEmailPage from "./pages/SignInWithEmail"
import SignUpPage from "./pages/SignUp"
import SignUpWithEmailPage from "./pages/SignUpWithEmail"
import SSOCallbackPage from "./pages/SSOCallback"
import SetupAccountPage from "./pages/SetupAccount"
import DashboardPage from "./pages/Dashboard"
import UnauthorizedPage from "./pages/Unauthorized"
import { Components } from "./pages/Components"

function AppContent() {
  // Initialize API client with authentication
  useApiClient();

  return (
    <Routes>
        <Route path="/" element={<SignInPage />} />
        <Route path="/sign-in" element={<SignInPage />} />
        <Route path="/sign-in/email" element={<SignInWithEmailPage />} />
        <Route path="/sign-up" element={<SignUpPage />} />
        <Route path="/sign-up/email" element={<SignUpWithEmailPage />} />
        <Route path="/sso-callback" element={<SSOCallbackPage />} />
        <Route path="/setup-account" element={<SetupAccountPage />} />
        <Route path="/unauthorized" element={<UnauthorizedPage />} />

        <Route
          path="/dashboard"
          element={
            //<ProtectedRoute requiredRole="member">
              <DashboardPage />
            //</ProtectedRoute>
          }
        />

        <Route path="/components" element={<Components />} />
      </Routes>
  );
}

function App() {
  return (
      <AuthProvider>
        <AppContent />
      </AuthProvider>
  );
}

export default App
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/AiNoteModal/AiNoteModal.view.tsx">
import { AnimatePresence, motion } from 'framer-motion';
import { AlertTriangle, X } from 'lucide-react';
import { type ModalView } from '../../store/useAiNoteModalStore';

interface AiNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  viewSizes: { width: string; height: string };
  children: React.ReactNode;
  onOverlayClick: () => void;
  onConfirmExit: () => void;
  onCancelExit: () => void;
}

export function AiNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  viewSizes,
  children,
  onOverlayClick,
  onConfirmExit,
  onCancelExit,
}: AiNoteModalViewProps) {
  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className="fixed inset-0 z-50 flex items-center justify-center"
        >
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container with Dynamic Sizing */}
          <motion.div
            layout
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className={`
              relative z-10 w-full mx-4 bg-white rounded-lg shadow-2xl
              transition-all duration-300 ease-in-out
              ${viewSizes.width} ${viewSizes.height}
            `}
          >
            {children}

            {/* Exit Confirmation Dialog */}
            <AnimatePresence>
              {isExitConfirmationVisible && (
                <>
                  {/* Overlay for confirmation dialog */}
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="absolute inset-0 bg-black/50 rounded-lg flex items-center justify-center z-20"
                  />

                  {/* Confirmation Dialog */}
                  <motion.div
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0.9, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                    className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
                               bg-white rounded-lg p-6 shadow-xl z-30 max-w-sm w-full mx-4"
                  >
                    <div className="flex items-center space-x-3 mb-4">
                      <AlertTriangle className="h-6 w-6 text-amber-500" />
                      <h3 className="text-lg font-semibold text-gray-900">
                        Confirm Exit
                      </h3>
                    </div>

                    <p className="text-gray-600 mb-6">
                      Are you sure you want to exit? Any unsaved progress will be lost.
                    </p>

                    <div className="flex space-x-3">
                      <button
                        onClick={onCancelExit}
                        className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md
                                 hover:bg-gray-50 transition duration-200"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={onConfirmExit}
                        className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md
                                 hover:bg-red-700 transition duration-200"
                      >
                        Confirm
                      </button>
                    </div>
                  </motion.div>
                </>
              )}
            </AnimatePresence>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/AiNoteModal/index.tsx">
import { useAiNoteModal } from './useAiNoteModal';
import { AiNoteModalView } from './AiNoteModal.view';
import { ChoiceView } from './views/ChoiceView';
import { UrlInputView } from './views/UrlInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';

export function AiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  } = useAiNoteModal();

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView />;
      case 'URL_INPUT':
        return <UrlInputView />;
      case 'MANUAL_INPUT':
        return <ManualInputView />;
      case 'CODE_INPUT':
        return <CodeInputView />;
      case 'RESULTS':
        return <ResultsView />;
      default:
        return <ChoiceView />;
    }
  };

  return (
    <AiNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      viewSizes={viewSizes}
      onOverlayClick={handleOverlayClick}
      onConfirmExit={handleConfirmExit}
      onCancelExit={handleCancelExit}
    >
      {renderCurrentView()}
    </AiNoteModalView>
  );
}
</file>

<file path="src/components/AiNoteModal/useAiNoteModal.ts">
import { useEffect } from 'react';
import { useAiNoteModalStore, type ModalView } from '../../store/useAiNoteModalStore';

const VIEW_SIZES: Record<ModalView, { width: string; height: string }> = {
  CHOICE: { width: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { width: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { width: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { width: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { width: 'max-w-5xl', height: 'h-[700px]' }
};

export function useAiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
  } = useAiNoteModalStore();

  const viewSizes = VIEW_SIZES[currentView];

  const handleOverlayClick = () => {
    if (!isExitConfirmationVisible) {
      showExitConfirmation();
    }
  };

  const handleConfirmExit = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleCancelExit = () => {
    hideExitConfirmation();
  };

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isModalOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isModalOpen]);

  // Close on Escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isModalOpen && !isExitConfirmationVisible) {
        showExitConfirmation();
      }
    };

    if (isModalOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isModalOpen, isExitConfirmationVisible, showExitConfirmation]);

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx">
import { Link, Edit } from 'lucide-react';

interface ChoiceViewProps {
  onUrlChoice: () => void;
  onManualChoice: () => void;
}

export function ChoiceViewComponent({ onUrlChoice, onManualChoice }: ChoiceViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Select Problem Registration Method
        </h2>
        <p className="text-gray-600">
          Choose how you would like to register your algorithm problem
        </p>
      </div>

      {/* Choice Cards */}
      <div className="flex-1 flex flex-col space-y-4">
        {/* URL Registration Card */}
        <button
          onClick={onUrlChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500
                   hover:bg-blue-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition duration-200">
              <Link className="h-6 w-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Register by URL
              </h3>
              <p className="text-gray-600 mb-2">
                Register problem using Baekjoon URL link
              </p>
              <p className="text-sm text-blue-600 font-medium">
                Only Baekjoon Online Judge allowed
              </p>
            </div>
          </div>
        </button>

        {/* Manual Registration Card */}
        <button
          onClick={onManualChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-green-500
                   hover:bg-green-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition duration-200">
              <Edit className="h-6 w-6 text-green-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Manual Input
              </h3>
              <p className="text-gray-600">
                Manually input problem information
              </p>
            </div>
          </div>
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/index.tsx">
import { useChoiceView } from './useChoiceView';
import { ChoiceViewComponent } from './ChoiceView.view';

export function ChoiceView() {
  const { handleUrlChoice, handleManualChoice } = useChoiceView();

  return (
    <ChoiceViewComponent
      onUrlChoice={handleUrlChoice}
      onManualChoice={handleManualChoice}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useChoiceView() {
  const { setSubmissionType, setCurrentView } = useAiNoteModalStore();

  const handleUrlChoice = () => {
    setSubmissionType('url');
    setCurrentView('URL_INPUT');
  };

  const handleManualChoice = () => {
    setSubmissionType('manual');
    setCurrentView('MANUAL_INPUT');
  };

  return {
    handleUrlChoice,
    handleManualChoice,
  };
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx">
import { ArrowLeft, Loader2 } from 'lucide-react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { vscodeDark } from '@uiw/codemirror-theme-vscode';
import { EditorView } from '@codemirror/view';

interface LanguageOption {
  value: string;
  label: string;
  extension: string;
}

interface CodeInputViewProps {
  code: string;
  language: string;
  isLoading: boolean;
  error: string | null;
  languageOptions: LanguageOption[];
  onCodeChange: (code: string) => void;
  onLanguageChange: (language: string) => void;
  onAnalyze: () => void;
  onBack: () => void;
}

const getLanguageExtension = (language: string) => {
  switch (language) {
    case 'javascript':
      return javascript();
    case 'python':
      return python();
    case 'java':
      return java();
    case 'cpp':
    case 'c':
      return cpp();
    default:
      return javascript();
  }
};

export function CodeInputViewComponent({
  code,
  language,
  isLoading,
  error,
  languageOptions,
  onCodeChange,
  onLanguageChange,
  onAnalyze,
  onBack,
}: CodeInputViewProps) {
  const extensions = [
    getLanguageExtension(language),
    EditorView.theme({
      '&': {
        fontSize: '14px',
      },
      '.cm-focused': {
        outline: 'none',
      },
    }),
  ];

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Code Input
        </h2>
        <p className="text-gray-600">
          Please enter the code that solved the problem.
        </p>
      </div>

      {/* Language Selection */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Programming Language
        </label>
        <select
          value={language}
          onChange={(e) => onLanguageChange(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-md bg-white
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                   transition duration-200"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Solution Code
        </label>
        <div className={`
          border rounded-lg overflow-hidden
          ${error ? 'border-red-300' : 'border-gray-300'}
        `}>
          <CodeMirror
            value={code}
            onChange={onCodeChange}
            extensions={extensions}
            theme={vscodeDark}
            placeholder="Enter your solution code here..."
            className="h-80"
          />
        </div>

        {error && (
          <p className="mt-2 text-sm text-red-600">
            {error}
          </p>
        )}
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          disabled={isLoading}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200
                   disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onAnalyze}
          disabled={!code.trim() || isLoading}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>Analyzing...</span>
            </>
          ) : (
            <span>Analyze</span>
          )}
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/index.tsx">
import { useCodeInputView } from './useCodeInputView';
import { CodeInputViewComponent } from './CodeInputView.view';

export function CodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    languageOptions,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  } = useCodeInputView();

  return (
    <CodeInputViewComponent
      code={codeData.code}
      language={codeData.language}
      isLoading={isLoading}
      error={error}
      languageOptions={languageOptions}
      onCodeChange={handleCodeChange}
      onLanguageChange={handleLanguageChange}
      onAnalyze={handleAnalyze}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

const LANGUAGE_OPTIONS = [
  { value: 'javascript', label: 'JavaScript', extension: 'js' },
  { value: 'python', label: 'Python', extension: 'py' },
  { value: 'java', label: 'Java', extension: 'java' },
  { value: 'cpp', label: 'C++', extension: 'cpp' },
  { value: 'c', label: 'C', extension: 'c' },
];

export function useCodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    setCodeData,
    setCurrentView,
    startAnalysis,
  } = useAiNoteModalStore();

  const [validationError, setValidationError] = useState<string | null>(null);

  const handleCodeChange = (code: string) => {
    setCodeData({ code });
    if (validationError) {
      setValidationError(null);
    }
  };

  const handleLanguageChange = (language: string) => {
    setCodeData({ language });
  };

  const handleAnalyze = async () => {
    if (!codeData.code.trim()) {
      setValidationError('Please enter your solution code');
      return;
    }

    await startAnalysis();
  };

  const handleBack = () => {
    const { submissionType } = useAiNoteModalStore.getState();
    setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  return {
    codeData,
    isLoading,
    error: error || validationError,
    languageOptions: LANGUAGE_OPTIONS,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/index.tsx">
import { useManualInputView } from './useManualInputView';
import { ManualInputViewComponent } from './ManualInputView.view';

export function ManualInputView() {
  const {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  } = useManualInputView();

  return (
    <ManualInputViewComponent
      formData={formData}
      errors={errors}
      onInputChange={handleInputChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

interface ManualInputViewProps {
  formData: FormData;
  errors: Partial<FormData>;
  onInputChange: (field: keyof FormData, value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function ManualInputViewComponent({
  formData,
  errors,
  onInputChange,
  onNext,
  onBack,
}: ManualInputViewProps) {
  const hasRequiredFields = formData.title.trim() && formData.description.trim() && formData.inputOutput.trim();

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Manual Problem Information Input
        </h2>
        <p className="text-gray-600">
          Please enter the detailed problem information directly.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        <div className="space-y-6 w-4/5 mx-auto">
          {/* Problem Title */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Title *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => onInputChange('title', e.target.value)}
              placeholder="Enter problem title"
              className={`
                w-full px-4 py-3 border rounded-lg
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.title
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* Problem Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Description *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => onInputChange('description', e.target.value)}
              placeholder="Enter detailed problem description"
              rows={8}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.description
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description}</p>
            )}
          </div>

          {/* Input/Output Conditions */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Input/Output Conditions *
            </label>
            <textarea
              value={formData.inputOutput}
              onChange={(e) => onInputChange('inputOutput', e.target.value)}
              placeholder="Enter input and output format specifications"
              rows={4}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.inputOutput
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.inputOutput && (
              <p className="mt-1 text-sm text-red-600">{errors.inputOutput}</p>
            )}
          </div>

          {/* Constraints */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Constraints
            </label>
            <input
              type="text"
              value={formData.constraints}
              onChange={(e) => onInputChange('constraints', e.target.value)}
              placeholder="Enter problem constraints (optional)"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg
                       focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                       transition duration-200"
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-6">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!hasRequiredFields}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

export function useManualInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();

  const [formData, setFormData] = useState<FormData>({
    title: problemData.title || '',
    description: problemData.description || '',
    inputOutput: problemData.inputOutput || '',
    constraints: problemData.constraints || '',
  });

  const [errors, setErrors] = useState<Partial<FormData>>({});

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<FormData> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Problem title is required';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Problem description is required';
    }

    if (!formData.inputOutput.trim()) {
      newErrors.inputOutput = 'Input/Output conditions are required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateForm()) {
      setProblemData({
        title: formData.title.trim(),
        description: formData.description.trim(),
        inputOutput: formData.inputOutput.trim(),
        constraints: formData.constraints.trim(),
      });
      setCurrentView('CODE_INPUT');
    }
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/index.tsx">
import { useResultsView } from './useResultsView';
import { ResultsViewComponent } from './ResultsView.view';

export function ResultsView() {
  const {
    analysisResult,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  } = useResultsView();

  return (
    <ResultsViewComponent
      analysisResult={analysisResult}
      hasSelectedUnits={hasSelectedUnits}
      onUnitToggle={handleUnitToggle}
      onGenerate={handleGenerate}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx">
import { ArrowLeft, Check } from 'lucide-react';
import { type AnalysisUnit } from '../../../../store/useAiNoteModalStore';

interface ResultsViewProps {
  analysisResult: AnalysisUnit[];
  hasSelectedUnits: boolean;
  onUnitToggle: (index: number) => void;
  onGenerate: () => void;
  onBack: () => void;
}

export function ResultsViewComponent({
  analysisResult,
  hasSelectedUnits,
  onUnitToggle,
  onGenerate,
  onBack,
}: ResultsViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <p className="text-gray-600">
          AI has analyzed your code into logical units. Select the parts you want to focus on.
        </p>
      </div>

      {/* Analysis Results */}
      <div className="flex-1 overflow-y-auto space-y-4 scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        {analysisResult.map((unit, index) => (
          <div
            key={index}
            className={`
              border-2 rounded-lg p-4 cursor-pointer transition duration-200
              ${unit.selected
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
              }
            `}
            onClick={() => onUnitToggle(index)}
          >
            <div className="flex items-start space-x-3">
              {/* Checkbox */}
              <div className={`
                w-5 h-5 rounded border-2 flex items-center justify-center mt-1
                transition duration-200
                ${unit.selected
                  ? 'border-blue-500 bg-blue-500'
                  : 'border-gray-300'
                }
              `}>
                {unit.selected && (
                  <Check className="h-3 w-3 text-white" />
                )}
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {unit.title}
                </h3>
                <p className="text-gray-600 mb-3">
                  {unit.description}
                </p>

                {/* Code Block */}
                <div className="bg-gray-900 rounded-md p-3 overflow-x-auto">
                  <pre className="text-sm text-gray-100">
                    <code>{unit.code}</code>
                  </pre>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Selection Summary */}
      {hasSelectedUnits && (
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-800">
            {analysisResult.filter(unit => unit.selected).length} logic unit(s) selected
          </p>
        </div>
      )}

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-4">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onGenerate}
          disabled={!hasSelectedUnits}
          className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md
                   hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          Generate Note with Selected Logic
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/ResultsView/useResultsView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useResultsView() {
  const {
    analysisResult,
    toggleAnalysisSelection,
    closeModal,
    setCurrentView,
  } = useAiNoteModalStore();

  const selectedUnits = analysisResult.filter(unit => unit.selected);
  const hasSelectedUnits = selectedUnits.length > 0;

  const handleUnitToggle = (index: number) => {
    toggleAnalysisSelection(index);
  };

  const handleGenerate = () => {
    // In a real implementation, this would send the selected logic to the backend
    console.log('Generating notes with selected logic:', selectedUnits);

    // For now, just close the modal with success
    alert(`Generated incorrect answer notes for ${selectedUnits.length} selected logic units!`);
    closeModal();
  };

  const handleBack = () => {
    setCurrentView('CODE_INPUT');
  };

  return {
    analysisResult,
    selectedUnits,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  };
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/index.tsx">
import { useUrlInputView } from './useUrlInputView';
import { UrlInputViewComponent } from './UrlInputView.view';

export function UrlInputView() {
  const {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  } = useUrlInputView();

  return (
    <UrlInputViewComponent
      url={url}
      error={error}
      onUrlChange={handleUrlChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface UrlInputViewProps {
  url: string;
  error: string | null;
  onUrlChange: (value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function UrlInputViewComponent({
  url,
  error,
  onUrlChange,
  onNext,
  onBack,
}: UrlInputViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Register Problem Link (URL)
        </h2>
        <p className="text-gray-600">
          Please enter the full URL of the problem to register.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 flex flex-col">
        <div className="mb-6">
          <div className="relative">
            <input
              type="url"
              value={url}
              onChange={(e) => onUrlChange(e.target.value)}
              placeholder="https://www.acmicpc.net/problem/1000"
              className={`
                w-full px-4 py-3 border rounded-lg bg-gray-50
                focus:outline-none focus:ring-2 focus:bg-white transition duration-200
                ${error
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            <label className={`
              absolute left-4 transition-all duration-200 pointer-events-none
              ${url
                ? '-top-2 text-xs bg-white px-1 text-blue-600'
                : 'top-3 text-gray-500'
              }
            `}>
              Problem Link
            </label>
          </div>

          {error && (
            <p className="mt-2 text-sm text-red-600">
              {error}
            </p>
          )}
        </div>

        {/* Example */}
        <div className="mb-8 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">Example:</h4>
          <code className="text-sm text-blue-700">
            https://www.acmicpc.net/problem/1000
          </code>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!url.trim()}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useUrlInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();
  const [url, setUrl] = useState(problemData.url || '');
  const [error, setError] = useState<string | null>(null);

  const validateBaekjoonUrl = (url: string): boolean => {
    const baekjoonPattern = /^https?:\/\/(www\.)?acmicpc\.net\/problem\/\d+\/?$/;
    return baekjoonPattern.test(url);
  };

  const handleUrlChange = (value: string) => {
    setUrl(value);
    if (error) {
      setError(null);
    }
  };

  const handleNext = () => {
    if (!url.trim()) {
      setError('Please enter a problem URL');
      return;
    }

    if (!validateBaekjoonUrl(url)) {
      setError('Please enter a valid Baekjoon Online Judge URL (e.g., https://www.acmicpc.net/problem/1000)');
      return;
    }

    setProblemData({ url: url.trim() });
    setCurrentView('CODE_INPUT');
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="src/components/AuthProvider/AuthProvider.view.tsx">
import type { ReactNode } from 'react';

interface AuthProviderViewProps {
  children: ReactNode;
  isLoaded: boolean;
}

export function AuthProviderView({ children, isLoaded }: AuthProviderViewProps) {
  // Show loading indicator while Clerk initializes
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return <>{children}</>;
}
</file>

<file path="src/components/AuthProvider/index.tsx">
import type { ReactNode } from 'react';
import { useAuthProvider } from './useAuthProvider';
import { AuthProviderView } from './AuthProvider.view';

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const { isLoaded } = useAuthProvider();

  return <AuthProviderView isLoaded={isLoaded}>{children}</AuthProviderView>;
}
</file>

<file path="src/components/AuthProvider/useAuthProvider.ts">
import { useEffect } from 'react';
import { useAuth, useUser } from '@clerk/clerk-react';
import { useAuthStore } from '../../store/useAuthStore';
import type { User } from '../../store/useAuthStore';

export function useAuthProvider() {
  const { isLoaded: clerkIsLoaded, isSignedIn: clerkIsSignedIn } = useAuth();
  const { user: clerkUser } = useUser();
  const { setAuthState, setUser, clearAuth } = useAuthStore();

  useEffect(() => {
    // Sync Clerk auth state with Zustand store
    setAuthState({
      isLoaded: clerkIsLoaded,
      isSignedIn: clerkIsSignedIn,
    });

    if (clerkIsLoaded) {
      if (clerkIsSignedIn && clerkUser) {
        // Transform Clerk user to our User interface
        const user: User = {
          id: clerkUser.id,
          emailAddress: clerkUser.primaryEmailAddress?.emailAddress || '',
          firstName: clerkUser.firstName || undefined,
          lastName: clerkUser.lastName || undefined,
          imageUrl: clerkUser.imageUrl || undefined,
          publicMetadata: {
            role: clerkUser.publicMetadata?.role as string | undefined,
          },
        };
        setUser(user);
      } else {
        clearAuth();
      }
    }
  }, [clerkIsLoaded, clerkIsSignedIn, clerkUser, setAuthState, setUser, clearAuth]);

  return {
    isLoaded: clerkIsLoaded,
  };
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx">
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, X } from 'lucide-react';
import { ChoiceView } from './views/ChoiceView';
import { URLInputView } from './views/URLInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import type { ViewType } from '../../store/useIncorrectAnswerNoteStore';

interface IncorrectAnswerNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: any;
  submissionType: 'url' | 'manual' | null;
  codeData: any;
  analysisResult: any[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
  onOverlayClick: () => void;
  onExitConfirm: () => void;
  onExitCancel: () => void;
  onBackClick: () => void;
  onChoiceSelect: (type: 'url' | 'manual') => void;
  onNext: () => void;
  onAnalyze: () => void;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
  onProblemDataChange: (data: any) => void;
  onCodeDataChange: (data: any) => void;
}

const modalSizes = {
  CHOICE: { maxWidth: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { maxWidth: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { maxWidth: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { maxWidth: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { maxWidth: 'max-w-5xl', height: 'h-[700px]' },
};

export function IncorrectAnswerNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  problemData,
  submissionType,
  codeData,
  analysisResult,
  selectedAnalysisIndex,
  isLoading,
  error,
  onOverlayClick,
  onExitConfirm,
  onExitCancel,
  onBackClick,
  onChoiceSelect,
  onNext,
  onAnalyze,
  onAnalysisSelect,
  onGenerateNote,
  onProblemDataChange,
  onCodeDataChange,
}: IncorrectAnswerNoteModalViewProps) {
  const canShowBack = currentView !== 'CHOICE';
  const currentSize = modalSizes[currentView];

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView onChoiceSelect={onChoiceSelect} />;
      case 'URL_INPUT':
        return (
          <URLInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'MANUAL_INPUT':
        return (
          <ManualInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'CODE_INPUT':
        return (
          <CodeInputView
            codeData={codeData}
            onCodeDataChange={onCodeDataChange}
            onAnalyze={onAnalyze}
            isLoading={isLoading}
          />
        );
      case 'RESULTS':
        return (
          <ResultsView
            analysisResult={analysisResult}
            selectedAnalysisIndex={selectedAnalysisIndex}
            onAnalysisSelect={onAnalysisSelect}
            onGenerateNote={onGenerateNote}
          />
        );
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container */}
          <motion.div
            layout
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', duration: 0.3 }}
            className={`relative bg-gray-900 rounded-xl shadow-2xl ${currentSize.maxWidth} ${currentSize.height} transition-all duration-300 ease-in-out`}
          >
            {/* Back Button */}
            {canShowBack && (
              <button
                onClick={onBackClick}
                className="absolute top-6 left-6 z-10 p-2 rounded-full text-gray-400 hover:bg-gray-800 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
            )}

            {/* Loading Overlay */}
            {isLoading && (
              <div className="absolute inset-0 bg-gray-900/80 flex items-center justify-center z-20 rounded-xl">
                <div className="flex flex-col items-center gap-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500" />
                  <p className="text-white text-lg">Analyzing your code...</p>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <div className="absolute top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-md z-20">
                {error}
              </div>
            )}

            {/* Modal Content */}
            <div className="h-full flex flex-col">
              {renderCurrentView()}
            </div>
          </motion.div>

          {/* Exit Confirmation Dialog */}
          <AnimatePresence>
            {isExitConfirmationVisible && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="absolute inset-0 bg-black/60 flex items-center justify-center z-60"
              >
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                  className="bg-gray-800 rounded-lg p-6 max-w-md mx-4"
                >
                  <div className="flex items-center gap-3 mb-4">
                    <X className="w-6 h-6 text-red-400" />
                    <h3 className="text-lg font-semibold text-white">Confirm Exit</h3>
                  </div>
                  <p className="text-gray-300 mb-6">
                    Are you sure you want to cancel the operation and exit?
                  </p>
                  <div className="flex gap-3">
                    <button
                      onClick={onExitCancel}
                      className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={onExitConfirm}
                      className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                    >
                      Confirm
                    </button>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/index.tsx">
import { useIncorrectAnswerNoteModal } from './useIncorrectAnswerNoteModal';
import { IncorrectAnswerNoteModalView } from './IncorrectAnswerNoteModal.view';

export function IncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  } = useIncorrectAnswerNoteModal();

  return (
    <IncorrectAnswerNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      problemData={problemData}
      submissionType={submissionType}
      codeData={codeData}
      analysisResult={analysisResult}
      selectedAnalysisIndex={selectedAnalysisIndex}
      isLoading={isLoading}
      error={error}
      onOverlayClick={handleOverlayClick}
      onExitConfirm={handleExitConfirm}
      onExitCancel={handleExitCancel}
      onBackClick={handleBackClick}
      onChoiceSelect={handleChoiceSelect}
      onNext={handleNextClick}
      onAnalyze={handleAnalyzeClick}
      onAnalysisSelect={handleAnalysisSelect}
      onGenerateNote={handleGenerateNote}
      onProblemDataChange={setProblemData}
      onCodeDataChange={setCodeData}
    />
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts">
import { useIncorrectAnswerNoteStore } from '../../store/useIncorrectAnswerNoteStore';

export function useIncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
    setCurrentView,
    setSubmissionType,
    setProblemData,
    setCodeData,
    setSelectedAnalysisIndex,
    analyzeCode,
  } = useIncorrectAnswerNoteStore();

  const handleOverlayClick = () => {
    showExitConfirmation();
  };

  const handleExitConfirm = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleExitCancel = () => {
    hideExitConfirmation();
  };

  const handleBackClick = () => {
    switch (currentView) {
      case 'URL_INPUT':
      case 'MANUAL_INPUT':
        setCurrentView('CHOICE');
        break;
      case 'CODE_INPUT':
        setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
        break;
      case 'RESULTS':
        setCurrentView('CODE_INPUT');
        break;
      default:
        break;
    }
  };

  const handleChoiceSelect = (type: 'url' | 'manual') => {
    setSubmissionType(type);
    setCurrentView(type === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  const handleNextClick = () => {
    if (currentView === 'URL_INPUT' || currentView === 'MANUAL_INPUT') {
      setCurrentView('CODE_INPUT');
    }
  };

  const handleAnalyzeClick = () => {
    analyzeCode();
  };

  const handleAnalysisSelect = (index: number) => {
    setSelectedAnalysisIndex(index);
  };

  const handleGenerateNote = () => {
    if (analysisResult.length > 0 && analysisResult[selectedAnalysisIndex]) {
      const selectedLogic = analysisResult[selectedAnalysisIndex];
      console.log({
        title: selectedLogic.title,
        description: selectedLogic.description,
        code: selectedLogic.code,
      });
    }
  };

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  };
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx">
import { Link, Bell } from 'lucide-react';

interface ChoiceViewProps {
  onChoiceSelect: (type: 'url' | 'manual') => void;
}

export function ChoiceView({ onChoiceSelect }: ChoiceViewProps) {
  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Please register the problem first
      </h2>
      <div className="grid grid-cols-2 gap-6">
        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('url')}
        >
          <Link className="w-12 h-12 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Register by URL</h3>
          <p className="text-gray-300 text-sm">
            Register problem using Baekjoon URL link
          </p>
          <p className="text-gray-400 text-xs">
            Only Baekjoon Online Judge allowed
          </p>
        </div>

        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('manual')}
        >
          <Bell className="w-12 h-12 text-green-400" />
          <h3 className="text-lg font-semibold text-white">Manual Input</h3>
          <p className="text-gray-300 text-sm">
            Manually enter problem information
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx">
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import type { CodeData } from '../../../store/useIncorrectAnswerNoteStore';

interface CodeInputViewProps {
  codeData: CodeData;
  onCodeDataChange: (data: Partial<CodeData>) => void;
  onAnalyze: () => void;
  isLoading: boolean;
}

const languageExtensions = {
  javascript: javascript(),
  python: python(),
  java: java(),
  cpp: cpp(),
};

const languageOptions = [
  { value: 'javascript', label: 'JavaScript' },
  { value: 'python', label: 'Python' },
  { value: 'java', label: 'Java' },
  { value: 'cpp', label: 'C++' },
];

export function CodeInputView({ codeData, onCodeDataChange, onAnalyze, isLoading }: CodeInputViewProps) {
  const handleLanguageChange = (language: string) => {
    onCodeDataChange({ language });
  };

  const handleCodeChange = (code: string) => {
    onCodeDataChange({ code });
  };

  const handleSubmit = () => {
    if (codeData.code.trim()) {
      onAnalyze();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Code Input
      </h2>

      {/* Language Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Select Language
        </label>
        <select
          value={codeData.language}
          onChange={(e) => handleLanguageChange(e.target.value)}
          className="w-48 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500 transition-colors"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-6">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Your Solution Code
        </label>
        <div className="h-[350px] border border-gray-600 rounded-md overflow-hidden">
          <CodeMirror
            value={codeData.code}
            onChange={handleCodeChange}
            extensions={[languageExtensions[codeData.language as keyof typeof languageExtensions] || javascript()]}
            theme={oneDark}
            placeholder={`Enter your ${languageOptions.find(opt => opt.value === codeData.language)?.label || 'JavaScript'} code here...`}
            basicSetup={{
              lineNumbers: true,
              foldGutter: true,
              dropCursor: false,
              allowMultipleSelections: false,
              indentOnInput: true,
              bracketMatching: true,
              closeBrackets: true,
              autocompletion: true,
              highlightSelectionMatches: false,
            }}
            style={{ fontSize: '14px' }}
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!codeData.code.trim() || isLoading}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        {isLoading ? 'Analyzing...' : 'Analyze'}
      </button>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx">
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface ManualInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function ManualInputView({ problemData, onProblemDataChange, onNext }: ManualInputViewProps) {
  const handleInputChange = (field: keyof ProblemData, value: string) => {
    onProblemDataChange({ [field]: value });
  };

  const handleSubmit = () => {
    if (problemData.title.trim() && problemData.description.trim()) {
      onNext();
    }
  };

  const isFormValid = problemData.title.trim() && problemData.description.trim();

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Manual Problem Information Input
      </h2>

      <div className="flex-1 overflow-y-auto space-y-4 mb-6" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
        {/* Problem Title */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Title *
          </label>
          <input
            type="text"
            value={problemData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Enter problem title"
          />
        </div>

        {/* Problem Description */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Description *
          </label>
          <textarea
            value={problemData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            className="w-full h-40 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Enter detailed problem description"
          />
        </div>

        {/* Input Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Input Conditions
          </label>
          <textarea
            value={problemData.inputCondition}
            onChange={(e) => handleInputChange('inputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe input format and constraints"
          />
        </div>

        {/* Output Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Output Conditions
          </label>
          <textarea
            value={problemData.outputCondition}
            onChange={(e) => handleInputChange('outputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe expected output format"
          />
        </div>

        {/* Constraints */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Constraints
          </label>
          <input
            type="text"
            value={problemData.constraints}
            onChange={(e) => handleInputChange('constraints', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Time and memory limits, data ranges"
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!isFormValid}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx">
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import type { AnalysisResult } from '../../../store/useIncorrectAnswerNoteStore';

interface ResultsViewProps {
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
}

export function ResultsView({
  analysisResult,
  selectedAnalysisIndex,
  onAnalysisSelect,
  onGenerateNote
}: ResultsViewProps) {
  const selectedLogic = analysisResult[selectedAnalysisIndex];

  return (
    <div className="p-6 flex flex-col h-full">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-white">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <button
          onClick={onGenerateNote}
          className="bg-green-600 hover:bg-green-700 text-white font-medium px-4 py-2 rounded-md transition-colors"
        >
          Generate Note with Selected Logic
        </button>
      </div>

      <div className="flex gap-6 h-full pt-4">
        {/* Left Column - Logic Title List */}
        <div className="w-1/3 flex flex-col gap-2 overflow-y-auto" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
          {analysisResult.map((result, index) => (
            <button
              key={index}
              onClick={() => onAnalysisSelect(index)}
              className={`w-full text-left p-3 rounded-md transition-colors ${
                index === selectedAnalysisIndex
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {result.title}
            </button>
          ))}
        </div>

        {/* Right Column - Selected Logic Details */}
        <div className="w-2/3 flex flex-col">
          {selectedLogic && (
            <>
              {/* Code Display */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold text-white mb-2">Code</h3>
                <div className="border border-gray-600 rounded-md overflow-hidden">
                  <CodeMirror
                    value={selectedLogic.code}
                    extensions={[javascript()]}
                    theme={oneDark}
                    readOnly={true}
                    basicSetup={{
                      lineNumbers: true,
                      foldGutter: false,
                      dropCursor: false,
                      allowMultipleSelections: false,
                      indentOnInput: false,
                      bracketMatching: true,
                      closeBrackets: false,
                      autocompletion: false,
                      highlightSelectionMatches: false,
                      searchKeymap: false,
                    }}
                    style={{ fontSize: '14px' }}
                  />
                </div>
              </div>

              {/* Description Display */}
              <div className="mt-4 p-4 bg-gray-800 rounded-md text-gray-300">
                <h3 className="text-lg font-semibold text-white mb-2">Description</h3>
                <p className="leading-relaxed">{selectedLogic.description}</p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx">
import { useState } from 'react';
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface URLInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function URLInputView({ problemData, onProblemDataChange, onNext }: URLInputViewProps) {
  const [isFocused, setIsFocused] = useState(false);
  const [inputValue, setInputValue] = useState(problemData.url || '');

  const handleInputChange = (value: string) => {
    setInputValue(value);
    onProblemDataChange({ url: value });
  };

  const handleSubmit = () => {
    if (inputValue.trim()) {
      onNext();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Register Problem Link (URL)
      </h2>

      <div className="flex-1 flex flex-col justify-center">
        <div className="relative mb-6">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => handleInputChange(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-transparent focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Problem Link"
          />
          <label
            className={`absolute left-4 transition-all duration-200 pointer-events-none ${
              isFocused || inputValue
                ? '-top-2 text-xs text-blue-400 bg-gray-900 px-2'
                : 'top-3 text-gray-400'
            }`}
          >
            Problem Link
          </label>
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!inputValue.trim()}
        className="w-full mt-auto bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="src/components/ProtectedRoute/index.tsx">
import type { ReactNode } from 'react';
import { useProtectedRoute } from './useProtectedRoute';
import { ProtectedRouteView } from './ProtectedRoute.view';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredRole?: string;
  redirectTo?: string;
}

export function ProtectedRoute({
  children,
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: ProtectedRouteProps) {
  const { shouldShowContent, shouldShowLoading } = useProtectedRoute({
    requiredRole,
    redirectTo
  });

  return (
    <ProtectedRouteView
      shouldShowContent={shouldShowContent}
      shouldShowLoading={shouldShowLoading}
    >
      {children}
    </ProtectedRouteView>
  );
}
</file>

<file path="src/components/ProtectedRoute/ProtectedRoute.view.tsx">
import { ReactNode } from 'react';

interface ProtectedRouteViewProps {
  children: ReactNode;
  shouldShowContent: boolean;
  shouldShowLoading: boolean;
}

export function ProtectedRouteView({
  children,
  shouldShowContent,
  shouldShowLoading
}: ProtectedRouteViewProps) {
  // Show loading spinner while authentication is being checked
  if (shouldShowLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Loading...</span>
      </div>
    );
  }

  // Only render children if user is properly authenticated and authorized
  if (shouldShowContent) {
    return <>{children}</>;
  }

  // Return null while redirecting (to prevent flash of content)
  return null;
}
</file>

<file path="src/components/ProtectedRoute/useProtectedRoute.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';

interface UseProtectedRouteProps {
  requiredRole?: string;
  redirectTo?: string;
}

export function useProtectedRoute({
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: UseProtectedRouteProps = {}) {
  const navigate = useNavigate();
  const { isLoaded, isSignedIn, role } = useAuthStore();

  useEffect(() => {
    // Only proceed with checks after Clerk has loaded
    if (!isLoaded) return;

    // Redirect to sign-in if not authenticated
    if (!isSignedIn) {
      navigate(redirectTo);
      return;
    }

    // Redirect if user doesn't have the required role
    if (requiredRole && role !== requiredRole) {
      navigate('/unauthorized'); // You might want to create an unauthorized page
      return;
    }
  }, [isLoaded, isSignedIn, role, requiredRole, navigate, redirectTo]);

  const shouldShowContent = isLoaded && isSignedIn && (!requiredRole || role === requiredRole);
  const shouldShowLoading = !isLoaded;

  return {
    shouldShowContent,
    shouldShowLoading,
    isLoaded,
    isSignedIn,
    role,
  };
}
</file>

<file path="src/hooks/useApiClient.ts">
import { useEffect } from 'react';
import { useAuth } from '@clerk/clerk-react';
import { initializeApiClient } from '../services/apiClient';

/**
 * Hook to initialize the API client with Clerk authentication
 * Should be used at the root level of the authenticated app
 */
export function useApiClient() {
  const { getToken } = useAuth();

  useEffect(() => {
    // Initialize the API client with Clerk's getToken function
    initializeApiClient(getToken);
  }, [getToken]);

  return {
    isInitialized: true,
  };
}
</file>

<file path="src/hooks/useUserProfile.ts">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getUserProfile, updateUserProfile } from '../services/userService';
import type { UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Query keys for user-related data
 */
export const userQueryKeys = {
  profile: ['user', 'profile'] as const,
  stats: ['user', 'stats'] as const,
};

/**
 * Hook to fetch and manage user profile data
 */
export function useUserProfile() {
  const queryClient = useQueryClient();

  // Query for user profile
  const profileQuery = useQuery({
    queryKey: userQueryKeys.profile,
    queryFn: getUserProfile,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation for updating user profile
  const updateProfileMutation = useMutation({
    mutationFn: updateUserProfile,
    onSuccess: (updatedProfile) => {
      // Update the cached profile data
      queryClient.setQueryData(userQueryKeys.profile, updatedProfile);
    },
  });

  return {
    // Profile data
    profile: profileQuery.data,
    isLoading: profileQuery.isLoading,
    isError: profileQuery.isError,
    error: profileQuery.error,

    // Update profile function
    updateProfile: (data: UpdateUserProfileRequest) => updateProfileMutation.mutate(data),
    isUpdating: updateProfileMutation.isPending,
    updateError: updateProfileMutation.error,

    // Utility functions
    refetch: profileQuery.refetch,
  };
}
</file>

<file path="src/index.css">
/* CSS Reset - 브라우저 기본 스타일 제거 */
@tailwind base;
@tailwind components;
@tailwind utilities;

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* 추가적인 브라우저 기본값 제거 */
button, input, optgroup, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

button, select {
  text-transform: none;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* 링크 기본 스타일 제거 */
a {
  color: inherit;
  text-decoration: none;
}

/* 브라우저 기본 포커스 스타일 제거 */
:focus {
  outline: none;
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import { ClerkProvider } from '@clerk/clerk-react';
import './index.css';
import App from './App.tsx';

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error('Missing Publishable Key');
}

function ClerkProviderWithRoutes() {
  const navigate = useNavigate();

  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={import.meta.env.VITE_CLERK_SIGN_IN_URL}
      signUpUrl={import.meta.env.VITE_CLERK_SIGN_UP_URL}
    >
      <App />
    </ClerkProvider>
  );
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <ClerkProviderWithRoutes />
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="src/pages/Components/Components.view.tsx">
import React from 'react';
import { useComponents } from './useComponents';
import { Button, Card, Footer, Input, Spinner, Typography } from 'ui-components/src/components';

export const ComponentsView = () => {
  const { selectedComponent, components, handleComponentSelect } = useComponents();

  const renderButtonDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Button Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Variants</Typography>
          <div className="flex flex-wrap gap-3">
            <Button variant="primary">Primary Button</Button>
            <Button variant="secondary">Secondary Button</Button>
            <Button variant="outline">Outline Button</Button>
            <Button variant="ghost">Ghost Button</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex flex-wrap items-center gap-3">
            <Button size="sm">Small</Button>
            <Button size="md">Medium</Button>
            <Button size="lg">Large</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">States</Typography>
          <div className="flex flex-wrap gap-3">
            <Button>Normal</Button>
            <Button isLoading>Loading</Button>
            <Button disabled>Disabled</Button>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderCardDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Card Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card variant="default">
          <Typography variant="h6" className="mb-2">Default Card</Typography>
          <Typography variant="body2" color="secondary">
            This is a default card with standard styling and shadow.
          </Typography>
        </Card>

        <Card variant="elevated" padding="lg">
          <Typography variant="h6" className="mb-2">Elevated Card</Typography>
          <Typography variant="body2" color="secondary">
            This card has an elevated appearance with more shadow depth and larger padding.
          </Typography>
        </Card>

        <Card variant="outlined" padding="sm">
          <Typography variant="h6" className="mb-2">Outlined Card</Typography>
          <Typography variant="body2" color="secondary">
            This card uses an outlined style with smaller padding.
          </Typography>
        </Card>
      </div>
    </div>
  );

  const renderInputDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Input Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <Input
            label="Basic Input"
            placeholder="Enter some text..."
            helperText="This is helper text"
          />

          <Input
            label="Email Input"
            type="email"
            placeholder="your@email.com"
          />

          <Input
            label="Password Input"
            type="password"
            placeholder="••••••••"
          />
        </div>

        <div className="space-y-4">
          <Input
            label="Input with Error"
            placeholder="Enter value"
            error="This field is required"
          />

          <Input
            label="Disabled Input"
            placeholder="Can't edit this"
            disabled
          />

          <Input
            label="Search Input"
            placeholder="Search..."
            leftIcon={<span>🔍</span>}
          />
        </div>
      </div>
    </Card>
  );

  const renderTypographyDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Typography Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Headings</Typography>
          <div className="space-y-2">
            <Typography variant="h1">Heading 1</Typography>
            <Typography variant="h2">Heading 2</Typography>
            <Typography variant="h3">Heading 3</Typography>
            <Typography variant="h4">Heading 4</Typography>
            <Typography variant="h5">Heading 5</Typography>
            <Typography variant="h6">Heading 6</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Body Text</Typography>
          <div className="space-y-2">
            <Typography variant="body1">Body 1 - Regular paragraph text for main content</Typography>
            <Typography variant="body2">Body 2 - Smaller text for secondary content</Typography>
            <Typography variant="caption">Caption - Very small text for labels and metadata</Typography>
            <Typography variant="overline">Overline - Small caps text</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="space-y-2">
            <Typography color="primary">Primary text color</Typography>
            <Typography color="secondary">Secondary text color</Typography>
            <Typography color="tertiary">Tertiary text color</Typography>
            <Typography color="success">Success text color</Typography>
            <Typography color="warning">Warning text color</Typography>
            <Typography color="error">Error text color</Typography>
            <Typography color="info">Info text color</Typography>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderFooterDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Footer Examples</Typography>

      <div className="space-y-8">
        <div>
          <Typography variant="h6" className="mb-4">Basic Footer</Typography>
          <Footer />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Footer with Links</Typography>
          <Footer
            links={[
              { label: 'About', href: '/about' },
              { label: 'Contact', href: '/contact' },
              { label: 'Privacy', href: '/privacy' },
              { label: 'Terms', href: '/terms' }
            ]}
            socialLinks={[
              { label: 'GitHub', href: 'https://github.com', icon: '🐙' },
              { label: 'Twitter', href: 'https://twitter.com', icon: '🐦' },
              { label: 'LinkedIn', href: 'https://linkedin.com', icon: '💼' }
            ]}
          />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Custom Company Footer</Typography>
          <Footer
            companyName="Custom Company"
            copyrightYear={2024}
            links={[
              { label: 'Documentation', href: '/docs' },
              { label: 'API', href: '/api' },
              { label: 'Support', href: '/support' }
            ]}
          />
        </div>
      </div>
    </div>
  );

  const renderSpinnerDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Spinner Examples</Typography>
      <div className="space-y-6">
        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner size="sm" />
              <Typography variant="caption" className="block mt-2">Small</Typography>
            </div>
            <div className="text-center">
              <Spinner size="md" />
              <Typography variant="caption" className="block mt-2">Medium</Typography>
            </div>
            <div className="text-center">
              <Spinner size="lg" />
              <Typography variant="caption" className="block mt-2">Large</Typography>
            </div>
            <div className="text-center">
              <Spinner size="xl" />
              <Typography variant="caption" className="block mt-2">Extra Large</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner color="brand" />
              <Typography variant="caption" className="block mt-2">Brand</Typography>
            </div>
            <div className="text-center">
              <Spinner color="neutral" />
              <Typography variant="caption" className="block mt-2">Neutral</Typography>
            </div>
            <div className="text-center bg-neutral-800 p-4 rounded">
              <Spinner color="white" />
              <Typography variant="caption" className="block mt-2 text-white">White</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Usage Examples</Typography>
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Spinner size="sm" />
              <Typography variant="body2">Loading content...</Typography>
            </div>

            <Button isLoading disabled>
              Submit Form
            </Button>

            <div className="flex items-center justify-center p-8 bg-background-secondary rounded-lg">
              <div className="text-center">
                <Spinner size="lg" className="mb-3" />
                <Typography variant="body1">Processing your request</Typography>
                <Typography variant="body2" color="secondary">Please wait a moment</Typography>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderSelectedDemo = () => {
    switch (selectedComponent) {
      case 'button':
        return renderButtonDemo();
      case 'card':
        return renderCardDemo();
      case 'footer':
        return renderFooterDemo();
      case 'input':
        return renderInputDemo();
      case 'spinner':
        return renderSpinnerDemo();
      case 'typography':
        return renderTypographyDemo();
      default:
        return renderButtonDemo();
    }
  };

  return (
    <div className="min-h-screen bg-background-primary">
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-8">
          <Typography variant="h2" className="mb-2">Component Library</Typography>
          <Typography variant="body1" color="secondary">
            Explore and test the reusable UI components built with Linear design system
          </Typography>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Component Navigation */}
          <aside className="lg:w-64 shrink-0">
            <Card padding="sm">
              <Typography variant="h6" className="mb-4">Components</Typography>
              <nav className="space-y-2">
                {components.map((component) => (
                  <button
                    key={component.id}
                    onClick={() => handleComponentSelect(component.id)}
                    className={`w-full text-left p-3 rounded-md text-sm font-medium transition-colors ${
                      selectedComponent === component.id
                        ? 'bg-brand text-white'
                        : 'text-text-primary hover:bg-background-tertiary'
                    }`}
                  >
                    <div>
                      <div className="font-medium">{component.name}</div>
                      <div className={`text-xs mt-1 ${
                        selectedComponent === component.id ? 'text-white/80' : 'text-text-tertiary'
                      }`}>
                        {component.description}
                      </div>
                    </div>
                  </button>
                ))}
              </nav>
            </Card>
          </aside>

          {/* Component Demo */}
          <main className="flex-1">
            {renderSelectedDemo()}
          </main>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/Components/index.tsx">
export { ComponentsView as Components } from './Components.view';
</file>

<file path="src/pages/Components/useComponents.ts">
import { useState } from 'react';

export const useComponents = () => {
  const [selectedComponent, setSelectedComponent] = useState<string>('button');

  const components = [
    { id: 'button', name: 'Button', description: 'Interactive button component with multiple variants' },
    { id: 'card', name: 'Card', description: 'Container component for grouping related content' },
    { id: 'footer', name: 'Footer', description: 'Website footer with links and company information' },
    { id: 'input', name: 'Input', description: 'Form input component with validation support' },
    { id: 'spinner', name: 'Spinner', description: 'Loading spinner with different sizes and colors' },
    { id: 'typography', name: 'Typography', description: 'Text component with consistent styling' },
  ];

  const handleComponentSelect = (componentId: string) => {
    setSelectedComponent(componentId);
  };

  return {
    selectedComponent,
    components,
    handleComponentSelect,
  };
};
</file>

<file path="src/pages/Dashboard/index.tsx">
import { useAuthStore } from '../../store/useAuthStore';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';
import { AiNoteModal } from '../../components/AiNoteModal';

export default function DashboardPage() {
  const { user, role } = useAuthStore();
  const { openModal } = useAiNoteModalStore();

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            Welcome to AlgoRevise Dashboard
          </h1>
          <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h2 className="text-lg font-semibold text-blue-900 mb-2">User Information</h2>
            <div className="space-y-2 text-sm">
              <p><span className="font-medium">Name:</span> {user?.firstName} {user?.lastName}</p>
              <p><span className="font-medium">Email:</span> {user?.emailAddress}</p>
              <p><span className="font-medium">Role:</span> {role || 'No role assigned'}</p>
              <p><span className="font-medium">User ID:</span> {user?.id}</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">AI Incorrect Answer Note</h3>
            <p className="text-gray-600 mb-4">Generate AI-powered notes from your algorithm solutions</p>
            <button
              onClick={openModal}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
            >
              Generate Incorrect Answer Note
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">View Analytics</h3>
            <p className="text-gray-600 mb-4">Check your learning progress and statistics</p>
            <button className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              View Analytics
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">Practice Problems</h3>
            <p className="text-gray-600 mb-4">Solve AI-generated practice problems</p>
            <button className="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              Start Practice
            </button>
          </div>
        </div>
      </div>

      {/* AI Note Modal */}
      <AiNoteModal />
    </div>
  );
}
</file>

<file path="src/pages/SetupAccount/index.tsx">
import { useSetupAccount } from './useSetupAccount';
import { SetupAccountView } from './SetupAccount.view';

export default function SetupAccountPage() {
  useSetupAccount();

  return <SetupAccountView />;
}
</file>

<file path="src/pages/SetupAccount/SetupAccount.view.tsx">
export function SetupAccountView() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="text-center p-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6"></div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">계정을 설정하고 있습니다</h2>
        <p className="text-gray-600">잠시만 기다려주세요...</p>
        <div className="mt-4 text-sm text-gray-500">
          역할을 확인하고 대시보드로 이동합니다
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/SetupAccount/useSetupAccount.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';
import { useUser } from '@clerk/clerk-react';
import type { User } from '../../store/useAuthStore';

export function useSetupAccount() {
  const navigate = useNavigate();
  const { user, isLoaded } = useUser();
  const { setUser: setStoreUser, setAuthState } = useAuthStore();

  useEffect(() => {
    if (isLoaded && user) {
      const role = user.publicMetadata?.role as string | undefined;
      console.log('User info:', user);
      console.log('User Role:', user.publicMetadata?.role);

      if (role === 'member') {
        // Store에 사용자 정보 저장
        const storeUser: User = {
          id: user.id,
          emailAddress: user.primaryEmailAddress?.emailAddress || '',
          firstName: user.firstName || undefined,
          lastName: user.lastName || undefined,
          imageUrl: user.imageUrl || undefined,
          publicMetadata: {
            role: role,
          },
        };

        setStoreUser(storeUser);
        setAuthState({
          isLoaded: true,
          isSignedIn: true,
        });

        navigate('/dashboard');
        return;
      }
    }

    const reloadInterval = setInterval(() => {
      if (user) {
        console.log('Reloading user info...');
        user.reload();
      }
    }, 1000);

    // role이 member가 아니거나 사용자 정보가 없는 경우 타이머 설정
    const timeoutTimer = setTimeout(() => {
      if (isLoaded && (!user || user.publicMetadata?.role !== 'member')) {
        console.log('Unauthorized access or user info missing, redirecting to /unauthorized');
        navigate('/unauthorized');
      }
    }, 15000);

    return () => {
      clearInterval(reloadInterval);
      clearTimeout(timeoutTimer);
    };
  }, [isLoaded, user, setStoreUser, setAuthState, navigate]);

  return {};
}
</file>

<file path="src/pages/SignIn/index.tsx">
import SignInPageView from "./SignInPage.view";
import { useSignIn } from "./useSignIn";

const SignInPage = () => {
  const { handleEmailSignInClick, handleSignUpClick } = useSignIn();

  return (
    <SignInPageView
      onEmailSignInClick={handleEmailSignInClick}
      onSignUpClick={handleSignUpClick}
    />
  )
}

export default SignInPage;
</file>

<file path="src/pages/SignIn/SignInPage.view.tsx">
import React from 'react';
import { SignInWithGoogleButton } from '../../../../../libs/ui-components/src/components/sign-in-with-google-button'
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignInPageViewProps {
  onEmailSignInClick: () => void;
  onSignUpClick: () => void;
}

const SignInPageView: React.FC<SignInPageViewProps> = ({ onEmailSignInClick, onSignUpClick }) => {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      
      <div className="w-full max-w-xs flex flex-col items-center">
        
        <div className="h-10 w-10 mb-8 bg-white rounded-full">
            {/* <YourLogo className="h-10 w-10" /> */}
        </div>
        
        <h1 className="text-xl font-normal mb-6">Log in to AlgorNote</h1>
        
        <div className="w-full flex flex-col space-y-3">
          <SignInWithGoogleButton />
          <SignInWithEmailButton onClick={onEmailSignInClick} />
        </div>
        
        <p className="mt-8 text-sm text-gray-400 text-xs">
          Don't have an account?
          <button onClick={onSignUpClick} className="font-semibold text-white hover:underline ml-1 text-xs">
            Sign up
          </button> or
          <a href="#" className="font-semibold text-white hover:underline ml-1 text-xs">
            Learn more
          </a>
        </p>

      </div>
    </main>
  );
};

export default SignInPageView;
</file>

<file path="src/pages/SignIn/useSignIn.ts">
import { useNavigate } from 'react-router-dom';

export function useSignIn() {
  const navigate = useNavigate();

  const handleEmailSignInClick = () => {
    navigate('/sign-in/email');
  };

  const handleSignUpClick = () => {
    navigate('/sign-up');
  };

  return {
    handleEmailSignInClick,
    handleSignUpClick
  };
}
</file>

<file path="src/pages/SignInWithEmail/index.tsx">
import { useSignInWithEmail } from './useSignInWithEmail';
import { SignInWithEmailPageView } from './SignInWithEmailPage.view';

export function SignInWithEmailPage() {
  const {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick
  } = useSignInWithEmail();

  return (
    <SignInWithEmailPageView
      email={email}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onBackToLogin={handleBackToLogin}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignInWithEmailPage;
</file>

<file path="src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignInWithEmailPageViewProps {
  email: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onBackToLogin: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignInWithEmailPageView({
  email,
  error,
  isLoading,
  onEmailChange,
  onBackToLogin,
  onSubmit,
  onContinueClick
}: SignInWithEmailPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          What's your email address?
        </h1>

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type="email"
              value={email}
              onChange={(e) => onEmailChange(e.target.value)}
              placeholder="Enter your email address..."
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isLoading || !email.trim()}
          />

        </form>

        <button
          type="button"
          onClick={onBackToLogin}
          disabled={isLoading}
          className={`
            mt-6 text-sm text-gray-400
            hover:text-white hover:underline
            disabled:opacity-50 disabled:cursor-not-allowed
            transition-colors duration-200
          `}
        >
          Back to login
        </button>

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignInWithEmail/useSignInWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignIn } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schema for email validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

export function useSignInWithEmail() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signIn } = useSignIn();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleEmailLogin = async () => {
    // Validate email with Zod
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signIn?.create({
        identifier: email,
      });
      console.log('Email sign-in initiated for:', email);

    } catch (err) {
      console.error('Sign-in error:', err);
      setError('An error occurred during sign-in. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await handleEmailLogin();
  };

  return {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick: handleEmailLogin
  };
}
</file>

<file path="src/pages/SignUp/index.tsx">
import { useSignUp } from './useSignUp';
import { SignUpPageView } from './SignUpPage.view';

export function SignUpPage() {
  const {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  } = useSignUp();

  return (
    <SignUpPageView
      hasGoogleHistory={hasGoogleHistory}
      isLoaded={isLoaded}
      onGoogleSignUp={handleGoogleSignUp}
      onEmailSignUp={handleEmailSignUp}
      onSignInClick={handleSignInClick}
    />
  );
}

export default SignUpPage;
</file>

<file path="src/pages/SignUp/SignUpPage.view.tsx">
import { SignInWithGoogleButtonView } from '../../../../../libs/ui-components/src/components/sign-in-with-google-button/SignInWithGoogleButton.view';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignUpPageViewProps {
  hasGoogleHistory: boolean;
  isLoaded: boolean;
  onGoogleSignUp: () => void;
  onEmailSignUp: () => void;
  onSignInClick: () => void;
}

export function SignUpPageView({
  hasGoogleHistory,
  isLoaded,
  onGoogleSignUp,
  onEmailSignUp,
  onSignInClick
}: SignUpPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
          {/* Logo would go here */}
        </div>

        {/* Title */}
        <h1 className="text-xl font-normal mb-2 text-center">
          Create your workspace
        </h1>

        <div className="w-full flex flex-col space-y-3 mb-6">
          <SignInWithEmailButton onClick={onEmailSignUp} />
        </div>

        <p className="text-xs text-gray-400 text-center mb-8 leading-relaxed">
          By signing up, you agree to our{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Terms of Service
          </a>{' '}
          and{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Data Processing Agreement
          </a>
        </p>

        <p className="text-xs text-gray-400">
          Already have an account?{' '}
          <button
            onClick={onSignInClick}
            className="text-white hover:underline font-medium"
          >
            Log in
          </button>
        </p>

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignUp/useSignUp.ts">
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp as useClerkSignUp } from '@clerk/clerk-react';

export function useSignUp() {
  const [hasGoogleHistory, setHasGoogleHistory] = useState(false);
  const navigate = useNavigate();
  const { signUp, isLoaded } = useClerkSignUp();

  useEffect(() => {
    const googleHistory = localStorage.getItem('previous-google-login');
    setHasGoogleHistory(!!googleHistory);
  }, []);

  const handleGoogleSignUp = async () => {
    if (!isLoaded || !signUp) {
      console.error('Clerk is not loaded yet');
      return;
    }

    try {
      await signUp.authenticateWithRedirect({
        strategy: 'oauth_google',
        redirectUrl: '/sso-callback',
        redirectUrlComplete: '/dashboard',
      });

      // Store Google login preference
      localStorage.setItem('previous-google-login', 'true');
    } catch (error) {
      console.error('Error signing up with Google:', error);
    }
  };

  const handleEmailSignUp = () => {
    navigate('/sign-up/email');
  };

  const handleSignInClick = () => {
    navigate('/sign-in');
  };

  return {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  };
}
</file>

<file path="src/pages/SignUpWithEmail/index.tsx">
import { useSignUpWithEmail } from './useSignUpWithEmail';
import { SignUpWithEmailPageView } from './SignUpWithEmailPage.view';

export function SignUpWithEmailPage() {
  const {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  } = useSignUpWithEmail();

  return (
    <SignUpWithEmailPageView
      step={step}
      email={email}
      password={password}
      verificationCode={verificationCode}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onPasswordChange={handlePasswordChange}
      onVerificationCodeChange={handleVerificationCodeChange}
      onBackToLogin={handleBackToLogin}
      onBackToEmail={handleBackToEmail}
      onBackToPassword={handleBackToPassword}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignUpWithEmailPage;
</file>

<file path="src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

type SignUpStep = 'email' | 'password' | 'verification';

interface SignUpWithEmailPageViewProps {
  step: SignUpStep;
  email: string;
  password: string;
  verificationCode: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onPasswordChange: (value: string) => void;
  onVerificationCodeChange: (value: string) => void;
  onBackToLogin: () => void;
  onBackToEmail: () => void;
  onBackToPassword: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignUpWithEmailPageView({
  step,
  email,
  password,
  verificationCode,
  error,
  isLoading,
  onEmailChange,
  onPasswordChange,
  onVerificationCodeChange,
  onBackToLogin,
  onBackToEmail,
  onBackToPassword,
  onSubmit,
  onContinueClick
}: SignUpWithEmailPageViewProps) {
  const getTitle = () => {
    switch (step) {
      case 'email':
        return "What's your email address?";
      case 'password':
        return 'Create your password';
      case 'verification':
        return 'Check your email';
    }
  };

  const getButtonText = () => {
    switch (step) {
      case 'email':
        return 'Continue with Email';
      case 'password':
        return 'Create Account';
      case 'verification':
        return 'Verify & Complete';
    }
  };

  const getPlaceholder = () => {
    switch (step) {
      case 'email':
        return 'Enter your email address...';
      case 'password':
        return 'Create a strong password...';
      case 'verification':
        return 'Enter 6-digit code...';
    }
  };

  const getCurrentValue = () => {
    switch (step) {
      case 'email':
        return email;
      case 'password':
        return password;
      case 'verification':
        return verificationCode;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch (step) {
      case 'email':
        onEmailChange(value);
        break;
      case 'password':
        onPasswordChange(value);
        break;
      case 'verification':
        onVerificationCodeChange(value);
        break;
    }
  };

  const getInputType = () => {
    switch (step) {
      case 'email':
        return 'email';
      case 'password':
        return 'password';
      case 'verification':
        return 'text';
    }
  };

  const isButtonDisabled = () => {
    const currentValue = getCurrentValue();
    return isLoading || !currentValue.trim();
  };

  const getBackButton = () => {
    switch (step) {
      case 'email':
        return (
          <button
            type="button"
            onClick={onBackToLogin}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to login
          </button>
        );
      case 'password':
        return (
          <button
            type="button"
            onClick={onBackToEmail}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to email
          </button>
        );
      case 'verification':
        return (
          <button
            type="button"
            onClick={onBackToPassword}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to password
          </button>
        );
    }
  };

  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          {getTitle()}
        </h1>

        {step === 'verification' && (
          <p className="text-sm text-gray-400 mb-4 text-center">
            We sent a verification code to {email}
          </p>
        )}

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type={getInputType()}
              value={getCurrentValue()}
              onChange={handleInputChange}
              placeholder={getPlaceholder()}
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {step === 'password' && (
              <p className="text-xs text-gray-500 mt-1">
                Password must be at least 8 characters with uppercase, lowercase, and number
              </p>
            )}

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isButtonDisabled()}
          >
            {getButtonText()}
          </SignInWithEmailButton>

        </form>

        {getBackButton()}

      </div>
    </main>
  );
}
</file>

<file path="src/pages/SignUpWithEmail/useSignUpWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schemas for validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

const passwordSchema = z.object({
  password: z
    .string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number')
});

const verificationCodeSchema = z.object({
  code: z
    .string()
    .min(6, 'Verification code must be 6 digits')
    .max(6, 'Verification code must be 6 digits')
});

type SignUpStep = 'email' | 'password' | 'verification';

export function useSignUpWithEmail() {
  const [step, setStep] = useState<SignUpStep>('email');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signUp, setActive } = useSignUp();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handlePasswordChange = (value: string) => {
    setPassword(value);
    if (error) {
      setError('');
    }
  };

  const handleVerificationCodeChange = (value: string) => {
    setVerificationCode(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleBackToEmail = () => {
    setStep('email');
    setPassword('');
    setError('');
  };

  const handleBackToPassword = () => {
    setStep('password');
    setVerificationCode('');
    setError('');
  };

  const checkEmailAndProceed = async () => {
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signUp?.create({
        emailAddress: email,
      });

      setStep('password');
    } catch (err: any) {
      console.error('Email check error:', err);

      // Check if it's an existing user error
      if (err.errors?.some((error: any) =>
        error.code === 'form_identifier_exists' ||
        error.code === 'form_identifier_not_found'
      )) {
        setError('This email is already registered. Please sign in instead.');
      } else {
        setError('An error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const createAccount = async () => {
    const validation = passwordSchema.safeParse({ password });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      // Create account with email and password
      await signUp?.update({
        password: password,
      });

      // Send verification email
      await signUp?.prepareEmailAddressVerification({ strategy: 'email_code' });

      setStep('verification');
    } catch (err: any) {
      console.error('Account creation error:', err);
      setError('Failed to create account. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const verifyEmailAndComplete = async () => {
    const validation = verificationCodeSchema.safeParse({ code: verificationCode });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      const result = await signUp?.attemptEmailAddressVerification({
        code: verificationCode,
      });


      // 이메일인증에 성공했을 때
      if (result?.status === 'complete' && result.createdSessionId) {
        console.log('reuslt', result);

        if (setActive) {
          await setActive({ session: result.createdSessionId });
          navigate('/setup-account');
        } else {
          console.error('setActive is not available');
          setError('Authentication setup failed. Please try again.');
        }
      }
    } catch (err: any) {
      console.error('Verification error:', err);
      setError('Invalid verification code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  const handleContinueClick = async () => {
    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  return {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  };
}
</file>

<file path="src/pages/SSOCallback/index.tsx">
import { useEffect } from 'react'
import { useClerk, useSession } from '@clerk/clerk-react'
import { useNavigate } from 'react-router-dom'

interface RedirectResult {
  createdSessionId?: string;
}

export default function SSOCallbackPage() {
  const { handleRedirectCallback } = useClerk();
  const { session, isLoaded } = useSession(); // isLoaded 추가
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        await handleRedirectCallback({
          afterSignInUrl: '/dashboard',
          afterSignUpUrl: '/setup-account'
        }) as RedirectResult;
      } catch (error) {
        console.error('SSO callback error:', error);
        navigate('/error');
      }
    })();
  }, []); 

  useEffect(() => {
    if (isLoaded && session) {
      console.log('Session is active, navigating...');
      navigate('/setup-account');
    }
  }, [isLoaded, session, navigate]);

  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">세션 확인 중...</p>
        </div>
      </div>
    );
  }

  // 로딩 UI
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600">인증 처리 중...</p>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/Unauthorized/index.tsx">
import { useNavigate } from 'react-router-dom';

export default function UnauthorizedPage() {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate('/');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center">
        <div className="mb-4">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg
              className="w-8 h-8 text-red-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z"
              />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-6">
            You don't have permission to access this page. Please contact an administrator if you believe this is an error.
          </p>
        </div>
        <button
          onClick={handleGoHome}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
        >
          Go to Home
        </button>
      </div>
    </div>
  );
}
</file>

<file path="src/schemas/user.schema.ts">
import { z } from 'zod';

// User profile response schema
export const userProfileSchema = z.object({
  id: z.string(),
  email: z.string().email(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  avatarUrl: z.string().url().optional(),
  role: z.string().optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).default('system'),
    language: z.string().default('en'),
    notifications: z.boolean().default(true),
  }).optional(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

// User profile update request schema
export const updateUserProfileSchema = z.object({
  firstName: z.string().min(1).optional(),
  lastName: z.string().min(1).optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).optional(),
    language: z.string().optional(),
    notifications: z.boolean().optional(),
  }).optional(),
});

// Infer TypeScript types from schemas
export type UserProfile = z.infer<typeof userProfileSchema>;
export type UpdateUserProfileRequest = z.infer<typeof updateUserProfileSchema>;
</file>

<file path="src/services/apiClient.ts">
import axios from 'axios';
import type { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { useAuthStore } from '../store/useAuthStore';

const apiClient: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

let getTokenFn: (() => Promise<string | null>) | null = null;

export function initializeApiClient(getToken: () => Promise<string | null>) {
  getTokenFn = getToken;
}

// Request interceptor to add authentication token
apiClient.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    if (getTokenFn) {
      try {
        const token = await getTokenFn();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
      } catch (error) {
        console.warn('Failed to get authentication token:', error);
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle authentication errors
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      // Clear auth state when authentication fails
      const { clearAuth } = useAuthStore.getState();
      clearAuth();

      // Redirect to sign-in page
      window.location.href = '/sign-in';
    }
    return Promise.reject(error);
  }
);

export default apiClient;
</file>

<file path="src/services/userService.ts">
import apiClient from './apiClient';
import { userProfileSchema, updateUserProfileSchema } from '../schemas/user.schema';
import type { UserProfile, UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Get current user's profile information
 */
export async function getUserProfile(): Promise<UserProfile> {
  const response = await apiClient.get('/users/profile');
  return userProfileSchema.parse(response.data);
}

/**
 * Update current user's profile information
 */
export async function updateUserProfile(data: UpdateUserProfileRequest): Promise<UserProfile> {
  // Validate request data
  const validatedData = updateUserProfileSchema.parse(data);

  const response = await apiClient.put('/users/profile', validatedData);
  return userProfileSchema.parse(response.data);
}

/**
 * Delete current user's account
 */
export async function deleteUserAccount(): Promise<void> {
  await apiClient.delete('/users/profile');
}

/**
 * Get user's activity statistics
 */
export async function getUserStats(): Promise<{
  problemsSolved: number;
  weeklyActivity: number[];
  streakDays: number;
  totalTimeSpent: number;
}> {
  const response = await apiClient.get('/users/stats');
  return response.data;
}
</file>

<file path="src/store/useAiNoteModalStore.ts">
import { create } from 'zustand';

export type ModalView = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  url?: string;
  title?: string;
  description?: string;
  inputOutput?: string;
  constraints?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisUnit {
  title: string;
  description: string;
  code: string;
  selected?: boolean;
}

interface AiNoteModalState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisUnit[];
  isLoading: boolean;
  error: string | null;
}

interface AiNoteModalActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ModalView) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (result: AnalysisUnit[]) => void;
  toggleAnalysisSelection: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetModal: () => void;
  startAnalysis: () => Promise<void>;
}

type AiNoteModalStore = AiNoteModalState & AiNoteModalActions;

const initialState: AiNoteModalState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {},
  submissionType: null,
  codeData: { code: '', language: 'javascript' },
  analysisResult: [],
  isLoading: false,
  error: null,
};

const generateDummyAnalysis = (): AnalysisUnit[] => [
  {
    title: "1. Initial Variable Declaration and Input Processing",
    description: "This section initializes variables required for the algorithm and reads data via standard input.",
    code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`,
    selected: false,
  },
  {
    title: "2. Core Logic: Dynamic Programming (DP)",
    description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
    code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`,
    selected: false,
  },
  {
    title: "3. Output Result",
    description: "This section outputs the final value from the calculated DP table in the specified format.",
    code: `console.log(dp[N]);`,
    selected: false,
  }
];

export const useAiNoteModalStore = create<AiNoteModalStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => {
    const { resetModal } = get();
    resetModal();
    set({ isModalOpen: false });
  },

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view) => set({ currentView: view }),

  setSubmissionType: (type) => set({ submissionType: type }),

  setProblemData: (data) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (result) => set({ analysisResult: result }),

  toggleAnalysisSelection: (index) =>
    set((state) => ({
      analysisResult: state.analysisResult.map((unit, i) =>
        i === index ? { ...unit, selected: !unit.selected } : unit
      ),
    })),

  setLoading: (loading) => set({ isLoading: loading }),

  setError: (error) => set({ error }),

  resetModal: () => set(initialState),

  startAnalysis: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate API call with 2-second delay
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const dummyAnalysis = generateDummyAnalysis();
      set({
        analysisResult: dummyAnalysis,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: 'Failed to analyze code. Please try again.',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="src/store/useAuthStore.ts">
import { create } from 'zustand';

export interface User {
  id: string;
  emailAddress: string;
  firstName?: string;
  lastName?: string;
  imageUrl?: string;
  publicMetadata: {
    role?: string;
  };
}

interface AuthState {
  isLoaded: boolean;
  isSignedIn: boolean;
  user: User | null;
  role: string | null;
}

interface AuthActions {
  setAuthState: (state: Partial<AuthState>) => void;
  setUser: (user: User | null) => void;
  clearAuth: () => void;
}

type AuthStore = AuthState & AuthActions;

const initialState: AuthState = {
  isLoaded: false,
  isSignedIn: false,
  user: null,
  role: null,
};

export const useAuthStore = create<AuthStore>((set) => ({
  ...initialState,

  setAuthState: (newState) =>
    set((state) => {
      const updatedState = { ...state, ...newState };
      // Extract role from user's publicMetadata when user is set
      if (newState.user) {
        updatedState.role = newState.user.publicMetadata?.role || null;
      }
      return updatedState;
    }),

  setUser: (user) =>
    set((state) => ({
      ...state,
      user,
      role: user?.publicMetadata?.role || null,
      isSignedIn: !!user,
    })),

  clearAuth: () => set(initialState),
}));
</file>

<file path="src/store/useIncorrectAnswerNoteStore.ts">
import { create } from 'zustand';

export type ViewType = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  title: string;
  description: string;
  inputCondition: string;
  outputCondition: string;
  constraints: string;
  url?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisResult {
  title: string;
  description: string;
  code: string;
}

interface IncorrectAnswerNoteState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
}

interface IncorrectAnswerNoteActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ViewType) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (results: AnalysisResult[]) => void;
  setSelectedAnalysisIndex: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetState: () => void;
  analyzeCode: () => Promise<void>;
}

type IncorrectAnswerNoteStore = IncorrectAnswerNoteState & IncorrectAnswerNoteActions;

const initialState: IncorrectAnswerNoteState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {
    title: '',
    description: '',
    inputCondition: '',
    outputCondition: '',
    constraints: '',
    url: '',
  },
  submissionType: null,
  codeData: {
    code: '',
    language: 'javascript',
  },
  analysisResult: [],
  selectedAnalysisIndex: 0,
  isLoading: false,
  error: null,
};

export const useIncorrectAnswerNoteStore = create<IncorrectAnswerNoteStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => set((state) => ({
    ...initialState,
    isModalOpen: false,
  })),

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view: ViewType) => set({ currentView: view }),

  setSubmissionType: (type: SubmissionType) => set({ submissionType: type }),

  setProblemData: (data: Partial<ProblemData>) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data: Partial<CodeData>) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (results: AnalysisResult[]) => set({ analysisResult: results }),

  setSelectedAnalysisIndex: (index: number) => set({ selectedAnalysisIndex: index }),

  setLoading: (loading: boolean) => set({ isLoading: loading }),

  setError: (error: string | null) => set({ error }),

  resetState: () => set(initialState),

  analyzeCode: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate 2-second loading
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate dummy analysis data
      const dummyAnalysis: AnalysisResult[] = [
        {
          title: "1. Initial Variable Declaration and Input Processing",
          description: "This section initializes variables required for the algorithm and reads data via standard input.",
          code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`
        },
        {
          title: "2. Core Logic: Dynamic Programming (DP)",
          description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
          code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`
        },
        {
          title: "3. Output Result",
          description: "This section outputs the final value from the calculated DP table in the specified format.",
          code: `console.log(dp[N]);`
        }
      ];

      set({
        analysisResult: dummyAnalysis,
        selectedAnalysisIndex: 0,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: error instanceof Error ? error.message : 'Analysis failed',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

</files>
</file>

<file path="apps/dashboard/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="apps/dashboard/src/components/AiNoteModal/AiNoteModal.view.tsx">
import { AnimatePresence, motion } from 'framer-motion';
import { AlertTriangle, X } from 'lucide-react';
import { type ModalView } from '../../store/useAiNoteModalStore';

interface AiNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  viewSizes: { width: string; height: string };
  children: React.ReactNode;
  onOverlayClick: () => void;
  onConfirmExit: () => void;
  onCancelExit: () => void;
}

export function AiNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  viewSizes,
  children,
  onOverlayClick,
  onConfirmExit,
  onCancelExit,
}: AiNoteModalViewProps) {
  return (
    <AnimatePresence>
      {isModalOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className="fixed inset-0 z-50 flex items-center justify-center"
        >
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container with Dynamic Sizing */}
          <motion.div
            layout
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className={`
              relative z-10 w-full mx-4 bg-white rounded-lg shadow-2xl
              transition-all duration-300 ease-in-out
              ${viewSizes.width} ${viewSizes.height}
            `}
          >
            {children}

            {/* Exit Confirmation Dialog */}
            <AnimatePresence>
              {isExitConfirmationVisible && (
                <>
                  {/* Overlay for confirmation dialog */}
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="absolute inset-0 bg-black/50 rounded-lg flex items-center justify-center z-20"
                  />

                  {/* Confirmation Dialog */}
                  <motion.div
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0.9, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                    className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
                               bg-white rounded-lg p-6 shadow-xl z-30 max-w-sm w-full mx-4"
                  >
                    <div className="flex items-center space-x-3 mb-4">
                      <AlertTriangle className="h-6 w-6 text-amber-500" />
                      <h3 className="text-lg font-semibold text-gray-900">
                        Confirm Exit
                      </h3>
                    </div>

                    <p className="text-gray-600 mb-6">
                      Are you sure you want to exit? Any unsaved progress will be lost.
                    </p>

                    <div className="flex space-x-3">
                      <button
                        onClick={onCancelExit}
                        className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md
                                 hover:bg-gray-50 transition duration-200"
                      >
                        Cancel
                      </button>
                      <button
                        onClick={onConfirmExit}
                        className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md
                                 hover:bg-red-700 transition duration-200"
                      >
                        Confirm
                      </button>
                    </div>
                  </motion.div>
                </>
              )}
            </AnimatePresence>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/index.tsx">
import { useAiNoteModal } from './useAiNoteModal';
import { AiNoteModalView } from './AiNoteModal.view';
import { ChoiceView } from './views/ChoiceView';
import { UrlInputView } from './views/UrlInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';

export function AiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  } = useAiNoteModal();

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView />;
      case 'URL_INPUT':
        return <UrlInputView />;
      case 'MANUAL_INPUT':
        return <ManualInputView />;
      case 'CODE_INPUT':
        return <CodeInputView />;
      case 'RESULTS':
        return <ResultsView />;
      default:
        return <ChoiceView />;
    }
  };

  return (
    <AiNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      viewSizes={viewSizes}
      onOverlayClick={handleOverlayClick}
      onConfirmExit={handleConfirmExit}
      onCancelExit={handleCancelExit}
    >
      {renderCurrentView()}
    </AiNoteModalView>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/useAiNoteModal.ts">
import { useEffect } from 'react';
import { useAiNoteModalStore, type ModalView } from '../../store/useAiNoteModalStore';

const VIEW_SIZES: Record<ModalView, { width: string; height: string }> = {
  CHOICE: { width: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { width: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { width: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { width: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { width: 'max-w-5xl', height: 'h-[700px]' }
};

export function useAiNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
  } = useAiNoteModalStore();

  const viewSizes = VIEW_SIZES[currentView];

  const handleOverlayClick = () => {
    if (!isExitConfirmationVisible) {
      showExitConfirmation();
    }
  };

  const handleConfirmExit = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleCancelExit = () => {
    hideExitConfirmation();
  };

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (isModalOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isModalOpen]);

  // Close on Escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isModalOpen && !isExitConfirmationVisible) {
        showExitConfirmation();
      }
    };

    if (isModalOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isModalOpen, isExitConfirmationVisible, showExitConfirmation]);

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    viewSizes,
    handleOverlayClick,
    handleConfirmExit,
    handleCancelExit,
  };
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ChoiceView/ChoiceView.view.tsx">
import { Link, Edit } from 'lucide-react';

interface ChoiceViewProps {
  onUrlChoice: () => void;
  onManualChoice: () => void;
}

export function ChoiceViewComponent({ onUrlChoice, onManualChoice }: ChoiceViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Select Problem Registration Method
        </h2>
        <p className="text-gray-600">
          Choose how you would like to register your algorithm problem
        </p>
      </div>

      {/* Choice Cards */}
      <div className="flex-1 flex flex-col space-y-4">
        {/* URL Registration Card */}
        <button
          onClick={onUrlChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500
                   hover:bg-blue-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-blue-100 rounded-lg group-hover:bg-blue-200 transition duration-200">
              <Link className="h-6 w-6 text-blue-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Register by URL
              </h3>
              <p className="text-gray-600 mb-2">
                Register problem using Baekjoon URL link
              </p>
              <p className="text-sm text-blue-600 font-medium">
                Only Baekjoon Online Judge allowed
              </p>
            </div>
          </div>
        </button>

        {/* Manual Registration Card */}
        <button
          onClick={onManualChoice}
          className="flex-1 p-6 border-2 border-gray-200 rounded-lg hover:border-green-500
                   hover:bg-green-50 transition duration-200 text-left group"
        >
          <div className="flex items-start space-x-4">
            <div className="p-3 bg-green-100 rounded-lg group-hover:bg-green-200 transition duration-200">
              <Edit className="h-6 w-6 text-green-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Manual Input
              </h3>
              <p className="text-gray-600">
                Manually input problem information
              </p>
            </div>
          </div>
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ChoiceView/index.tsx">
import { useChoiceView } from './useChoiceView';
import { ChoiceViewComponent } from './ChoiceView.view';

export function ChoiceView() {
  const { handleUrlChoice, handleManualChoice } = useChoiceView();

  return (
    <ChoiceViewComponent
      onUrlChoice={handleUrlChoice}
      onManualChoice={handleManualChoice}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ChoiceView/useChoiceView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useChoiceView() {
  const { setSubmissionType, setCurrentView } = useAiNoteModalStore();

  const handleUrlChoice = () => {
    setSubmissionType('url');
    setCurrentView('URL_INPUT');
  };

  const handleManualChoice = () => {
    setSubmissionType('manual');
    setCurrentView('MANUAL_INPUT');
  };

  return {
    handleUrlChoice,
    handleManualChoice,
  };
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/CodeInputView/CodeInputView.view.tsx">
import { ArrowLeft, Loader2 } from 'lucide-react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { vscodeDark } from '@uiw/codemirror-theme-vscode';
import { EditorView } from '@codemirror/view';

interface LanguageOption {
  value: string;
  label: string;
  extension: string;
}

interface CodeInputViewProps {
  code: string;
  language: string;
  isLoading: boolean;
  error: string | null;
  languageOptions: LanguageOption[];
  onCodeChange: (code: string) => void;
  onLanguageChange: (language: string) => void;
  onAnalyze: () => void;
  onBack: () => void;
}

const getLanguageExtension = (language: string) => {
  switch (language) {
    case 'javascript':
      return javascript();
    case 'python':
      return python();
    case 'java':
      return java();
    case 'cpp':
    case 'c':
      return cpp();
    default:
      return javascript();
  }
};

export function CodeInputViewComponent({
  code,
  language,
  isLoading,
  error,
  languageOptions,
  onCodeChange,
  onLanguageChange,
  onAnalyze,
  onBack,
}: CodeInputViewProps) {
  const extensions = [
    getLanguageExtension(language),
    EditorView.theme({
      '&': {
        fontSize: '14px',
      },
      '.cm-focused': {
        outline: 'none',
      },
    }),
  ];

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Code Input
        </h2>
        <p className="text-gray-600">
          Please enter the code that solved the problem.
        </p>
      </div>

      {/* Language Selection */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Programming Language
        </label>
        <select
          value={language}
          onChange={(e) => onLanguageChange(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-md bg-white
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                   transition duration-200"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Solution Code
        </label>
        <div className={`
          border rounded-lg overflow-hidden
          ${error ? 'border-red-300' : 'border-gray-300'}
        `}>
          <CodeMirror
            value={code}
            onChange={onCodeChange}
            extensions={extensions}
            theme={vscodeDark}
            placeholder="Enter your solution code here..."
            className="h-80"
          />
        </div>

        {error && (
          <p className="mt-2 text-sm text-red-600">
            {error}
          </p>
        )}
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          disabled={isLoading}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200
                   disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onAnalyze}
          disabled={!code.trim() || isLoading}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              <span>Analyzing...</span>
            </>
          ) : (
            <span>Analyze</span>
          )}
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/CodeInputView/index.tsx">
import { useCodeInputView } from './useCodeInputView';
import { CodeInputViewComponent } from './CodeInputView.view';

export function CodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    languageOptions,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  } = useCodeInputView();

  return (
    <CodeInputViewComponent
      code={codeData.code}
      language={codeData.language}
      isLoading={isLoading}
      error={error}
      languageOptions={languageOptions}
      onCodeChange={handleCodeChange}
      onLanguageChange={handleLanguageChange}
      onAnalyze={handleAnalyze}
      onBack={handleBack}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/CodeInputView/useCodeInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

const LANGUAGE_OPTIONS = [
  { value: 'javascript', label: 'JavaScript', extension: 'js' },
  { value: 'python', label: 'Python', extension: 'py' },
  { value: 'java', label: 'Java', extension: 'java' },
  { value: 'cpp', label: 'C++', extension: 'cpp' },
  { value: 'c', label: 'C', extension: 'c' },
];

export function useCodeInputView() {
  const {
    codeData,
    isLoading,
    error,
    setCodeData,
    setCurrentView,
    startAnalysis,
  } = useAiNoteModalStore();

  const [validationError, setValidationError] = useState<string | null>(null);

  const handleCodeChange = (code: string) => {
    setCodeData({ code });
    if (validationError) {
      setValidationError(null);
    }
  };

  const handleLanguageChange = (language: string) => {
    setCodeData({ language });
  };

  const handleAnalyze = async () => {
    if (!codeData.code.trim()) {
      setValidationError('Please enter your solution code');
      return;
    }

    await startAnalysis();
  };

  const handleBack = () => {
    const { submissionType } = useAiNoteModalStore.getState();
    setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  return {
    codeData,
    isLoading,
    error: error || validationError,
    languageOptions: LANGUAGE_OPTIONS,
    handleCodeChange,
    handleLanguageChange,
    handleAnalyze,
    handleBack,
  };
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ManualInputView/index.tsx">
import { useManualInputView } from './useManualInputView';
import { ManualInputViewComponent } from './ManualInputView.view';

export function ManualInputView() {
  const {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  } = useManualInputView();

  return (
    <ManualInputViewComponent
      formData={formData}
      errors={errors}
      onInputChange={handleInputChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ManualInputView/ManualInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

interface ManualInputViewProps {
  formData: FormData;
  errors: Partial<FormData>;
  onInputChange: (field: keyof FormData, value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function ManualInputViewComponent({
  formData,
  errors,
  onInputChange,
  onNext,
  onBack,
}: ManualInputViewProps) {
  const hasRequiredFields = formData.title.trim() && formData.description.trim() && formData.inputOutput.trim();

  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Manual Problem Information Input
        </h2>
        <p className="text-gray-600">
          Please enter the detailed problem information directly.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        <div className="space-y-6 w-4/5 mx-auto">
          {/* Problem Title */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Title *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => onInputChange('title', e.target.value)}
              placeholder="Enter problem title"
              className={`
                w-full px-4 py-3 border rounded-lg
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.title
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* Problem Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Problem Description *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => onInputChange('description', e.target.value)}
              placeholder="Enter detailed problem description"
              rows={8}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.description
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description}</p>
            )}
          </div>

          {/* Input/Output Conditions */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Input/Output Conditions *
            </label>
            <textarea
              value={formData.inputOutput}
              onChange={(e) => onInputChange('inputOutput', e.target.value)}
              placeholder="Enter input and output format specifications"
              rows={4}
              className={`
                w-full px-4 py-3 border rounded-lg resize-none
                focus:outline-none focus:ring-2 transition duration-200
                ${errors.inputOutput
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            {errors.inputOutput && (
              <p className="mt-1 text-sm text-red-600">{errors.inputOutput}</p>
            )}
          </div>

          {/* Constraints */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Constraints
            </label>
            <input
              type="text"
              value={formData.constraints}
              onChange={(e) => onInputChange('constraints', e.target.value)}
              placeholder="Enter problem constraints (optional)"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg
                       focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                       transition duration-200"
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-6">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!hasRequiredFields}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ManualInputView/useManualInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

interface FormData {
  title: string;
  description: string;
  inputOutput: string;
  constraints: string;
}

export function useManualInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();

  const [formData, setFormData] = useState<FormData>({
    title: problemData.title || '',
    description: problemData.description || '',
    inputOutput: problemData.inputOutput || '',
    constraints: problemData.constraints || '',
  });

  const [errors, setErrors] = useState<Partial<FormData>>({});

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<FormData> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Problem title is required';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Problem description is required';
    }

    if (!formData.inputOutput.trim()) {
      newErrors.inputOutput = 'Input/Output conditions are required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateForm()) {
      setProblemData({
        title: formData.title.trim(),
        description: formData.description.trim(),
        inputOutput: formData.inputOutput.trim(),
        constraints: formData.constraints.trim(),
      });
      setCurrentView('CODE_INPUT');
    }
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    formData,
    errors,
    handleInputChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ResultsView/index.tsx">
import { useResultsView } from './useResultsView';
import { ResultsViewComponent } from './ResultsView.view';

export function ResultsView() {
  const {
    analysisResult,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  } = useResultsView();

  return (
    <ResultsViewComponent
      analysisResult={analysisResult}
      hasSelectedUnits={hasSelectedUnits}
      onUnitToggle={handleUnitToggle}
      onGenerate={handleGenerate}
      onBack={handleBack}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ResultsView/ResultsView.view.tsx">
import { ArrowLeft, Check } from 'lucide-react';
import { type AnalysisUnit } from '../../../../store/useAiNoteModalStore';

interface ResultsViewProps {
  analysisResult: AnalysisUnit[];
  hasSelectedUnits: boolean;
  onUnitToggle: (index: number) => void;
  onGenerate: () => void;
  onBack: () => void;
}

export function ResultsViewComponent({
  analysisResult,
  hasSelectedUnits,
  onUnitToggle,
  onGenerate,
  onBack,
}: ResultsViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <p className="text-gray-600">
          AI has analyzed your code into logical units. Select the parts you want to focus on.
        </p>
      </div>

      {/* Analysis Results */}
      <div className="flex-1 overflow-y-auto space-y-4 scrollbar-thin scrollbar-track-gray-200 scrollbar-thumb-gray-400">
        {analysisResult.map((unit, index) => (
          <div
            key={index}
            className={`
              border-2 rounded-lg p-4 cursor-pointer transition duration-200
              ${unit.selected
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300'
              }
            `}
            onClick={() => onUnitToggle(index)}
          >
            <div className="flex items-start space-x-3">
              {/* Checkbox */}
              <div className={`
                w-5 h-5 rounded border-2 flex items-center justify-center mt-1
                transition duration-200
                ${unit.selected
                  ? 'border-blue-500 bg-blue-500'
                  : 'border-gray-300'
                }
              `}>
                {unit.selected && (
                  <Check className="h-3 w-3 text-white" />
                )}
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {unit.title}
                </h3>
                <p className="text-gray-600 mb-3">
                  {unit.description}
                </p>

                {/* Code Block */}
                <div className="bg-gray-900 rounded-md p-3 overflow-x-auto">
                  <pre className="text-sm text-gray-100">
                    <code>{unit.code}</code>
                  </pre>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Selection Summary */}
      {hasSelectedUnits && (
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-800">
            {analysisResult.filter(unit => unit.selected).length} logic unit(s) selected
          </p>
        </div>
      )}

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t mt-4">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onGenerate}
          disabled={!hasSelectedUnits}
          className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md
                   hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          Generate Note with Selected Logic
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/ResultsView/useResultsView.ts">
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useResultsView() {
  const {
    analysisResult,
    toggleAnalysisSelection,
    closeModal,
    setCurrentView,
  } = useAiNoteModalStore();

  const selectedUnits = analysisResult.filter(unit => unit.selected);
  const hasSelectedUnits = selectedUnits.length > 0;

  const handleUnitToggle = (index: number) => {
    toggleAnalysisSelection(index);
  };

  const handleGenerate = () => {
    // In a real implementation, this would send the selected logic to the backend
    console.log('Generating notes with selected logic:', selectedUnits);

    // For now, just close the modal with success
    alert(`Generated incorrect answer notes for ${selectedUnits.length} selected logic units!`);
    closeModal();
  };

  const handleBack = () => {
    setCurrentView('CODE_INPUT');
  };

  return {
    analysisResult,
    selectedUnits,
    hasSelectedUnits,
    handleUnitToggle,
    handleGenerate,
    handleBack,
  };
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/UrlInputView/index.tsx">
import { useUrlInputView } from './useUrlInputView';
import { UrlInputViewComponent } from './UrlInputView.view';

export function UrlInputView() {
  const {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  } = useUrlInputView();

  return (
    <UrlInputViewComponent
      url={url}
      error={error}
      onUrlChange={handleUrlChange}
      onNext={handleNext}
      onBack={handleBack}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/UrlInputView/UrlInputView.view.tsx">
import { ArrowLeft, ArrowRight } from 'lucide-react';

interface UrlInputViewProps {
  url: string;
  error: string | null;
  onUrlChange: (value: string) => void;
  onNext: () => void;
  onBack: () => void;
}

export function UrlInputViewComponent({
  url,
  error,
  onUrlChange,
  onNext,
  onBack,
}: UrlInputViewProps) {
  return (
    <div className="p-6 h-full flex flex-col">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Register Problem Link (URL)
        </h2>
        <p className="text-gray-600">
          Please enter the full URL of the problem to register.
        </p>
      </div>

      {/* Form */}
      <div className="flex-1 flex flex-col">
        <div className="mb-6">
          <div className="relative">
            <input
              type="url"
              value={url}
              onChange={(e) => onUrlChange(e.target.value)}
              placeholder="https://www.acmicpc.net/problem/1000"
              className={`
                w-full px-4 py-3 border rounded-lg bg-gray-50
                focus:outline-none focus:ring-2 focus:bg-white transition duration-200
                ${error
                  ? 'border-red-300 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
                }
              `}
            />
            <label className={`
              absolute left-4 transition-all duration-200 pointer-events-none
              ${url
                ? '-top-2 text-xs bg-white px-1 text-blue-600'
                : 'top-3 text-gray-500'
              }
            `}>
              Problem Link
            </label>
          </div>

          {error && (
            <p className="mt-2 text-sm text-red-600">
              {error}
            </p>
          )}
        </div>

        {/* Example */}
        <div className="mb-8 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">Example:</h4>
          <code className="text-sm text-blue-700">
            https://www.acmicpc.net/problem/1000
          </code>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 px-4 py-2 border border-gray-300
                   text-gray-700 rounded-md hover:bg-gray-50 transition duration-200"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back</span>
        </button>

        <button
          onClick={onNext}
          disabled={!url.trim()}
          className="flex-1 flex items-center justify-center space-x-2 px-4 py-2
                   bg-blue-600 text-white rounded-md hover:bg-blue-700
                   disabled:bg-gray-300 disabled:cursor-not-allowed
                   transition duration-200"
        >
          <span>Next</span>
          <ArrowRight className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/AiNoteModal/views/UrlInputView/useUrlInputView.ts">
import { useState } from 'react';
import { useAiNoteModalStore } from '../../../../store/useAiNoteModalStore';

export function useUrlInputView() {
  const { problemData, setProblemData, setCurrentView } = useAiNoteModalStore();
  const [url, setUrl] = useState(problemData.url || '');
  const [error, setError] = useState<string | null>(null);

  const validateBaekjoonUrl = (url: string): boolean => {
    const baekjoonPattern = /^https?:\/\/(www\.)?acmicpc\.net\/problem\/\d+\/?$/;
    return baekjoonPattern.test(url);
  };

  const handleUrlChange = (value: string) => {
    setUrl(value);
    if (error) {
      setError(null);
    }
  };

  const handleNext = () => {
    if (!url.trim()) {
      setError('Please enter a problem URL');
      return;
    }

    if (!validateBaekjoonUrl(url)) {
      setError('Please enter a valid Baekjoon Online Judge URL (e.g., https://www.acmicpc.net/problem/1000)');
      return;
    }

    setProblemData({ url: url.trim() });
    setCurrentView('CODE_INPUT');
  };

  const handleBack = () => {
    setCurrentView('CHOICE');
  };

  return {
    url,
    error,
    handleUrlChange,
    handleNext,
    handleBack,
  };
}
</file>

<file path="apps/dashboard/src/components/AuthProvider/AuthProvider.view.tsx">
import type { ReactNode } from 'react';

interface AuthProviderViewProps {
  children: ReactNode;
  isLoaded: boolean;
}

export function AuthProviderView({ children, isLoaded }: AuthProviderViewProps) {
  // Show loading indicator while Clerk initializes
  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return <>{children}</>;
}
</file>

<file path="apps/dashboard/src/components/AuthProvider/index.tsx">
import type { ReactNode } from 'react';
import { useAuthProvider } from './useAuthProvider';
import { AuthProviderView } from './AuthProvider.view';

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const { isLoaded } = useAuthProvider();

  return <AuthProviderView isLoaded={isLoaded}>{children}</AuthProviderView>;
}
</file>

<file path="apps/dashboard/src/components/AuthProvider/useAuthProvider.ts">
import { useEffect } from 'react';
import { useAuth, useUser } from '@clerk/clerk-react';
import { useAuthStore } from '../../store/useAuthStore';
import type { User } from '../../store/useAuthStore';

export function useAuthProvider() {
  const { isLoaded: clerkIsLoaded, isSignedIn: clerkIsSignedIn } = useAuth();
  const { user: clerkUser } = useUser();
  const { setAuthState, setUser, clearAuth } = useAuthStore();

  useEffect(() => {
    // Sync Clerk auth state with Zustand store
    setAuthState({
      isLoaded: clerkIsLoaded,
      isSignedIn: clerkIsSignedIn,
    });

    if (clerkIsLoaded) {
      if (clerkIsSignedIn && clerkUser) {
        // Transform Clerk user to our User interface
        const user: User = {
          id: clerkUser.id,
          emailAddress: clerkUser.primaryEmailAddress?.emailAddress || '',
          firstName: clerkUser.firstName || undefined,
          lastName: clerkUser.lastName || undefined,
          imageUrl: clerkUser.imageUrl || undefined,
          publicMetadata: {
            role: clerkUser.publicMetadata?.role as string | undefined,
          },
        };
        setUser(user);
      } else {
        clearAuth();
      }
    }
  }, [clerkIsLoaded, clerkIsSignedIn, clerkUser, setAuthState, setUser, clearAuth]);

  return {
    isLoaded: clerkIsLoaded,
  };
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/IncorrectAnswerNoteModal.view.tsx">
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, X } from 'lucide-react';
import { ChoiceView } from './views/ChoiceView';
import { URLInputView } from './views/URLInputView';
import { ManualInputView } from './views/ManualInputView';
import { CodeInputView } from './views/CodeInputView';
import { ResultsView } from './views/ResultsView';
import type { ViewType } from '../../store/useIncorrectAnswerNoteStore';

interface IncorrectAnswerNoteModalViewProps {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: any;
  submissionType: 'url' | 'manual' | null;
  codeData: any;
  analysisResult: any[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
  onOverlayClick: () => void;
  onExitConfirm: () => void;
  onExitCancel: () => void;
  onBackClick: () => void;
  onChoiceSelect: (type: 'url' | 'manual') => void;
  onNext: () => void;
  onAnalyze: () => void;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
  onProblemDataChange: (data: any) => void;
  onCodeDataChange: (data: any) => void;
}

const modalSizes = {
  CHOICE: { maxWidth: 'max-w-2xl', height: 'h-[420px]' },
  URL_INPUT: { maxWidth: 'max-w-xl', height: 'h-[380px]' },
  MANUAL_INPUT: { maxWidth: 'max-w-3xl', height: 'h-[650px]' },
  CODE_INPUT: { maxWidth: 'max-w-4xl', height: 'h-[650px]' },
  RESULTS: { maxWidth: 'max-w-5xl', height: 'h-[700px]' },
};

export function IncorrectAnswerNoteModalView({
  isModalOpen,
  isExitConfirmationVisible,
  currentView,
  problemData,
  submissionType,
  codeData,
  analysisResult,
  selectedAnalysisIndex,
  isLoading,
  error,
  onOverlayClick,
  onExitConfirm,
  onExitCancel,
  onBackClick,
  onChoiceSelect,
  onNext,
  onAnalyze,
  onAnalysisSelect,
  onGenerateNote,
  onProblemDataChange,
  onCodeDataChange,
}: IncorrectAnswerNoteModalViewProps) {
  const canShowBack = currentView !== 'CHOICE';
  const currentSize = modalSizes[currentView];

  const renderCurrentView = () => {
    switch (currentView) {
      case 'CHOICE':
        return <ChoiceView onChoiceSelect={onChoiceSelect} />;
      case 'URL_INPUT':
        return (
          <URLInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'MANUAL_INPUT':
        return (
          <ManualInputView
            problemData={problemData}
            onProblemDataChange={onProblemDataChange}
            onNext={onNext}
          />
        );
      case 'CODE_INPUT':
        return (
          <CodeInputView
            codeData={codeData}
            onCodeDataChange={onCodeDataChange}
            onAnalyze={onAnalyze}
            isLoading={isLoading}
          />
        );
      case 'RESULTS':
        return (
          <ResultsView
            analysisResult={analysisResult}
            selectedAnalysisIndex={selectedAnalysisIndex}
            onAnalysisSelect={onAnalysisSelect}
            onGenerateNote={onGenerateNote}
          />
        );
      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      {isModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Overlay */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 bg-black/80"
            onClick={onOverlayClick}
          />

          {/* Modal Container */}
          <motion.div
            layout
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', duration: 0.3 }}
            className={`relative bg-gray-900 rounded-xl shadow-2xl ${currentSize.maxWidth} ${currentSize.height} transition-all duration-300 ease-in-out`}
          >
            {/* Back Button */}
            {canShowBack && (
              <button
                onClick={onBackClick}
                className="absolute top-6 left-6 z-10 p-2 rounded-full text-gray-400 hover:bg-gray-800 hover:text-white transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
            )}

            {/* Loading Overlay */}
            {isLoading && (
              <div className="absolute inset-0 bg-gray-900/80 flex items-center justify-center z-20 rounded-xl">
                <div className="flex flex-col items-center gap-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500" />
                  <p className="text-white text-lg">Analyzing your code...</p>
                </div>
              </div>
            )}

            {/* Error Display */}
            {error && (
              <div className="absolute top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-md z-20">
                {error}
              </div>
            )}

            {/* Modal Content */}
            <div className="h-full flex flex-col">
              {renderCurrentView()}
            </div>
          </motion.div>

          {/* Exit Confirmation Dialog */}
          <AnimatePresence>
            {isExitConfirmationVisible && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="absolute inset-0 bg-black/60 flex items-center justify-center z-60"
              >
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                  className="bg-gray-800 rounded-lg p-6 max-w-md mx-4"
                >
                  <div className="flex items-center gap-3 mb-4">
                    <X className="w-6 h-6 text-red-400" />
                    <h3 className="text-lg font-semibold text-white">Confirm Exit</h3>
                  </div>
                  <p className="text-gray-300 mb-6">
                    Are you sure you want to cancel the operation and exit?
                  </p>
                  <div className="flex gap-3">
                    <button
                      onClick={onExitCancel}
                      className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={onExitConfirm}
                      className="flex-1 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                    >
                      Confirm
                    </button>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/index.tsx">
import { useIncorrectAnswerNoteModal } from './useIncorrectAnswerNoteModal';
import { IncorrectAnswerNoteModalView } from './IncorrectAnswerNoteModal.view';

export function IncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  } = useIncorrectAnswerNoteModal();

  return (
    <IncorrectAnswerNoteModalView
      isModalOpen={isModalOpen}
      isExitConfirmationVisible={isExitConfirmationVisible}
      currentView={currentView}
      problemData={problemData}
      submissionType={submissionType}
      codeData={codeData}
      analysisResult={analysisResult}
      selectedAnalysisIndex={selectedAnalysisIndex}
      isLoading={isLoading}
      error={error}
      onOverlayClick={handleOverlayClick}
      onExitConfirm={handleExitConfirm}
      onExitCancel={handleExitCancel}
      onBackClick={handleBackClick}
      onChoiceSelect={handleChoiceSelect}
      onNext={handleNextClick}
      onAnalyze={handleAnalyzeClick}
      onAnalysisSelect={handleAnalysisSelect}
      onGenerateNote={handleGenerateNote}
      onProblemDataChange={setProblemData}
      onCodeDataChange={setCodeData}
    />
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/useIncorrectAnswerNoteModal.ts">
import { useIncorrectAnswerNoteStore } from '../../store/useIncorrectAnswerNoteStore';

export function useIncorrectAnswerNoteModal() {
  const {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    closeModal,
    showExitConfirmation,
    hideExitConfirmation,
    setCurrentView,
    setSubmissionType,
    setProblemData,
    setCodeData,
    setSelectedAnalysisIndex,
    analyzeCode,
  } = useIncorrectAnswerNoteStore();

  const handleOverlayClick = () => {
    showExitConfirmation();
  };

  const handleExitConfirm = () => {
    hideExitConfirmation();
    closeModal();
  };

  const handleExitCancel = () => {
    hideExitConfirmation();
  };

  const handleBackClick = () => {
    switch (currentView) {
      case 'URL_INPUT':
      case 'MANUAL_INPUT':
        setCurrentView('CHOICE');
        break;
      case 'CODE_INPUT':
        setCurrentView(submissionType === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
        break;
      case 'RESULTS':
        setCurrentView('CODE_INPUT');
        break;
      default:
        break;
    }
  };

  const handleChoiceSelect = (type: 'url' | 'manual') => {
    setSubmissionType(type);
    setCurrentView(type === 'url' ? 'URL_INPUT' : 'MANUAL_INPUT');
  };

  const handleNextClick = () => {
    if (currentView === 'URL_INPUT' || currentView === 'MANUAL_INPUT') {
      setCurrentView('CODE_INPUT');
    }
  };

  const handleAnalyzeClick = () => {
    analyzeCode();
  };

  const handleAnalysisSelect = (index: number) => {
    setSelectedAnalysisIndex(index);
  };

  const handleGenerateNote = () => {
    if (analysisResult.length > 0 && analysisResult[selectedAnalysisIndex]) {
      const selectedLogic = analysisResult[selectedAnalysisIndex];
      console.log({
        title: selectedLogic.title,
        description: selectedLogic.description,
        code: selectedLogic.code,
      });
    }
  };

  return {
    isModalOpen,
    isExitConfirmationVisible,
    currentView,
    problemData,
    submissionType,
    codeData,
    analysisResult,
    selectedAnalysisIndex,
    isLoading,
    error,
    handleOverlayClick,
    handleExitConfirm,
    handleExitCancel,
    handleBackClick,
    handleChoiceSelect,
    handleNextClick,
    handleAnalyzeClick,
    handleAnalysisSelect,
    handleGenerateNote,
    setProblemData,
    setCodeData,
  };
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ChoiceView.tsx">
import { Link, Bell } from 'lucide-react';

interface ChoiceViewProps {
  onChoiceSelect: (type: 'url' | 'manual') => void;
}

export function ChoiceView({ onChoiceSelect }: ChoiceViewProps) {
  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Please register the problem first
      </h2>
      <div className="grid grid-cols-2 gap-6">
        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('url')}
        >
          <Link className="w-12 h-12 text-blue-400" />
          <h3 className="text-lg font-semibold text-white">Register by URL</h3>
          <p className="text-gray-300 text-sm">
            Register problem using Baekjoon URL link
          </p>
          <p className="text-gray-400 text-xs">
            Only Baekjoon Online Judge allowed
          </p>
        </div>

        <div
          className="bg-gray-800 rounded-xl border border-gray-700 p-6 flex flex-col items-center text-center gap-4 cursor-pointer transition-all duration-300 hover:border-blue-500 hover:-translate-y-1"
          onClick={() => onChoiceSelect('manual')}
        >
          <Bell className="w-12 h-12 text-green-400" />
          <h3 className="text-lg font-semibold text-white">Manual Input</h3>
          <p className="text-gray-300 text-sm">
            Manually enter problem information
          </p>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/views/CodeInputView.tsx">
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { java } from '@codemirror/lang-java';
import { cpp } from '@codemirror/lang-cpp';
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import type { CodeData } from '../../../store/useIncorrectAnswerNoteStore';

interface CodeInputViewProps {
  codeData: CodeData;
  onCodeDataChange: (data: Partial<CodeData>) => void;
  onAnalyze: () => void;
  isLoading: boolean;
}

const languageExtensions = {
  javascript: javascript(),
  python: python(),
  java: java(),
  cpp: cpp(),
};

const languageOptions = [
  { value: 'javascript', label: 'JavaScript' },
  { value: 'python', label: 'Python' },
  { value: 'java', label: 'Java' },
  { value: 'cpp', label: 'C++' },
];

export function CodeInputView({ codeData, onCodeDataChange, onAnalyze, isLoading }: CodeInputViewProps) {
  const handleLanguageChange = (language: string) => {
    onCodeDataChange({ language });
  };

  const handleCodeChange = (code: string) => {
    onCodeDataChange({ code });
  };

  const handleSubmit = () => {
    if (codeData.code.trim()) {
      onAnalyze();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Code Input
      </h2>

      {/* Language Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Select Language
        </label>
        <select
          value={codeData.language}
          onChange={(e) => handleLanguageChange(e.target.value)}
          className="w-48 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:border-blue-500 transition-colors"
        >
          {languageOptions.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Code Editor */}
      <div className="flex-1 mb-6">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Your Solution Code
        </label>
        <div className="h-[350px] border border-gray-600 rounded-md overflow-hidden">
          <CodeMirror
            value={codeData.code}
            onChange={handleCodeChange}
            extensions={[languageExtensions[codeData.language as keyof typeof languageExtensions] || javascript()]}
            theme={oneDark}
            placeholder={`Enter your ${languageOptions.find(opt => opt.value === codeData.language)?.label || 'JavaScript'} code here...`}
            basicSetup={{
              lineNumbers: true,
              foldGutter: true,
              dropCursor: false,
              allowMultipleSelections: false,
              indentOnInput: true,
              bracketMatching: true,
              closeBrackets: true,
              autocompletion: true,
              highlightSelectionMatches: false,
            }}
            style={{ fontSize: '14px' }}
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!codeData.code.trim() || isLoading}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        {isLoading ? 'Analyzing...' : 'Analyze'}
      </button>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ManualInputView.tsx">
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface ManualInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function ManualInputView({ problemData, onProblemDataChange, onNext }: ManualInputViewProps) {
  const handleInputChange = (field: keyof ProblemData, value: string) => {
    onProblemDataChange({ [field]: value });
  };

  const handleSubmit = () => {
    if (problemData.title.trim() && problemData.description.trim()) {
      onNext();
    }
  };

  const isFormValid = problemData.title.trim() && problemData.description.trim();

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Manual Problem Information Input
      </h2>

      <div className="flex-1 overflow-y-auto space-y-4 mb-6" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
        {/* Problem Title */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Title *
          </label>
          <input
            type="text"
            value={problemData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Enter problem title"
          />
        </div>

        {/* Problem Description */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Problem Description *
          </label>
          <textarea
            value={problemData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            className="w-full h-40 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Enter detailed problem description"
          />
        </div>

        {/* Input Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Input Conditions
          </label>
          <textarea
            value={problemData.inputCondition}
            onChange={(e) => handleInputChange('inputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe input format and constraints"
          />
        </div>

        {/* Output Conditions */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Output Conditions
          </label>
          <textarea
            value={problemData.outputCondition}
            onChange={(e) => handleInputChange('outputCondition', e.target.value)}
            className="w-full h-24 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors resize-none"
            placeholder="Describe expected output format"
          />
        </div>

        {/* Constraints */}
        <div className="w-4/5 mx-auto">
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Constraints
          </label>
          <input
            type="text"
            value={problemData.constraints}
            onChange={(e) => handleInputChange('constraints', e.target.value)}
            className="w-full h-10 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Time and memory limits, data ranges"
          />
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!isFormValid}
        className="w-full bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/views/ResultsView.tsx">
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import type { AnalysisResult } from '../../../store/useIncorrectAnswerNoteStore';

interface ResultsViewProps {
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  onAnalysisSelect: (index: number) => void;
  onGenerateNote: () => void;
}

export function ResultsView({
  analysisResult,
  selectedAnalysisIndex,
  onAnalysisSelect,
  onGenerateNote
}: ResultsViewProps) {
  const selectedLogic = analysisResult[selectedAnalysisIndex];

  return (
    <div className="p-6 flex flex-col h-full">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-white">
          Please select the logic to register as an incorrect answer note.
        </h2>
        <button
          onClick={onGenerateNote}
          className="bg-green-600 hover:bg-green-700 text-white font-medium px-4 py-2 rounded-md transition-colors"
        >
          Generate Note with Selected Logic
        </button>
      </div>

      <div className="flex gap-6 h-full pt-4">
        {/* Left Column - Logic Title List */}
        <div className="w-1/3 flex flex-col gap-2 overflow-y-auto" style={{scrollbarWidth: 'thin', scrollbarColor: '#4B5563 #1F2937'}}>
          {analysisResult.map((result, index) => (
            <button
              key={index}
              onClick={() => onAnalysisSelect(index)}
              className={`w-full text-left p-3 rounded-md transition-colors ${
                index === selectedAnalysisIndex
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              {result.title}
            </button>
          ))}
        </div>

        {/* Right Column - Selected Logic Details */}
        <div className="w-2/3 flex flex-col">
          {selectedLogic && (
            <>
              {/* Code Display */}
              <div className="mb-4">
                <h3 className="text-lg font-semibold text-white mb-2">Code</h3>
                <div className="border border-gray-600 rounded-md overflow-hidden">
                  <CodeMirror
                    value={selectedLogic.code}
                    extensions={[javascript()]}
                    theme={oneDark}
                    readOnly={true}
                    basicSetup={{
                      lineNumbers: true,
                      foldGutter: false,
                      dropCursor: false,
                      allowMultipleSelections: false,
                      indentOnInput: false,
                      bracketMatching: true,
                      closeBrackets: false,
                      autocompletion: false,
                      highlightSelectionMatches: false,
                      searchKeymap: false,
                    }}
                    style={{ fontSize: '14px' }}
                  />
                </div>
              </div>

              {/* Description Display */}
              <div className="mt-4 p-4 bg-gray-800 rounded-md text-gray-300">
                <h3 className="text-lg font-semibold text-white mb-2">Description</h3>
                <p className="leading-relaxed">{selectedLogic.description}</p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/IncorrectAnswerNoteModal/views/URLInputView.tsx">
import { useState } from 'react';
import type { ProblemData } from '../../../store/useIncorrectAnswerNoteStore';

interface URLInputViewProps {
  problemData: ProblemData;
  onProblemDataChange: (data: Partial<ProblemData>) => void;
  onNext: () => void;
}

export function URLInputView({ problemData, onProblemDataChange, onNext }: URLInputViewProps) {
  const [isFocused, setIsFocused] = useState(false);
  const [inputValue, setInputValue] = useState(problemData.url || '');

  const handleInputChange = (value: string) => {
    setInputValue(value);
    onProblemDataChange({ url: value });
  };

  const handleSubmit = () => {
    if (inputValue.trim()) {
      onNext();
    }
  };

  return (
    <div className="p-6 flex flex-col h-full">
      <h2 className="text-2xl font-bold text-center mb-6 text-white">
        Register Problem Link (URL)
      </h2>

      <div className="flex-1 flex flex-col justify-center">
        <div className="relative mb-6">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => handleInputChange(e.target.value)}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-transparent focus:outline-none focus:border-blue-500 transition-colors"
            placeholder="Problem Link"
          />
          <label
            className={`absolute left-4 transition-all duration-200 pointer-events-none ${
              isFocused || inputValue
                ? '-top-2 text-xs text-blue-400 bg-gray-900 px-2'
                : 'top-3 text-gray-400'
            }`}
          >
            Problem Link
          </label>
        </div>
      </div>

      <button
        onClick={handleSubmit}
        disabled={!inputValue.trim()}
        className="w-full mt-auto bg-blue-500 text-white font-medium text-base px-6 py-3 rounded-md hover:bg-blue-600 disabled:opacity-60 transition-colors"
      >
        Next
      </button>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/components/ProtectedRoute/index.tsx">
import type { ReactNode } from 'react';
import { useProtectedRoute } from './useProtectedRoute';
import { ProtectedRouteView } from './ProtectedRoute.view';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredRole?: string;
  redirectTo?: string;
}

export function ProtectedRoute({
  children,
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: ProtectedRouteProps) {
  const { shouldShowContent, shouldShowLoading } = useProtectedRoute({
    requiredRole,
    redirectTo
  });

  return (
    <ProtectedRouteView
      shouldShowContent={shouldShowContent}
      shouldShowLoading={shouldShowLoading}
    >
      {children}
    </ProtectedRouteView>
  );
}
</file>

<file path="apps/dashboard/src/components/ProtectedRoute/ProtectedRoute.view.tsx">
import { ReactNode } from 'react';

interface ProtectedRouteViewProps {
  children: ReactNode;
  shouldShowContent: boolean;
  shouldShowLoading: boolean;
}

export function ProtectedRouteView({
  children,
  shouldShowContent,
  shouldShowLoading
}: ProtectedRouteViewProps) {
  // Show loading spinner while authentication is being checked
  if (shouldShowLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Loading...</span>
      </div>
    );
  }

  // Only render children if user is properly authenticated and authorized
  if (shouldShowContent) {
    return <>{children}</>;
  }

  // Return null while redirecting (to prevent flash of content)
  return null;
}
</file>

<file path="apps/dashboard/src/components/ProtectedRoute/useProtectedRoute.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';

interface UseProtectedRouteProps {
  requiredRole?: string;
  redirectTo?: string;
}

export function useProtectedRoute({
  requiredRole = 'member',
  redirectTo = '/sign-in'
}: UseProtectedRouteProps = {}) {
  const navigate = useNavigate();
  const { isLoaded, isSignedIn, role } = useAuthStore();

  useEffect(() => {
    // Only proceed with checks after Clerk has loaded
    if (!isLoaded) return;

    // Redirect to sign-in if not authenticated
    if (!isSignedIn) {
      navigate(redirectTo);
      return;
    }

    // Redirect if user doesn't have the required role
    if (requiredRole && role !== requiredRole) {
      navigate('/unauthorized'); // You might want to create an unauthorized page
      return;
    }
  }, [isLoaded, isSignedIn, role, requiredRole, navigate, redirectTo]);

  const shouldShowContent = isLoaded && isSignedIn && (!requiredRole || role === requiredRole);
  const shouldShowLoading = !isLoaded;

  return {
    shouldShowContent,
    shouldShowLoading,
    isLoaded,
    isSignedIn,
    role,
  };
}
</file>

<file path="apps/dashboard/src/hooks/useApiClient.ts">
import { useEffect } from 'react';
import { useAuth } from '@clerk/clerk-react';
import { initializeApiClient } from '../services/apiClient';

/**
 * Hook to initialize the API client with Clerk authentication
 * Should be used at the root level of the authenticated app
 */
export function useApiClient() {
  const { getToken } = useAuth();

  useEffect(() => {
    // Initialize the API client with Clerk's getToken function
    initializeApiClient(getToken);
  }, [getToken]);

  return {
    isInitialized: true,
  };
}
</file>

<file path="apps/dashboard/src/hooks/useUserProfile.ts">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getUserProfile, updateUserProfile } from '../services/userService';
import type { UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Query keys for user-related data
 */
export const userQueryKeys = {
  profile: ['user', 'profile'] as const,
  stats: ['user', 'stats'] as const,
};

/**
 * Hook to fetch and manage user profile data
 */
export function useUserProfile() {
  const queryClient = useQueryClient();

  // Query for user profile
  const profileQuery = useQuery({
    queryKey: userQueryKeys.profile,
    queryFn: getUserProfile,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation for updating user profile
  const updateProfileMutation = useMutation({
    mutationFn: updateUserProfile,
    onSuccess: (updatedProfile) => {
      // Update the cached profile data
      queryClient.setQueryData(userQueryKeys.profile, updatedProfile);
    },
  });

  return {
    // Profile data
    profile: profileQuery.data,
    isLoading: profileQuery.isLoading,
    isError: profileQuery.isError,
    error: profileQuery.error,

    // Update profile function
    updateProfile: (data: UpdateUserProfileRequest) => updateProfileMutation.mutate(data),
    isUpdating: updateProfileMutation.isPending,
    updateError: updateProfileMutation.error,

    // Utility functions
    refetch: profileQuery.refetch,
  };
}
</file>

<file path="apps/dashboard/src/pages/Components/index.tsx">
export { ComponentsView as Components } from './Components.view';
</file>

<file path="apps/dashboard/src/pages/SetupAccount/index.tsx">
import { useSetupAccount } from './useSetupAccount';
import { SetupAccountView } from './SetupAccount.view';

export default function SetupAccountPage() {
  useSetupAccount();

  return <SetupAccountView />;
}
</file>

<file path="apps/dashboard/src/pages/SetupAccount/SetupAccount.view.tsx">
export function SetupAccountView() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="text-center p-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6"></div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">계정을 설정하고 있습니다</h2>
        <p className="text-gray-600">잠시만 기다려주세요...</p>
        <div className="mt-4 text-sm text-gray-500">
          역할을 확인하고 대시보드로 이동합니다
        </div>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/pages/SetupAccount/useSetupAccount.ts">
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../../store/useAuthStore';
import { useUser } from '@clerk/clerk-react';
import type { User } from '../../store/useAuthStore';

export function useSetupAccount() {
  const navigate = useNavigate();
  const { user, isLoaded } = useUser();
  const { setUser: setStoreUser, setAuthState } = useAuthStore();

  useEffect(() => {
    if (isLoaded && user) {
      const role = user.publicMetadata?.role as string | undefined;
      console.log('User info:', user);
      console.log('User Role:', user.publicMetadata?.role);

      if (role === 'member') {
        // Store에 사용자 정보 저장
        const storeUser: User = {
          id: user.id,
          emailAddress: user.primaryEmailAddress?.emailAddress || '',
          firstName: user.firstName || undefined,
          lastName: user.lastName || undefined,
          imageUrl: user.imageUrl || undefined,
          publicMetadata: {
            role: role,
          },
        };

        setStoreUser(storeUser);
        setAuthState({
          isLoaded: true,
          isSignedIn: true,
        });

        navigate('/dashboard');
        return;
      }
    }

    const reloadInterval = setInterval(() => {
      if (user) {
        console.log('Reloading user info...');
        user.reload();
      }
    }, 1000);

    // role이 member가 아니거나 사용자 정보가 없는 경우 타이머 설정
    const timeoutTimer = setTimeout(() => {
      if (isLoaded && (!user || user.publicMetadata?.role !== 'member')) {
        console.log('Unauthorized access or user info missing, redirecting to /unauthorized');
        navigate('/unauthorized');
      }
    }, 15000);

    return () => {
      clearInterval(reloadInterval);
      clearTimeout(timeoutTimer);
    };
  }, [isLoaded, user, setStoreUser, setAuthState, navigate]);

  return {};
}
</file>

<file path="apps/dashboard/src/pages/SignInWithEmail/index.tsx">
import { useSignInWithEmail } from './useSignInWithEmail';
import { SignInWithEmailPageView } from './SignInWithEmailPage.view';

export function SignInWithEmailPage() {
  const {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick
  } = useSignInWithEmail();

  return (
    <SignInWithEmailPageView
      email={email}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onBackToLogin={handleBackToLogin}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignInWithEmailPage;
</file>

<file path="apps/dashboard/src/pages/SignInWithEmail/SignInWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignInWithEmailPageViewProps {
  email: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onBackToLogin: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignInWithEmailPageView({
  email,
  error,
  isLoading,
  onEmailChange,
  onBackToLogin,
  onSubmit,
  onContinueClick
}: SignInWithEmailPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          What's your email address?
        </h1>

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type="email"
              value={email}
              onChange={(e) => onEmailChange(e.target.value)}
              placeholder="Enter your email address..."
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isLoading || !email.trim()}
          />

        </form>

        <button
          type="button"
          onClick={onBackToLogin}
          disabled={isLoading}
          className={`
            mt-6 text-sm text-gray-400
            hover:text-white hover:underline
            disabled:opacity-50 disabled:cursor-not-allowed
            transition-colors duration-200
          `}
        >
          Back to login
        </button>

      </div>
    </main>
  );
}
</file>

<file path="apps/dashboard/src/pages/SignUp/index.tsx">
import { useSignUp } from './useSignUp';
import { SignUpPageView } from './SignUpPage.view';

export function SignUpPage() {
  const {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  } = useSignUp();

  return (
    <SignUpPageView
      hasGoogleHistory={hasGoogleHistory}
      isLoaded={isLoaded}
      onGoogleSignUp={handleGoogleSignUp}
      onEmailSignUp={handleEmailSignUp}
      onSignInClick={handleSignInClick}
    />
  );
}

export default SignUpPage;
</file>

<file path="apps/dashboard/src/pages/SignUp/SignUpPage.view.tsx">
import { SignInWithGoogleButtonView } from '../../../../../libs/ui-components/src/components/sign-in-with-google-button/SignInWithGoogleButton.view';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

interface SignUpPageViewProps {
  hasGoogleHistory: boolean;
  isLoaded: boolean;
  onGoogleSignUp: () => void;
  onEmailSignUp: () => void;
  onSignInClick: () => void;
}

export function SignUpPageView({
  hasGoogleHistory,
  isLoaded,
  onGoogleSignUp,
  onEmailSignUp,
  onSignInClick
}: SignUpPageViewProps) {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
          {/* Logo would go here */}
        </div>

        {/* Title */}
        <h1 className="text-xl font-normal mb-2 text-center">
          Create your workspace
        </h1>

        <div className="w-full flex flex-col space-y-3 mb-6">
          <SignInWithEmailButton onClick={onEmailSignUp} />
        </div>

        <p className="text-xs text-gray-400 text-center mb-8 leading-relaxed">
          By signing up, you agree to our{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Terms of Service
          </a>{' '}
          and{' '}
          <a
            href="#"
            className="text-white hover:underline font-medium"
          >
            Data Processing Agreement
          </a>
        </p>

        <p className="text-xs text-gray-400">
          Already have an account?{' '}
          <button
            onClick={onSignInClick}
            className="text-white hover:underline font-medium"
          >
            Log in
          </button>
        </p>

      </div>
    </main>
  );
}
</file>

<file path="apps/dashboard/src/pages/SignUpWithEmail/index.tsx">
import { useSignUpWithEmail } from './useSignUpWithEmail';
import { SignUpWithEmailPageView } from './SignUpWithEmailPage.view';

export function SignUpWithEmailPage() {
  const {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  } = useSignUpWithEmail();

  return (
    <SignUpWithEmailPageView
      step={step}
      email={email}
      password={password}
      verificationCode={verificationCode}
      error={error}
      isLoading={isLoading}
      onEmailChange={handleEmailChange}
      onPasswordChange={handlePasswordChange}
      onVerificationCodeChange={handleVerificationCodeChange}
      onBackToLogin={handleBackToLogin}
      onBackToEmail={handleBackToEmail}
      onBackToPassword={handleBackToPassword}
      onSubmit={handleSubmit}
      onContinueClick={handleContinueClick}
    />
  );
}

export default SignUpWithEmailPage;
</file>

<file path="apps/dashboard/src/pages/SignUpWithEmail/SignUpWithEmailPage.view.tsx">
import React from 'react';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/sign-in-with-email-button';

type SignUpStep = 'email' | 'password' | 'verification';

interface SignUpWithEmailPageViewProps {
  step: SignUpStep;
  email: string;
  password: string;
  verificationCode: string;
  error: string;
  isLoading: boolean;
  onEmailChange: (value: string) => void;
  onPasswordChange: (value: string) => void;
  onVerificationCodeChange: (value: string) => void;
  onBackToLogin: () => void;
  onBackToEmail: () => void;
  onBackToPassword: () => void;
  onSubmit: (e: React.FormEvent) => void;
  onContinueClick: () => void;
}

export function SignUpWithEmailPageView({
  step,
  email,
  password,
  verificationCode,
  error,
  isLoading,
  onEmailChange,
  onPasswordChange,
  onVerificationCodeChange,
  onBackToLogin,
  onBackToEmail,
  onBackToPassword,
  onSubmit,
  onContinueClick
}: SignUpWithEmailPageViewProps) {
  const getTitle = () => {
    switch (step) {
      case 'email':
        return "What's your email address?";
      case 'password':
        return 'Create your password';
      case 'verification':
        return 'Check your email';
    }
  };

  const getButtonText = () => {
    switch (step) {
      case 'email':
        return 'Continue with Email';
      case 'password':
        return 'Create Account';
      case 'verification':
        return 'Verify & Complete';
    }
  };

  const getPlaceholder = () => {
    switch (step) {
      case 'email':
        return 'Enter your email address...';
      case 'password':
        return 'Create a strong password...';
      case 'verification':
        return 'Enter 6-digit code...';
    }
  };

  const getCurrentValue = () => {
    switch (step) {
      case 'email':
        return email;
      case 'password':
        return password;
      case 'verification':
        return verificationCode;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch (step) {
      case 'email':
        onEmailChange(value);
        break;
      case 'password':
        onPasswordChange(value);
        break;
      case 'verification':
        onVerificationCodeChange(value);
        break;
    }
  };

  const getInputType = () => {
    switch (step) {
      case 'email':
        return 'email';
      case 'password':
        return 'password';
      case 'verification':
        return 'text';
    }
  };

  const isButtonDisabled = () => {
    const currentValue = getCurrentValue();
    return isLoading || !currentValue.trim();
  };

  const getBackButton = () => {
    switch (step) {
      case 'email':
        return (
          <button
            type="button"
            onClick={onBackToLogin}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to login
          </button>
        );
      case 'password':
        return (
          <button
            type="button"
            onClick={onBackToEmail}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to email
          </button>
        );
      case 'verification':
        return (
          <button
            type="button"
            onClick={onBackToPassword}
            disabled={isLoading}
            className={`
              mt-6 text-sm text-gray-400
              hover:text-white hover:underline
              disabled:opacity-50 disabled:cursor-not-allowed
              transition-colors duration-200
            `}
          >
            Back to password
          </button>
        );
    }
  };

  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      <div className="w-full max-w-xs flex flex-col items-center">

        <div className="h-10 w-10 mb-8 bg-white rounded-full">
        </div>

        <h1 className="text-xl font-normal mb-6 text-center">
          {getTitle()}
        </h1>

        {step === 'verification' && (
          <p className="text-sm text-gray-400 mb-4 text-center">
            We sent a verification code to {email}
          </p>
        )}

        <form onSubmit={onSubmit} className="w-full flex flex-col space-y-4">

          <div className="w-full">
            <input
              type={getInputType()}
              value={getCurrentValue()}
              onChange={handleInputChange}
              placeholder={getPlaceholder()}
              disabled={isLoading}
              className={`
                w-full px-4 py-3 rounded-lg text-sm
                bg-gray-800 border border-gray-600 text-white
                placeholder-gray-400
                focus:outline-none focus:border-gray-400 focus:ring-1 focus:ring-gray-400
                disabled:opacity-50 disabled:cursor-not-allowed
                transition-colors duration-200
              `}
            />

            {step === 'password' && (
              <p className="text-xs text-gray-500 mt-1">
                Password must be at least 8 characters with uppercase, lowercase, and number
              </p>
            )}

            {error && (
              <p className="text-red-400 text-xs mt-2">
                {error}
              </p>
            )}
          </div>

          <SignInWithEmailButton
            onClick={onContinueClick}
            disabled={isButtonDisabled()}
          >
            {getButtonText()}
          </SignInWithEmailButton>

        </form>

        {getBackButton()}

      </div>
    </main>
  );
}
</file>

<file path="apps/dashboard/src/pages/Unauthorized/index.tsx">
import { useNavigate } from 'react-router-dom';

export default function UnauthorizedPage() {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate('/');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center">
        <div className="mb-4">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg
              className="w-8 h-8 text-red-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 16.5c-.77.833.192 2.5 1.732 2.5z"
              />
            </svg>
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h1>
          <p className="text-gray-600 mb-6">
            You don't have permission to access this page. Please contact an administrator if you believe this is an error.
          </p>
        </div>
        <button
          onClick={handleGoHome}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
        >
          Go to Home
        </button>
      </div>
    </div>
  );
}
</file>

<file path="apps/dashboard/src/schemas/user.schema.ts">
import { z } from 'zod';

// User profile response schema
export const userProfileSchema = z.object({
  id: z.string(),
  email: z.string().email(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  avatarUrl: z.string().url().optional(),
  role: z.string().optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).default('system'),
    language: z.string().default('en'),
    notifications: z.boolean().default(true),
  }).optional(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
});

// User profile update request schema
export const updateUserProfileSchema = z.object({
  firstName: z.string().min(1).optional(),
  lastName: z.string().min(1).optional(),
  preferences: z.object({
    theme: z.enum(['light', 'dark', 'system']).optional(),
    language: z.string().optional(),
    notifications: z.boolean().optional(),
  }).optional(),
});

// Infer TypeScript types from schemas
export type UserProfile = z.infer<typeof userProfileSchema>;
export type UpdateUserProfileRequest = z.infer<typeof updateUserProfileSchema>;
</file>

<file path="apps/dashboard/src/services/apiClient.ts">
import axios from 'axios';
import type { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { useAuthStore } from '../store/useAuthStore';

const apiClient: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

let getTokenFn: (() => Promise<string | null>) | null = null;

export function initializeApiClient(getToken: () => Promise<string | null>) {
  getTokenFn = getToken;
}

// Request interceptor to add authentication token
apiClient.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    if (getTokenFn) {
      try {
        const token = await getTokenFn();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
      } catch (error) {
        console.warn('Failed to get authentication token:', error);
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle authentication errors
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      // Clear auth state when authentication fails
      const { clearAuth } = useAuthStore.getState();
      clearAuth();

      // Redirect to sign-in page
      window.location.href = '/sign-in';
    }
    return Promise.reject(error);
  }
);

export default apiClient;
</file>

<file path="apps/dashboard/src/services/userService.ts">
import apiClient from './apiClient';
import { userProfileSchema, updateUserProfileSchema } from '../schemas/user.schema';
import type { UserProfile, UpdateUserProfileRequest } from '../schemas/user.schema';

/**
 * Get current user's profile information
 */
export async function getUserProfile(): Promise<UserProfile> {
  const response = await apiClient.get('/users/profile');
  return userProfileSchema.parse(response.data);
}

/**
 * Update current user's profile information
 */
export async function updateUserProfile(data: UpdateUserProfileRequest): Promise<UserProfile> {
  // Validate request data
  const validatedData = updateUserProfileSchema.parse(data);

  const response = await apiClient.put('/users/profile', validatedData);
  return userProfileSchema.parse(response.data);
}

/**
 * Delete current user's account
 */
export async function deleteUserAccount(): Promise<void> {
  await apiClient.delete('/users/profile');
}

/**
 * Get user's activity statistics
 */
export async function getUserStats(): Promise<{
  problemsSolved: number;
  weeklyActivity: number[];
  streakDays: number;
  totalTimeSpent: number;
}> {
  const response = await apiClient.get('/users/stats');
  return response.data;
}
</file>

<file path="apps/dashboard/src/store/useAiNoteModalStore.ts">
import { create } from 'zustand';

export type ModalView = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  url?: string;
  title?: string;
  description?: string;
  inputOutput?: string;
  constraints?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisUnit {
  title: string;
  description: string;
  code: string;
  selected?: boolean;
}

interface AiNoteModalState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ModalView;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisUnit[];
  isLoading: boolean;
  error: string | null;
}

interface AiNoteModalActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ModalView) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (result: AnalysisUnit[]) => void;
  toggleAnalysisSelection: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetModal: () => void;
  startAnalysis: () => Promise<void>;
}

type AiNoteModalStore = AiNoteModalState & AiNoteModalActions;

const initialState: AiNoteModalState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {},
  submissionType: null,
  codeData: { code: '', language: 'javascript' },
  analysisResult: [],
  isLoading: false,
  error: null,
};

const generateDummyAnalysis = (): AnalysisUnit[] => [
  {
    title: "1. Initial Variable Declaration and Input Processing",
    description: "This section initializes variables required for the algorithm and reads data via standard input.",
    code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`,
    selected: false,
  },
  {
    title: "2. Core Logic: Dynamic Programming (DP)",
    description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
    code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`,
    selected: false,
  },
  {
    title: "3. Output Result",
    description: "This section outputs the final value from the calculated DP table in the specified format.",
    code: `console.log(dp[N]);`,
    selected: false,
  }
];

export const useAiNoteModalStore = create<AiNoteModalStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => {
    const { resetModal } = get();
    resetModal();
    set({ isModalOpen: false });
  },

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view) => set({ currentView: view }),

  setSubmissionType: (type) => set({ submissionType: type }),

  setProblemData: (data) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (result) => set({ analysisResult: result }),

  toggleAnalysisSelection: (index) =>
    set((state) => ({
      analysisResult: state.analysisResult.map((unit, i) =>
        i === index ? { ...unit, selected: !unit.selected } : unit
      ),
    })),

  setLoading: (loading) => set({ isLoading: loading }),

  setError: (error) => set({ error }),

  resetModal: () => set(initialState),

  startAnalysis: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate API call with 2-second delay
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const dummyAnalysis = generateDummyAnalysis();
      set({
        analysisResult: dummyAnalysis,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: 'Failed to analyze code. Please try again.',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="apps/dashboard/src/store/useAuthStore.ts">
import { create } from 'zustand';

export interface User {
  id: string;
  emailAddress: string;
  firstName?: string;
  lastName?: string;
  imageUrl?: string;
  publicMetadata: {
    role?: string;
  };
}

interface AuthState {
  isLoaded: boolean;
  isSignedIn: boolean;
  user: User | null;
  role: string | null;
}

interface AuthActions {
  setAuthState: (state: Partial<AuthState>) => void;
  setUser: (user: User | null) => void;
  clearAuth: () => void;
}

type AuthStore = AuthState & AuthActions;

const initialState: AuthState = {
  isLoaded: false,
  isSignedIn: false,
  user: null,
  role: null,
};

export const useAuthStore = create<AuthStore>((set) => ({
  ...initialState,

  setAuthState: (newState) =>
    set((state) => {
      const updatedState = { ...state, ...newState };
      // Extract role from user's publicMetadata when user is set
      if (newState.user) {
        updatedState.role = newState.user.publicMetadata?.role || null;
      }
      return updatedState;
    }),

  setUser: (user) =>
    set((state) => ({
      ...state,
      user,
      role: user?.publicMetadata?.role || null,
      isSignedIn: !!user,
    })),

  clearAuth: () => set(initialState),
}));
</file>

<file path="apps/dashboard/src/store/useIncorrectAnswerNoteStore.ts">
import { create } from 'zustand';

export type ViewType = 'CHOICE' | 'URL_INPUT' | 'MANUAL_INPUT' | 'CODE_INPUT' | 'RESULTS';
export type SubmissionType = 'url' | 'manual' | null;

export interface ProblemData {
  title: string;
  description: string;
  inputCondition: string;
  outputCondition: string;
  constraints: string;
  url?: string;
}

export interface CodeData {
  code: string;
  language: string;
}

export interface AnalysisResult {
  title: string;
  description: string;
  code: string;
}

interface IncorrectAnswerNoteState {
  isModalOpen: boolean;
  isExitConfirmationVisible: boolean;
  currentView: ViewType;
  problemData: ProblemData;
  submissionType: SubmissionType;
  codeData: CodeData;
  analysisResult: AnalysisResult[];
  selectedAnalysisIndex: number;
  isLoading: boolean;
  error: string | null;
}

interface IncorrectAnswerNoteActions {
  openModal: () => void;
  closeModal: () => void;
  showExitConfirmation: () => void;
  hideExitConfirmation: () => void;
  setCurrentView: (view: ViewType) => void;
  setSubmissionType: (type: SubmissionType) => void;
  setProblemData: (data: Partial<ProblemData>) => void;
  setCodeData: (data: Partial<CodeData>) => void;
  setAnalysisResult: (results: AnalysisResult[]) => void;
  setSelectedAnalysisIndex: (index: number) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  resetState: () => void;
  analyzeCode: () => Promise<void>;
}

type IncorrectAnswerNoteStore = IncorrectAnswerNoteState & IncorrectAnswerNoteActions;

const initialState: IncorrectAnswerNoteState = {
  isModalOpen: false,
  isExitConfirmationVisible: false,
  currentView: 'CHOICE',
  problemData: {
    title: '',
    description: '',
    inputCondition: '',
    outputCondition: '',
    constraints: '',
    url: '',
  },
  submissionType: null,
  codeData: {
    code: '',
    language: 'javascript',
  },
  analysisResult: [],
  selectedAnalysisIndex: 0,
  isLoading: false,
  error: null,
};

export const useIncorrectAnswerNoteStore = create<IncorrectAnswerNoteStore>((set, get) => ({
  ...initialState,

  openModal: () => set({ isModalOpen: true }),

  closeModal: () => set((state) => ({
    ...initialState,
    isModalOpen: false,
  })),

  showExitConfirmation: () => set({ isExitConfirmationVisible: true }),

  hideExitConfirmation: () => set({ isExitConfirmationVisible: false }),

  setCurrentView: (view: ViewType) => set({ currentView: view }),

  setSubmissionType: (type: SubmissionType) => set({ submissionType: type }),

  setProblemData: (data: Partial<ProblemData>) =>
    set((state) => ({
      problemData: { ...state.problemData, ...data }
    })),

  setCodeData: (data: Partial<CodeData>) =>
    set((state) => ({
      codeData: { ...state.codeData, ...data }
    })),

  setAnalysisResult: (results: AnalysisResult[]) => set({ analysisResult: results }),

  setSelectedAnalysisIndex: (index: number) => set({ selectedAnalysisIndex: index }),

  setLoading: (loading: boolean) => set({ isLoading: loading }),

  setError: (error: string | null) => set({ error }),

  resetState: () => set(initialState),

  analyzeCode: async () => {
    set({ isLoading: true, error: null });

    try {
      // Simulate 2-second loading
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate dummy analysis data
      const dummyAnalysis: AnalysisResult[] = [
        {
          title: "1. Initial Variable Declaration and Input Processing",
          description: "This section initializes variables required for the algorithm and reads data via standard input.",
          code: `const fs = require('fs');\nconst input = fs.readFileSync('/dev/stdin').toString().trim().split('\\n');\nconst N = parseInt(input[0]);`
        },
        {
          title: "2. Core Logic: Dynamic Programming (DP)",
          description: "This is the core logic that creates a DP table and solves the problem based on recurrence relations, improving efficiency by reusing previous calculation results.",
          code: `const dp = new Array(N + 1).fill(0);\ndp[1] = 1;\ndp[2] = 2;\nfor (let i = 3; i <= N; i++) {\n  dp[i] = (dp[i-1] + dp[i-2]) % 10007;\n}`
        },
        {
          title: "3. Output Result",
          description: "This section outputs the final value from the calculated DP table in the specified format.",
          code: `console.log(dp[N]);`
        }
      ];

      set({
        analysisResult: dummyAnalysis,
        selectedAnalysisIndex: 0,
        currentView: 'RESULTS',
        isLoading: false
      });
    } catch (error) {
      set({
        error: error instanceof Error ? error.message : 'Analysis failed',
        isLoading: false
      });
    }
  },
}));
</file>

<file path="apps/dashboard/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="apps/dashboard/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="apps/dashboard/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="apps/dashboard/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="apps/dashboard/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="apps/landing-page/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="apps/landing-page/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="apps/landing-page/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="apps/landing-page/package.json">
{
  "name": "landing-page",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@clerk/clerk-react": "^5.2.8",
    "@tailwindcss/vite": "^4.1.13",
    "framer-motion": "^11.3.19",
    "lucide-react": "^0.417.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^6.25.1",
    "tailwindcss": "^4.1.13"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="apps/landing-page/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="apps/landing-page/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="apps/landing-page/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="apps/landing-page/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="apps/landing-page/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="apps/landing-page/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="apps/landing-page/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="apps/landing-page/vite.config.ts">
import { defineConfig } from 'vite'
import tailwindcss from "@tailwindcss/vite";
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})
</file>

<file path="libs/api-types/package.json">
{
  "name": "api-types",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.16.0"
}
</file>

<file path="libs/core-logic/package.json">
{
  "name": "core-logic",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "date-fns": "^3.6.0",
    "zod": "^3.23.8"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.16.0"
}
</file>

<file path="libs/ui-components/postcss.config.js">
module.exports = {
  plugins: {
    "@tailwindcss/postcss": {},
    autoprefixer: {},
  },
}
</file>

<file path="libs/ui-components/src/components/Button/index.tsx">
export { ButtonView as Button } from './Button.view';
export type { ButtonProps } from './useButton';
</file>

<file path="libs/ui-components/src/components/Button/useButton.ts">
import { ButtonHTMLAttributes, MouseEvent } from 'react';

export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const useButton = (props: ButtonProps) => {
  const {
    variant = 'primary',
    size = 'md',
    isLoading = false,
    disabled,
    onClick,
    ...rest
  } = props;

  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {
    if (isLoading || disabled) return;
    onClick?.(event);
  };

  const getVariantClasses = () => {
    switch (variant) {
      case 'primary':
        return 'bg-brand text-white hover:bg-brand-dark focus:ring-brand/20';
      case 'secondary':
        return 'bg-background-secondary text-text-primary border border-neutral-100 hover:bg-neutral-50 focus:ring-brand/20';
      case 'outline':
        return 'bg-transparent text-brand border border-brand hover:bg-brand/5 focus:ring-brand/20';
      case 'ghost':
        return 'bg-transparent text-text-primary hover:bg-neutral-50 focus:ring-neutral-100/50';
      default:
        return 'bg-brand text-white hover:bg-brand-dark focus:ring-brand/20';
    }
  };

  const getSizeClasses = () => {
    switch (size) {
      case 'sm':
        return 'px-3 py-2 text-sm font-medium';
      case 'md':
        return 'px-6 py-3 text-sm font-medium';
      case 'lg':
        return 'px-8 py-4 text-base font-medium';
      default:
        return 'px-6 py-3 text-sm font-medium';
    }
  };

  const baseClasses = 'inline-flex items-center justify-center rounded-md border-0 transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

  const buttonClasses = `${baseClasses} ${getVariantClasses()} ${getSizeClasses()}`;

  return {
    buttonProps: {
      ...rest,
      disabled: disabled || isLoading,
      onClick: handleClick,
      className: buttonClasses,
    },
    isLoading,
    variant,
    size,
  };
};
</file>

<file path="libs/ui-components/src/components/Card/index.tsx">
export { CardView as Card } from './Card.view';
export type { CardProps } from './useCard';
</file>

<file path="libs/ui-components/src/components/Footer/Footer.view.tsx">
import React from 'react';
import { useFooter } from './useFooter';
import type { FooterProps } from './useFooter';

export const FooterView = (props: FooterProps) => {
  const {
    footerClasses,
    companyName,
    links,
    socialLinks,
    showCopyright,
    copyrightYear,
  } = useFooter(props);

  return (
    <footer className={footerClasses}>
      <div className="max-w-6xl mx-auto px-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Company Info */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-neutral-white">
              {companyName}
            </h3>
            <p className="text-neutral-300 text-sm leading-relaxed">
              AI-powered algorithm problem management platform for enhanced learning and practice.
            </p>
          </div>

          {/* Links */}
          {links.length > 0 && (
            <div className="space-y-4">
              <h4 className="text-base font-medium text-neutral-white">
                Quick Links
              </h4>
              <ul className="space-y-2">
                {links.map((link, index) => (
                  <li key={index}>
                    <a
                      href={link.href}
                      className="text-neutral-300 hover:text-neutral-white transition-colors duration-200 text-sm"
                    >
                      {link.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Social Links */}
          {socialLinks.length > 0 && (
            <div className="space-y-4">
              <h4 className="text-base font-medium text-neutral-white">
                Connect
              </h4>
              <div className="flex space-x-4">
                {socialLinks.map((social, index) => (
                  <a
                    key={index}
                    href={social.href}
                    className="text-neutral-300 hover:text-neutral-white transition-colors duration-200"
                    aria-label={social.label}
                  >
                    {social.icon || social.label}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Copyright */}
        {showCopyright && (
          <div className="mt-8 pt-8 border-t border-neutral-700">
            <p className="text-center text-neutral-400 text-sm">
              © {copyrightYear} {companyName}. All rights reserved.
            </p>
          </div>
        )}
      </div>
    </footer>
  );
};
</file>

<file path="libs/ui-components/src/components/Footer/index.tsx">
export { FooterView as Footer } from './Footer.view';
export { useFooter } from './useFooter';
export type { FooterProps } from './useFooter';
</file>

<file path="libs/ui-components/src/components/Footer/useFooter.ts">
export interface FooterProps {
  className?: string;
  companyName?: string;
  links?: Array<{
    label: string;
    href: string;
  }>;
  socialLinks?: Array<{
    label: string;
    href: string;
    icon?: React.ReactNode;
  }>;
  showCopyright?: boolean;
  copyrightYear?: number;
}

export const useFooter = (props: FooterProps) => {
  const {
    className = '',
    companyName = 'AlgoRevise',
    links = [],
    socialLinks = [],
    showCopyright = true,
    copyrightYear = new Date().getFullYear(),
  } = props;

  const footerClasses = `bg-neutral-900 text-neutral-100 py-12 ${className}`;

  return {
    footerClasses,
    companyName,
    links,
    socialLinks,
    showCopyright,
    copyrightYear,
  };
};
</file>

<file path="libs/ui-components/src/components/Input/index.tsx">
export { InputView as Input } from './Input.view';
export type { InputProps } from './useInput';
</file>

<file path="libs/ui-components/src/components/Input/Input.view.tsx">
import React from 'react';
import { InputProps, useInput } from './useInput';

export const InputView = (props: InputProps) => {
  const { inputProps, labelClasses, helperTextClasses } = useInput(props);
  const { label, error, helperText, leftIcon, rightIcon } = props;

  return (
    <div className="w-full">
      {label && (
        <label className={labelClasses}>
          {label}
        </label>
      )}

      <div className="relative">
        {leftIcon && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-tertiary">
            {leftIcon}
          </div>
        )}

        <input
          {...inputProps}
          className={`${inputProps.className} ${leftIcon ? 'pl-10' : ''} ${rightIcon ? 'pr-10' : ''}`}
        />

        {rightIcon && (
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-text-tertiary">
            {rightIcon}
          </div>
        )}
      </div>

      {(error || helperText) && (
        <div className={helperTextClasses}>
          {error || helperText}
        </div>
      )}
    </div>
  );
};
</file>

<file path="libs/ui-components/src/components/Spinner/index.tsx">
export { SpinnerView as Spinner } from './Spinner.view';
export { useSpinner } from './useSpinner';
export type { SpinnerProps } from './useSpinner';
</file>

<file path="libs/ui-components/src/components/Spinner/Spinner.view.tsx">
import React from 'react';
import { useSpinner } from './useSpinner';
import type { SpinnerProps } from './useSpinner';

export const SpinnerView = (props: SpinnerProps) => {
  const { spinnerClasses, label } = useSpinner(props);

  return (
    <div className="inline-flex items-center" role="status" aria-label={label}>
      <div className={spinnerClasses} />
      <span className="sr-only">{label}</span>
    </div>
  );
};
</file>

<file path="libs/ui-components/src/components/Spinner/useSpinner.ts">
export interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  color?: 'brand' | 'neutral' | 'white';
  className?: string;
  label?: string;
}

export const useSpinner = (props: SpinnerProps) => {
  const {
    size = 'md',
    color = 'brand',
    className = '',
    label = 'Loading...',
  } = props;

  const getSizeClasses = () => {
    switch (size) {
      case 'sm':
        return 'h-4 w-4 border-2';
      case 'md':
        return 'h-6 w-6 border-2';
      case 'lg':
        return 'h-8 w-8 border-2';
      case 'xl':
        return 'h-12 w-12 border-4';
      default:
        return 'h-6 w-6 border-2';
    }
  };

 const getColorClasses = () => {
    switch (color) {
      case 'brand':
        return 'border-brand/30 border-t-brand';
      case 'neutral':
        return 'border-neutral-200 border-t-neutral-400';
      case 'white':
        return 'border-white/30 border-t-white';
      default:
        return 'border-brand/30 border-t-brand';
    }
  };

  const spinnerClasses = `animate-spin rounded-full ${getSizeClasses()} ${getColorClasses()} ${className}`;

  return {
    spinnerClasses,
    label,
  };
};
</file>

<file path="libs/ui-components/src/components/Typography/index.tsx">
export { TypographyView as Typography } from './Typography.view';
export type { TypographyProps } from './useTypography';
</file>

<file path="libs/ui-components/src/images.d.ts">
declare module '*.jpg' {
  const value: string;
  export default value;
}

declare module '*.png' {
  const value: string;
  export default value;
}

declare module '*.svg' {
  const value: string;
  export default value;
}
</file>

<file path="package.json">
{
  "name": "algorithm_note_monorepo_v2",
  "version": "1.0.0",
  "private": true,
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "pnpm --parallel --stream dev",
    "build": "pnpm --filter \"./apps/*\" build",
    "lint": "pnpm --filter \"./apps/*\" lint"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.39",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "tailwindcss": "^3.4.6"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.16.0"
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - 'apps/*'
  - 'libs/*'
</file>

<file path="rules/back/dto.md">
```markdown
# Code Generation Rules for DTOs

## 1. Purpose
All Data Transfer Objects (DTOs) must use static factory methods as the primary construction mechanism, ensuring immutability and maintaining compatibility with JSON serialization/deserialization. These rules are designed to enhance code readability, maintainability, consistency, and domain intent clarity.

## 2. Rule Details
All DTO classes must adhere to the following guidelines:

### Package and Structure:
*   DTOs should be located in a designated `[your_application_context].dto` package (e.g., `com.example.app.dto`).
*   Class names must clearly reflect the domain and purpose, using the `Dto` suffix (e.g., `CreateItemResponseDto`, `SearchQueryRequestDto`).

### Immutability Assurance:
*   DTOs must be **immutable**, and should not include the `@Setter` annotation or setter methods.

### Use of Static Factory Methods:
*   DTO creation must primarily use static factory methods.
*   Method names should clearly express the domain scenario:
    *   Response DTOs: `success` (for success scenarios), `failure` (for failure scenarios).
    *   Request DTOs: `of` (for general-purpose creation).
*   Methods should only accept required fields or provide default values to prevent caller errors.
*   Example:
```java
public static SomeResponseDto success(String message, Long entityId, int count) {
    return new SomeResponseDto(message, entityId, count, true);
}
public static SomeResponseDto failure(String message) {
    return new SomeResponseDto(message, null, 0, false);
}
```

### Lombok Annotations:
*   `@Getter`: Provides getters for all fields.
*   `@AllArgsConstructor`: Provides a constructor including all fields (used internally by static factory methods).
*   `@NoArgsConstructor`: Provides an empty constructor for JSON deserialization compatibility (e.g., Jackson).
*   `@Setter` forbidden: To ensure immutability.
*   `@Builder` forbidden: Static factory methods provide clearer intent, so builders are not used (may be allowed exceptionally, see below).

### JSON Serialization/Deserialization Compatibility:
*   Include `@NoArgsConstructor` for compatibility with serialization libraries like Jackson/Gson.
*   `@JsonProperty`, `@JsonInclude` annotations can be used if necessary.
*   Example:
```java
@JsonInclude(JsonInclude.Include.NON_NULL)
public class SomeResponseDto {
    private final String message;
    // ...
}
```

### Field Definition:
*   Fields must reflect domain requirements and use clear names (e.g., `itemId`, `quantity`).
*   Required fields must be ensured to be initialized with non-null values by static factory methods.
*   Optional fields should be handled with `null` or default values (e.g., `0`, `false`).

### Domain-Specific Method Naming Conventions:
*   Response DTOs: `success` for successful responses, `failure` for failed responses. Additional scenarios (e.g., `partialSuccess`) defined per domain.
*   Request DTOs: `of` for general creation; if specific scenarios exist, name them accordingly (e.g., `fromExternalData`).
*   Example:
```java
public static SomeRequestDto of(String identifier, String value, String type) {
    return new SomeRequestDto(identifier, value, type);
}
```

### Exceptional Use Cases:
*   **Complex DTOs**: If a DTO has many fields (10+) or many optional fields, `@Builder` may be selectively allowed. However, builder method names should be scenario-specific, not just `builder` (e.g., `successBuilder`, `failureBuilder`).
*   **Record Consideration**: In Java 14+ environments, `record` can be considered as an alternative. However, if JSON customization is complex, maintain class-based DTOs.
*   Example:
```java
public record SomeResponseDto(String message, Long entityId, int count, boolean success) {
    public static SomeResponseDto success(String message, Long entityId, int count) {
        return new SomeResponseDto(message, entityId, count, true);
    }
}
```

### Maintainability and Testing:
*   All DTOs must follow the same pattern (static factory methods + immutability) to ensure consistency.
*   Simplify object creation during testing by using static factory methods.
*   Example: `assertEquals(SomeResponseDto.success("Success", 1L, 2), response);`

### Logging and Documentation:
*   Logging during DTO creation is unnecessary, but call scenarios should be clearly explained with comments or documentation.
*   Example:
```java
/**
 * Creates a success response DTO.
 * @param message The success message.
 * @param entityId The ID of the processed entity.
 * @param count The number of processed items.
 * @return A DTO representing a success state.
 */
public static SomeResponseDto success(String message, Long entityId, int count) {
    return new SomeResponseDto(message, entityId, count, true);
}
```

## 3. Example DTO Code
All DTOs generated by AI must follow the format below:
```java
package com.example.app.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * DTO for processing response.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@AllArgsConstructor
@NoArgsConstructor
public class SomeResponseDto {
    private final String message;
    private final Long entityId;
    private final int processedCount;
    private final boolean success;

    /**
     * Creates a success response DTO.
     * @param message The success message.
     * @param entityId The ID of the processed entity.
     * @param processedCount The number of processed items.
     * @return A DTO representing a success state.
     */
    public static SomeResponseDto success(String message, Long entityId, int processedCount) {
        return new SomeResponseDto(message, entityId, processedCount, true);
    }

    /**
     * Creates a failure response DTO.
     * @param message The failure message.
     * @return A DTO representing a failure state.
     */
    public static SomeResponseDto failure(String message) {
        return new SomeResponseDto(message, null, 0, false);
    }
}
```

## 4. Application Guidelines

### Response DTOs:
*   Always provide `success` and `failure` methods.
*   `success` should accept all required fields and set `success=true`.
*   `failure` should only accept an error message, with other fields using default values (`null`, `0`, `false`).

### Request DTOs:
*   Provide an `of` method for general-purpose creation.
*   Add scenario-specific methods (e.g., `fromExternalData`) if required by the domain.

### JSON Compatibility:
*   `@NoArgsConstructor` is mandatory, `@JsonInclude(JsonInclude.Include.NON_NULL)` is recommended.

### Exceptional Cases:
*   If a DTO has 10 or more fields or many optional fields, `@Builder` can be additionally provided, but the builder's name should be scenario-specific (e.g., `successBuilder`).
*   Consider using `record` if JSON customization is simple.

## 5. Ensuring Maintainability

*   **Consistency**: All DTOs follow the same pattern (static factory methods + immutability) to improve code predictability.
*   **Readability**: Method names like `success`, `failure` clarify domain intent.
*   **Error Prevention**: Immutability and static methods prevent the creation of invalid states.
*   **Testability**: Static methods simplify test data generation.
*   **Team Collaboration**: Document rules in team documentation and verify adherence during code reviews.

## 6. Constraints

*   `@Setter` usage is forbidden.
*   `@Builder` is only for exceptional situations (complex DTOs).
*   Hardcoded initial values (e.g., `success=true`) are handled within static methods.
*   DTOs must not contain domain logic (e.g., business logic, calculations).

## 7. AI Code Generation Guidelines
When AI generates DTO code:

*   Strictly adhere to the above rules.
*   Create DTOs in the designated `[your_application_context].dto` package.
*   Class names should reflect the domain and purpose (e.g., `XxxRequestDto`, `XxxResponseDto`).
*   Must include static factory methods (`success`, `failure`, `of`).
*   Use `@Getter`, `@AllArgsConstructor`, `@NoArgsConstructor`, and exclude `@Setter`.
*   Provide comments explaining method purpose and parameters.
*   Wrap the code with an `<xaiArtifact>` tag, with a unique `artifact_id`, `title` as the class name, and `contentType="text/x-java-source"`.

## 8. Exception Handling

*   If a new DTO requires a scenario different from existing patterns, discuss with the team and modify the rules.
*   Example: If a specific DTO requires complex creation logic, consider a separate factory class.
```
</file>

<file path="rules/back/entity.md">
```markdown
## Spring Boot JPA Entity Writing Rules

This document defines the mandatory rules for writing JPA Entities to maintain consistency and stability within the project.

### Core Principles

*   **Immutability Orientation**: Entity objects should have values assigned only at creation time, and state changes should be minimized thereafter. Avoid indiscriminate use of Setters to maintain data integrity.
*   **Clear Creation Responsibility**: Object creation must be enforced exclusively through the Builder pattern, ensuring clarity and flexibility in the object creation process.

### 1. Annotation Rules

#### 1.1. Class-Level Annotations

The following annotations are used by default for Entity classes:

```java
@Entity
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
```

| Annotation                                  | Description                                                                                                                                                                                                                                                               |
| :------------------------------------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `@Entity`                                   | Specifies that this is a JPA-managed entity class.                                                                                                                                                                                                                        |
| `@Getter`                                   | Automatically generates Getter methods for all fields. `@Setter` is not used.                                                                                                                                                                                             |
| `@Builder`                                  | Supports creating objects using the Builder pattern.                                                                                                                                                                                                                      |
| `@NoArgsConstructor(access = AccessLevel.PROTECTED)` | A default constructor is required by JPA specification. Access is restricted to `PROTECTED` to prevent indiscriminate external creation.                                                                                                                                  |
| `@AllArgsConstructor(access = AccessLevel.PRIVATE)` | Generates a constructor including all fields. Access is restricted to `PRIVATE` to enforce creation via the Builder pattern.                                                                                                                                                           |

#### 1.2. Forbidden Annotations

**Warning: The `@Data` annotation must never be used.**

*   `@Data`: This annotation includes `@Getter`, `@Setter`, `@ToString`, `@EqualsAndHashCode`, and other annotations.
    *   Unintended `@Setter` can be exposed, allowing the object's state to be easily modified.
    *   `@ToString` can cause circular references in bidirectional relationships, leading to `StackOverflowError`.
    *   `@EqualsAndHashCode` can compare association fields, leading to performance degradation and unexpected issues.
*   `@Setter`: Its use is forbidden as it can compromise Entity consistency. If state changes are required, implement them via clearly intentioned business methods (e.g., `updatePassword(String newPassword)`).

### 2. Object Creation Rules

Entity objects must be created using the Builder pattern.

**O (Correct Example)**

```java
User user = User.builder()
                .username("John Doe")
                .userId("john123")
                .password("encoded_password")
                .build();
```

**X (Incorrect Example)**

```java
// Compile-time error because NoArgsConstructor is PROTECTED
User user1 = new User();

// Compile-time error because AllArgsConstructor is PRIVATE
User user2 = new User(1L, "John Doe", ...);
```

### 3. Field Declaration Rules

#### 3.1. Basic Fields

*   The Primary Key uses `@Id` and `@GeneratedValue(strategy = GenerationType.IDENTITY)`.
*   Table column properties are clearly defined using the `@Column` annotation (e.g., `unique`, `nullable`).

#### 3.2. Association Fields (Collection)

Collection-type fields such as `@OneToMany`, `@ManyToMany` must be initialized at the time of field declaration.

This prevents `NullPointerException` and ensures that even if the field is omitted when using the Builder pattern, it safely defaults to an empty collection.

**O (Correct Example)**

```java
@OneToMany(mappedBy = "user")
@Builder.Default // Initialize with default value when using Builder pattern
private List<Problem> problems = new ArrayList<>();
```

**X (Incorrect Example)**

```java
@OneToMany(mappedBy = "user")
private List<Problem> problems; // Potential for NPE
```

#### 3.3. Bidirectional Associations and JSON Serialization

To resolve infinite loop issues during JSON serialization in bidirectional associations, use **`@JsonManagedReference`** and **`@JsonBackReference`**.

Generally, `@JsonManagedReference` is used on the parent entity corresponding to "One", and `@JsonBackReference` is used on the child entity corresponding to "Many".

### Full Code Example (Rules Applied)

```java
package algorithm_note.auth.entity;

import algorithm_note.note.entity.Problem;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "users")
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String username;
    
    @Column(nullable = false)
    private String password;
    
    @Column(unique = true, nullable = false)
    private String userId;
    
    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    @JsonManagedReference
    private Set<Role> roles;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JsonManagedReference
    @Builder.Default
    private List<Problem> problems = new ArrayList<>();
}
```
```
</file>

<file path="rules/back/spring.md">
## Core Architectural Rules

### 1. Package-by-Feature Structure

Code must be organized **around features**. This means that all related components (controllers, services, DTOs, etc.) for a specific feature are placed together under a single feature package, increasing cohesion and improving maintainability.

-   **Top-level Packages:** Create a top-level package for each feature. (e.g., `user`, `product`, `order`)
-   **Sub-layer Packages:** Within each feature package, create sub-packages for layers such as `controller`, `service`, `dto`, `repository`, and `domain` (or `entity`), and place the corresponding classes within them.

**Good Example:**

```
com.example.project
└── user
    ├── controller
    │   └── UserController.java
    ├── service
    │   └── UserService.java
    ├── dto
    │   ├── UserRequestDto.java
    │   └── UserResponseDto.java
    ├── repository
    │   └── UserRepository.java
    └── domain
        └── User.java
```

### 2. Centralized Exception Handling

For consistency and robustness of the application, exception handling must be managed in a centralized manner.

-   **No `try-catch` in Business Logic:** `Controller` and `Service` layers **must not** use `try-catch` blocks to handle business-specific exceptions (e.g., `UserNotFoundException`, `InvalidInputException`). Instead, these exceptions should be `throw`n to the caller.
-   **Use `@RestControllerAdvice`:** A **global exception handler (`GlobalExceptionHandler`) class must be implemented** using the `@RestControllerAdvice` annotation.
-   **Consistent Responses:** This handler will intercept all custom exceptions and return a consistent format of HTTP error responses (e.g., JSON-formatted error messages and status codes) to the client.

**Example in Service Layer:**

```java
@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;

    public UserResponseDto findUserById(Long id) {
        // Throws UserNotFoundException if user is not found
        User user = userRepository.findById(id)
            .orElseThrow(() -> new UserNotFoundException("Could not find user with ID: " + id));
        return UserResponseDto.from(user);
    }
}
```

**Example in Global Exception Handler:**

```java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

    // Handles UserNotFoundException
    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleUserNotFoundException(UserNotFoundException ex) {
        ErrorResponse response = new ErrorResponse(HttpStatus.NOT_FOUND.value(), ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    // Handles other common exceptions (optional)
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleIllegalArgumentException(IllegalArgumentException ex) {
        ErrorResponse response = new ErrorResponse(HttpStatus.BAD_REQUEST.value(), ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    // ... other exception handlers
}

// Example ErrorResponse DTO
class ErrorResponse {
    private int status;
    private String message;

    public ErrorResponse(int status, String message) {
        this.status = status;
        this.message = message;
    }

    // Getter methods
    public int getStatus() { return status; }
    public String getMessage() { return message; }
}
```

### 3. Other Core Principles

-   **DTO Usage:**
    `Controller`s **must never** directly return or receive `Entity` objects as parameters. Always use **DTOs (Data Transfer Objects)** for `Request/Response` purposes to pass data between layers. This reduces coupling between layers, controls data exposure, and helps separate presentation logic from domain logic.

-   **Dependency Injection:**
    Field injection (`@Autowired` on field) is **strictly forbidden**. Only **constructor injection** must be used. It is recommended to use the `@RequiredArgsConstructor` annotation along with the `final` keyword for concise code. Constructor injection ensures immutability, makes circular dependencies easier to detect, and facilitates testing.

-   **RESTful Naming:**
    API endpoints must strictly adhere to **RESTful principles (resources as nouns, actions as HTTP Methods)**.
    -   Resources are typically represented by plural nouns (e.g., `/users`, `/products`).
    -   HTTP Methods are used to clearly indicate CRUD (Create, Read, Update, Delete) actions:
        -   `POST /users` (Create)
        -   `GET /users` (Retrieve all)
        -   `GET /users/{id}` (Retrieve single)
        -   `PUT /users/{id}` (Full update)
        -   `PATCH /users/{id}` (Partial update)
        -   `DELETE /users/{id}` (Delete)
    -   URIs should be hierarchical and predictable.
</file>

<file path="rules/front/design-guide.md">
```markdown
## Linear-Inspired Design System

This design system is built on the core values of professionalism, clarity, and minimalism. Its goal is to minimize unnecessary visual elements, allowing users to focus entirely on their tasks, and to provide a consistent user experience.

### 1. Colors

The color system is clearly defined by functional roles. All colors have been selected with readability and accessibility in mind, providing a consistent experience across both Light and Dark modes.

**Light Mode**

| Role      | Token                     | Hex Code   | Primary Use Case                                   |
| :-------- | :------------------------ | :--------- | :------------------------------------------------- |
| Primary   | `colors.primary.blue`     | `#5e6ad2`  | Core CTAs, active states, focus rings, links       |
|           | `colors.primary.blueHover`| `#4c5bd4`  | Hover state for Primary elements                   |
|           | `colors.primary.blueLight`| `#e8eafd`  | Background for selected items, subtle highlights   |
| Background| `colors.background.primary`| `#ffffff`  | The default background of pages                    |
|           | `colors.background.secondary`| `#f6f8fa` | Background for subtle separations like cards and sections |
|           | `colors.background.tertiary`| `#f1f3f4` | Background for hover or active states              |
| Text      | `colors.text.primary`     | `#0d1117`  | Core text for headings and body content            |
|           | `colors.text.secondary`   | `#656d76`  | Supplementary info, placeholders, disabled text    |
|           | `colors.text.tertiary`    | `#8b949e`  | Text with the lowest priority (e.g., footers)      |
| Border    | `colors.border.primary`   | `#d0d7de`  | Default border for components                      |
|           | `colors.border.secondary` | `#e1e8ed`  | Subtle dividing lines                              |
| Semantic  | `colors.semantic.success` | `#28a745`  | Success, completed states                          |
|           | `colors.semantic.warning` | `#ffc107`  | Warning, caution states                            |
|           | `colors.semantic.error`   | `#dc3545`  | Error, failed states                               |
|           | `colors.semantic.info`    | `#17a2b8`  | Informational messages                             |

**Dark Mode**

| Role      | Token                       | Hex Code   | Primary Use Case                                   |
| :-------- | :-------------------------- | :--------- | :------------------------------------------------- |
| Background| `darkMode.background.primary`| `#0d1117`  | The default background of pages                    |
|           | `darkMode.background.secondary`| `#161b22` | Background for subtle separations like cards and sections |
|           | `darkMode.background.tertiary`| `#21262d` | Background for hover or active states              |
| Text      | `darkMode.text.primary`     | `#f0f6fc`  | Core text for headings and body content            |
|           | `darkMode.text.secondary`   | `#8b949e`  | Supplementary info, placeholders, disabled text    |
|           | `darkMode.text.tertiary`    | `#656d76`  | Text with the lowest priority (e.g., footers)      |
| Border    | `darkMode.border.primary`   | `#30363d`  | Default border for components                      |
|           | `darkMode.border.secondary` | `#21262d`  | Subtle dividing lines                              |

### 2. Typography

We use system-native fonts to prioritize readability and clarity. This provides users with the most familiar experience and clearly communicates the information hierarchy.

*   `fontFamily.primary`: `-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif`
    *   Prioritizes the OS's default system font to ensure optimal readability and performance.
*   `fontFamily.mono`: `'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', ...`
    *   Used when a monospace font is needed, such as for code blocks or numerical data.

| Property  | Token           | Value  | Usage Guide                                     |
| :-------- | :-------------- | :----- | :---------------------------------------------- |
| Font Size | `fontSize.sm`   | `14px` | Meta information, small labels                  |
|           | `fontSize.base` | `16px` | Standard body text                              |
|           | `fontSize.lg`   | `18px` | Subheadings, emphasized text                    |
|           | `fontSize.xl`   | `20px` | Section titles                                  |
|           | `fontSize.2xl`  | `24px` | Page titles                                     |
| Font Weight| `fontWeight.normal`| `400`  | Body                                            |
|           | `fontWeight.medium`| `500`  | Labels, emphasized text                         |
|           | `fontWeight.semibold`| `600` | Headings                                        |
|           | `fontWeight.bold`| `700`  | Strong emphasis                                 |
| Line Height| `lineHeight.normal`| `1.5`  | Standard line height for readability            |
|           | `lineHeight.tight`| `1.25` | Used for headings and compact UI elements       |

### 3. Spacing

A 4px-based scale is used to ensure consistent rhythm and visual order. All margin, padding, and gap properties should adhere to this scale.

*   **2 (8px):** Gap between very close elements, such as an icon and its text.
*   **3 (12px):** Internal padding for small components (badges, tags).
*   **4 (16px):** Default internal padding for components (buttons, inputs). The default gap in layouts.
*   **6 (24px):** Gap between logically distinct UI groups.
*   **8 (32px):** Padding between content and the border within a card. Separation between sections.
*   **12 (48px):** Wide margins that separate major layout regions (e.g., sidebar and content).
*   **16 (64px):** Page-level vertical margins to provide ample breathing room.

### 4. Borders, Radius & Shadows

These are used to create a refined and structured feel. Shadows are used sparingly to express depth and visually communicate an element's hierarchy.

| Property  | Token           | Value      | Usage Guide                                            |
| :-------- | :-------------- | :--------- | :----------------------------------------------------- |
| Radius    | `borderRadius.sm`| `4px`      | Small elements like tags and badges.                   |
|           | `borderRadius.base`| `8px`    | Default. For most UI elements like buttons, inputs, and cards. |
|           | `borderRadius.lg`| `12px`     | Larger containers like modals and popovers.            |
|           | `borderRadius.full`| `9999px` | Avatars and circular profile images.                   |
| Shadow    | `shadows.base`  | `0 1px 3px...`| Default shadow. For elements that float slightly above the page, like dropdowns and tooltips. |
|           | `shadows.lg`    | `0 10px 15px...`| For elements that require user focus, like modals and command palettes. |
|           | `shadows.xl`    | `0 20px 25px...`| Used for critical system notifications or dialogs.     |

### 5. Core Design Principles

These principles are guidelines for applying the design system's tokens to actual UI, ensuring consistency.

*   **Clear Information Hierarchy**
    *   Express the importance of information by combining `fontWeight` and `colors.text` levels (primary, secondary) rather than relying solely on size or color.
    *   Example: Page Title (`fontSize.2xl`, `fontWeight.semibold`), Body (`fontSize.base`, `fontWeight.normal`), Helper Text (`fontSize.sm`, `colors.text.secondary`).

*   **Function-focused Minimalism**
    *   Every design element must have a clear purpose. Avoid unnecessary decorations, excessive color, and complex shadows.
    *   Prioritize using spacing or subtle background colors (`background.secondary`) for separation over strong lines (`border`).

*   **Consistent Interaction Feedback**
    *   All interactive elements must have clear hover, focus, active, and disabled states.
    *   **Hover:** Provide visual feedback using `colors.primary.blueHover` or `background.tertiary`.
    *   **Focus:** A highly visible focus ring (using `outline` or `box-shadow` with `colors.primary.blue`) must always be displayed for keyboard users.
    *   **Animation:** Use `animation.transition.base` (`0.2s ease`) to ensure all state changes feel immediate and smooth.

*   **Accessibility First**
    *   All text and background combinations must meet at least WCAG AA contrast ratios (4.5:1). Pay special attention when using `colors.text.secondary`.
    *   All functionality must be accessible and operable via keyboard only.
    *   Ensure small interactive elements like icon buttons have a sufficient touch area (minimum 44px x 44px).
```
</file>

<file path="rules/front/folder.md">
**Task 1: Create New UI Components**
[IMPORTANT] This rule applies to all UI components in the project.

Rule: All new UI components, from general-purpose components like reusable buttons and avatars to layout components like headers and sidebars, must be created under the `libs/ui-components/src` folder. Never create UI component files under `apps/*` folders.

Path: `libs/ui-components/src/components/`

Action:

1.  Create a new folder with the name of the component to be created. (e.g., Button)
2.  Create an `index.tsx` file within that folder to write the component code.
3.  Apply styling using Tailwind CSS utility classes via the `className` prop.

Example: For "create Header component" or "create Spinner component" requests, write the code in `libs/ui-components/src/components/Header/index.tsx` and `libs/ui-components/src/components/Spinner/index.tsx` respectively.

**Task 2: Add New Page (Route)**
Scope: Applies only to application packages like `apps/dashboard`, `apps/landing-page`.

Path: `apps/[appName]/src/pages/`

Action:

1.  Create a folder with the page name. (e.g., MyPage)
2.  Write the main logic and layout of the page in the `index.tsx` file within that folder.
3.  Pages should be composed by combining components from `libs/ui-components`.

Example: For "add MyPage to dashboard" request, create `apps/dashboard/src/pages/MyPage/index.tsx` and write the relevant logic.

**Task 3: API Integration and Data Management**
Scope: Applies only to application packages that require actual API communication, such as `apps/dashboard`.

**3-1. Add API Call Functions:**

Path: `apps/[appName]/src/services/` (or `src/api/`)

Action: Separate files by functionality (e.g., `userService.ts`). All network request code using axios must be located in this folder.

**3-2. API Data Validation (Zod):**

Path: `apps/[appName]/src/schemas/`

Action: Create Zod schema files by feature/data model, such as `user.schema.ts`, and infer TypeScript types using `z.infer`, then export them together.

**3-3. Global State Management (Zustand):**

Path: `apps/[appName]/src/store/`

Action: Create custom hook files by functionality, such as `useUserStore.ts`.

**Task 4: Other Logic and Type Additions**
Scope: Primarily applies to `apps/*` packages, but some may also apply to `libs/core-logic`.

**4-1. Create Custom Hooks:**

Path: `apps/[appName]/src/hooks/`

Action: Create hook files starting with `use`. (e.g., `useWindowSize.ts`)

**4-2. Define Internal Types (without Zod):**

Path: `apps/[appName]/src/types/`

Action: Only pure TypeScript types (interface, type) that do not require runtime validation should be defined here. (Common API types are located in `libs/api-types`).

**4-3. Add Constant Values:**

Path: `apps/[appName]/src/constants/`

Action: Define constants in files appropriate for their purpose, such as `path.ts` (routing paths), `messages.ts` (notification messages).

**4-4. Add Pure Utility Functions:**

Path: `libs/core-logic/src/` or `apps/[appName]/src/utils/`

Action: General-purpose pure functions (e.g., `formatDate`) that will be used throughout the project should be written in `libs/core-logic`. Utilities used only within a specific app should be written in that app's `utils` folder.
</file>

<file path="rules/front/libary.md">
You are an AI assistant helping with the front-end development of the project. When asked to write or modify code, you must strictly adhere to the following core rules and library usage guidelines.

**Core Rules**

*   **Prioritize Designated Libraries:** For tasks explicitly mentioned in the "Library Usage Guide" below, you must use only the specified libraries. Do not arbitrarily use other libraries.
*   **Automatic Dependency Addition:** When a library listed in the "Library Version Table" needs to be used in a specific package (e.g., dashboard, ui-components), and if that library is not present in the package's `package.json`, you must first add it to `dependencies` or `devDependencies` with the specified version before writing any code.
*   **Propose New Libraries:** If a feature not covered by the guide is required, do not arbitrarily install new libraries. Instead, explain the situation to the user, recommend the most suitable library, and ask for permission to install it.
    *   Example: "It seems an alert (Toast UI) feature is needed. The `sonner` library can easily implement clean notifications. Should I proceed with the installation?"

**Library Version Table**

| Library               | Version     | Primary Usage Location (Package)       | Category      |
| :-------------------- | :---------- | :------------------------------------- | :------------ |
| react                 | ^19.1.1     | dashboard, landing-page, ui-components | dependencies  |
| react-dom             | ^19.1.1     | dashboard, landing-page, ui-components | dependencies  |
| tailwindcss           | ^3.4.6      | (root)                                 | devDependencies |
| @tanstack/react-query | ^5.51.15    | dashboard                              | dependencies  |
| zustand               | ^4.5.4      | dashboard                              | dependencies  |
| axios                 | ^1.7.2      | dashboard                              | dependencies  |
| react-router-dom      | ^6.25.1     | dashboard, landing-page                | dependencies  |
| @clerk/clerk-react    | ^5.2.8      | dashboard, landing-page                | dependencies  |
| react-hook-form       | ^7.52.1     | dashboard                              | dependencies  |
| zod                   | ^3.23.8     | dashboard, core-logic                  | dependencies  |
| recharts              | ^2.12.7     | dashboard                              | dependencies  |
| reactflow             | ^11.11.4    | dashboard                              | dependencies  |
| lucide-react          | ^0.417.0    | dashboard, landing-page                | dependencies  |
| framer-motion         | ^11.3.19    | landing-page                           | dependencies  |
| clsx                  | ^2.1.1      | ui-components                          | dependencies  |
| tailwind-merge        | ^2.4.0      | ui-components                          | dependencies  |
| date-fns              | ^3.6.0      | core-logic                             | dependencies  |
| @storybook/react      | ^8.2.6      | ui-components                          | devDependencies |

**Library Usage Guide**

**Styling and UI**

*   All component styles should be written using **tailwindcss** for utility-class-based styling. Avoid CSS-in-JS or separate CSS files.
*   When icons are needed, use the **lucide-react** library.
*   UI elements (buttons, cards, input fields, etc.) that are repeatedly used across multiple pages should be created as reusable components within the `libs/ui-components` package.
*   When conditionally combining Tailwind classes, use **clsx** and **tailwind-merge** together to prevent class conflicts and duplication.
*   Smooth UI animations and interactions should be implemented using **framer-motion** (primarily for `landing-page`).

**State Management and Data Communication**

*   All API requests and response handling with the backend server should use **axios**.
*   Caching, re-fetching, loading, and error state management for data received from the server (Server State) should use **@tanstack/react-query**. Do not manage server data directly with `useState`.
*   Client-side state (e.g., dark mode settings, modal open status) that needs to be shared across multiple components should be managed using **zustand**.

**Routing and Authentication**

*   Page navigation and URL management for the web application should use **react-router-dom**.
*   User registration, login, and session management should use the components and hooks provided by **@clerk/clerk-react**.

**Forms and Validation**

*   User input forms should use **react-hook-form** to manage state and submission logic.
*   All data (form inputs, API responses, etc.) should have its type and validation performed by defining **zod** schemas.

**Data Visualization**

*   Bar, pie, and line graphs, such as those for learning statistics dashboards, should be implemented using **recharts**.
*   Complex diagrams consisting of nodes and edges, like algorithm solution flows, should use **reactflow**.

**Utility Logic**

*   All date and time formatting, calculations, and related logic should use **date-fns**.
*   Pure function logic that is independent of React and can be commonly used across multiple applications should be written in `libs/core-logic`.
</file>

<file path="rules/global/clean-code.md">
# Clean Code Guidelines

You are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:

## Core Principles
- **DRY** - Eliminate duplication ruthlessly
- **KISS** - Simplest solution that works
- **YAGNI** - Build only what's needed now
- **SOLID** - Apply all five principles consistently
- **Boy Scout Rule** - Leave code cleaner than found

## Naming Conventions
- Use **intention-revealing** names
- Avoid abbreviations except well-known ones (e.g., URL, API)
- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix
- Constants: UPPER_SNAKE_CASE
- No magic numbers - use named constants

## Functions & Methods
- **Single Responsibility** - one reason to change
- Maximum 20 lines (prefer under 10)
- Maximum 3 parameters (use objects for more)
- No side effects in pure functions
- Early returns over nested conditions

## Code Structure
- **Cyclomatic complexity** < 10
- Maximum nesting depth: 3 levels
- Organize by feature, not by type
- Dependencies point inward (Clean Architecture)
- Interfaces over implementations

## Comments & Documentation
- Code should be self-documenting
- Comments explain **why**, not what
- Update comments with code changes
- Delete commented-out code immediately
- Document public APIs thoroughly

## Error Handling
- Fail fast with clear messages
- Use exceptions over error codes
- Handle errors at appropriate levels
- Never catch generic exceptions
- Log errors with context

## Testing
- **TDD** when possible
- Test behavior, not implementation
- One assertion per test
- Descriptive test names: `should_X_when_Y`
- **AAA pattern**: Arrange, Act, Assert
- Maintain test coverage > 80%

## Performance & Optimization
- Profile before optimizing
- Optimize algorithms before micro-optimizations
- Cache expensive operations
- Lazy load when appropriate
- Avoid premature optimization

## Security
- Never trust user input
- Sanitize all inputs
- Use parameterized queries
- Follow **principle of least privilege**
- Keep dependencies updated
- No secrets in code

## Version Control
- Atomic commits - one logical change
- Imperative mood commit messages
- Reference issue numbers
- Branch names: `type/description`
- Rebase feature branches before merging

## Code Reviews
- Review for correctness first
- Check edge cases
- Verify naming clarity
- Ensure consistent style
- Suggest improvements constructively

## Refactoring Triggers
- Duplicate code (Rule of Three)
- Long methods/classes
- Feature envy
- Data clumps
- Divergent change
- Shotgun surgery

## Final Checklist
Before committing, ensure:
- [ ] All tests pass
- [ ] No linting errors
- [ ] No console logs
- [ ] No commented code
- [ ] No TODOs without tickets
- [ ] Performance acceptable
- [ ] Security considered
- [ ] Documentation updated

Remember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.
</file>

<file path="rules/global/git.md">
```markdown
## Git Commit Convention Rules for AI (using MCP - Message Commit Pattern)

This document defines the rules that an AI must follow when writing Git commit messages. Adhering to these rules will help maintain a consistent and clear commit history, facilitating efficient code reviews and change tracking.

---

### 1. Commit Message Structure

All commit messages must follow this structure:

```
<type>: <subject>

[<body>]

[<footer>]
```

**Example:**

```
feat: Add user authentication with JWT

- Implemented user registration endpoint
- Added login functionality
- Integrated JWT token generation and validation

Fixes #123
Refs #456
```

---

### 2. `<type>` (Commit Type) Rules

`<type>` indicates the nature of the commit and must be one of the following. The first letter should be lowercase.

*   **`feat`**: A new feature
*   **`fix`**: A bug fix
*   **`docs`**: Documentation only changes
*   **`style`**: Code style, linting, formatting changes
*   **`refactor`**: A code change that neither fixes a bug nor adds a feature
*   **`perf`**: A code change that improves performance
*   **`test`**: Adding missing tests or correcting existing tests
*   **`build`**: Changes that affect the build system or external dependencies
*   **`ci`**: Changes to our CI configuration files and scripts
*   **`chore`**: Other changes that don't modify src or test files
*   **`revert`**: Reverts a previous commit

---

### 3. `<subject>` (Subject) Rules

`<subject>` concisely and clearly summarizes the commit content.

*   Recommended to be **under 50 characters**.
*   Written in the **imperative mood**. (e.g., "Add user authentication" instead of "Adds user authentication" or "Added user authentication")
*   **Start with a capital letter**.
*   **Do not end with a period (`.`)**.
*   Use the **present tense**. (e.g., "Add feature" rather than "Added feature")

---

### 4. `<body>` (Body) Rules

`<body>` explains the detailed content of the commit and is optional. However, it **must be written if the commit includes more than two feature implementations or complex changes.**

*   **Wrap lines at 72 characters** to ensure readability.
*   Focus on explaining **why** the change was made rather than just **what** was changed.
*   If there are multiple new feature implementations or major changes, **summarize them briefly in a list format**.
    *   Use `-` or `*` to start each item.
    *   Each item should clearly describe the changed feature or resolved issue.
*   Example:
    ```
    - Implemented user registration endpoint with email validation.
    - Added login functionality using username and password.
    - Integrated JWT token generation upon successful login.
    - Configured Spring Security to protect API endpoints with JWT.
    ```

---

### 5. `<footer>` (Footer) Rules

`<footer>` is optional and can include the following information:

*   **Referenced Issue Numbers**: Use formats like `Fixes #123`, `Refs #456`. (e.g., `Fixes #<issue-number>` closes the associated issue. `Refs #<issue-number>` only references it.)
*   **Breaking Changes**: If there are changes that break backward compatibility (e.g., API changes), start with `BREAKING CHANGE:` and provide a description.

---

### 6. General Precautions

*   **A single commit should represent a single logical unit of change.** Try to avoid cramming multiple features into one commit.
*   Provide a **concise and accurate description** of the changes.
*   Be careful to separate unnecessary file or comment changes into separate commits or exclude them from the commit.

---

We hope that AI will effectively learn and apply these rules to improve the quality of the project's commit history.
```
</file>

<file path="rules/global/prd.md">
# 제품 기획서(PRD)

## 1. 제품명
AlgoRevise (가칭) – AI 기반 알고리즘 오답 관리 플랫폼

## 2. 제품 개요
AlgoRevise는 사용자가 풀었던 알고리즘 문제를 등록하면, AI가 풀이 논리 흐름을 자동 분석·시각화하고, 사용자가 막힌 로직을 선택하면 AI 챗봇이 해당 약점을 심층 진단한 뒤 맞춤형 테스트 문제를 출제·평가해 주는 웹앱입니다. 반복 복습과 동기 부여 기능으로 코딩 테스트 합격 가능성을 높여 줍니다.

## 3. 목표
1. 첫 3개월 내 MAU 1,000명 달성
2. 오답 재출제 후 정답률 20%p 이상 향상
3. 프리미엄 전환율 5% 이상

## 4. 타깃 사용자
알고리즘 문제를 집중적으로 학습하며 코딩 테스트를 준비하는 대학생·취준생(20~29세, 개발 직군 지망)

## 5. 문제 진술(Pain Point)
반복적으로 틀린 문제를 체계적으로 관리하지 못해, 같은 유형에서 계속 틀리고 학습 효율이 떨어진다.

## 6. 가치 제안(Value Proposition)
“AI가 약점을 찾아 주고, 맞춤 문제로 다시 훈련해 코딩 테스트 합격선을 확실히 넘게 한다.”

## 7. 주요 기능
### 7.1 핵심 기능
1. 문제 등록 & 풀이 흐름 자동 분석/시각화
2. 약점 구간 선택 → AI 챗봇 심층 분석 & 맞춤 테스트 문제 자동 출제

### 7.2 보조 기능
A. 막힌 로직 시각화 다이어그램
C. 학습 통계 대시보드
F. 레벨·뱃지 시스템

## 8. 사용자 스토리
1. 학생 김코딩은 백준 문제를 풀다 틀린 코드를 플랫폼에 업로드한다.
2. AI가 김코딩의 코드 흐름을 그래프로 보여주고, 논리 오류가 의심되는 단계에 강조 표시를 한다.
3. 김코딩이 막힌 단계(예: DP 전이식 설정)를 클릭한다.
4. AI 챗봇이 해당 단계의 개념과 일반 실수 패턴을 설명하고, 비슷한 난이도의 맞춤 문제를 출제한다.
5. 김코딩이 테스트 문제를 풀고 채점 결과를 확인한다.
6. 정답 시 오답노트는 “완료” 상태가 되며, 설정한 복습 주기(예: 7일) 후 “백로그”로 돌아와 재도전 알림을 받는다.

## 9. MVP 범위
필수:
- 문제 등록(코드/링크 업로드) & AI 분석
- 약점 선택 UI + 챗봇 심층 분석
- 맞춤 문제 자동 출제 및 채점
- 기본 통계(총 문제 수, 완수 비율)

제외(향후):
- 커뮤니티 공유, 다중 사용자 실시간 협업, 모바일 네이티브 앱

## 10. 성공 지표(KPI)
- DAU/MAU 비율 ≥ 25%
- 첫 맞춤 문제 정답률 ≥ 60%
- 복습 완료율 ≥ 40%
- 평균 세션 길이 ≥ 8분

## 11. 비즈니스 모델
Freemium
- 무료: 핵심 기능(문제 등록, AI 분석, 맞춤 문제 1회/일)
- 프리미엄(₩7,900/월): 무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동

## 12. 로드맵
| 분기 | 목표 |
|------|------|
| Q1  | MVP 개발·내부 베타  |
| Q2  | 대학 동아리 워크숍→퍼블릭 런칭, 프리미엄 결제 도입 |
| Q3  | 통계 대시보드·레벨 시스템, 모바일 반응형 개선 |
| Q4  | 커뮤니티 기능 실험, 해외 알고리즘 사이트 연동 |

## 13. 이해관계자 & 역할
- Product Owner(캡틴): 요구사항 우선순위 결정
- PM(Vooster): 기획·프로세스 관리
- AI 엔지니어: 모델 프롬프트·맞춤 문제 생성 로직
- 프론트엔드: React SPA 개발
- 백엔드: API, 데이터베이스, 챗봇 서비스 연동

## 14. 가정 및 리스크
- AI 분석 정확도가 80% 이상이어야 사용자 신뢰 확보(모델 튜닝 필요)
- 맞춤 문제 출제가 저작권 문제를 일으키지 않도록 자체 생성 문제 사용
- 대학생 대상 워크숍 확보 실패 시 초기 유입 지연 가능 → 온라인 커뮤니티 전략 준비

## 15. 성공 조건
- AI가 약점을 ‘눈에 보이게’ 설명하여 페인포인트를 즉시 해결
- 반복 학습 루프 완결(등록→분석→테스트→복습) UX가 5분 이내로 끝남

---
캡틴이 수정·추가하고 싶은 부분이 있으면 언제든 말씀해 주세요!
</file>

<file path="rules/global/step-by-step.md">
## Core Directive
You are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.

## Guiding Principles
- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity
- **Expert-Level Standards**: Every output must meet professional software engineering standards
- **Concrete Results**: Provide specific, actionable details at each step

---

## Phase 1: Codebase Exploration & Analysis
**REQUIRED ACTIONS:**
1. **Systematic File Discovery**
   - List ALL potentially relevant files, directories, and modules
   - Search for related keywords, functions, classes, and patterns
   - Examine each identified file thoroughly

2. **Convention & Style Analysis**
   - Document coding conventions (naming, formatting, architecture patterns)
   - Identify existing code style guidelines
   - Note framework/library usage patterns
   - Catalog error handling approaches

**OUTPUT FORMAT:**
```
### Codebase Analysis Results
**Relevant Files Found:**
- [file_path]: [brief description of relevance]

**Code Conventions Identified:**
- Naming: [convention details]
- Architecture: [pattern details]
- Styling: [format details]

**Key Dependencies & Patterns:**
- [library/framework]: [usage pattern]
```

---

## Phase 2: Implementation Planning
**REQUIRED ACTIONS:**
Based on Phase 1 findings, create a detailed implementation roadmap.

**OUTPUT FORMAT:**
```markdown
## Implementation Plan

### Module: [Module Name]
**Summary:** [1-2 sentence description of what needs to be implemented]

**Tasks:**
- [ ] [Specific implementation task]
- [ ] [Specific implementation task]

**Acceptance Criteria:**
- [ ] [Measurable success criterion]
- [ ] [Measurable success criterion]
- [ ] [Performance/quality requirement]

### Module: [Next Module Name]
[Repeat structure above]
```

---

## Phase 3: Implementation Execution
**REQUIRED ACTIONS:**
1. Implement each module following the plan from Phase 2
2. Verify ALL acceptance criteria are met before proceeding
3. Ensure code adheres to conventions identified in Phase 1

**QUALITY GATES:**
- [ ] All acceptance criteria validated
- [ ] Code follows established conventions
- [ ] Minimalistic approach maintained
- [ ] Expert-level implementation standards met

---

## Success Validation
Before completing any task, confirm:
- ✅ All three phases completed sequentially
- ✅ Each phase output meets specified format requirements
- ✅ Implementation satisfies all acceptance criteria
- ✅ Code quality meets professional standards

## Response Structure
Always structure your response as:
1. **Phase 1 Results**: [Codebase analysis findings]
2. **Phase 2 Plan**: [Implementation roadmap]  
3. **Phase 3 Implementation**: [Actual code with validation]
</file>

<file path="vooster-docs/architecture.md">
# 기술 요구사항 문서 (TRD)

## 1. 기술 요약
- **프로젝트 개요**: AlgoRevise는 React 기반 프론트엔드와 Spring Boot 기반 백엔드를 사용하여 AI 기반 알고리즘 오답 관리 플랫폼을 구축합니다. 사용자가 업로드한 알고리즘 문제의 풀이 흐름을 AI가 분석하고 시각화하며, 사용자는 약점 구간을 선택하여 AI 챗봇의 심층 분석 및 맞춤형 테스트 문제를 제공받습니다. Spring Security를 통해 보안을 강화하고, Spring Data JPA를 사용하여 데이터베이스와 효율적으로 상호 작용합니다. Firebase Storage를 사용하여 문제와 관련된 파일들을 저장하고, Lemon Squeezy를 통해 구독 및 결제 기능을 구현합니다.
- **핵심 기술 스택**: React, TypeScript, Tailwind CSS, Spring Boot, Spring Security, Spring Data JPA, MySQL, Firebase Storage, Lemon Squeezy, Clerk
- **주요 기술 목표**:
    -   빠른 응답 속도와 안정적인 서비스 제공
    -   확장 가능한 아키텍처 설계
    -   높은 수준의 보안 유지
- **주요 기술 가정**:
    -   AI 분석 모델의 정확도가 80% 이상을 유지할 수 있다고 가정합니다.
    -   사용자 트래픽이 예측 가능하며, 필요시 확장 가능하도록 설계합니다.
    -   외부 API(Lemon Squeezy, Firebase)의 안정적인 작동을 가정합니다.

## 2. 기술 스택

| 범주                | 기술 / 라이브러리           | 이유                                                                                  |
| ------------------- | --------------------------- | ------------------------------------------------------------------------------------- |
| 프론트엔드            | React                      | 컴포넌트 기반의 UI 개발에 용이하며, TypeScript와 함께 사용하여 안정성과 개발 효율성을 높입니다. |
| UI 프레임워크         | TypeScript, Tailwind CSS   | TypeScript로 코드의 안정성을 높이고, Tailwind CSS로 빠르고 일관된 UI 스타일링이 가능합니다.          |
| 백엔드                | Spring Boot                | Java 기반의 엔터프라이즈 애플리케이션 개발에 최적화되어 있으며, 빠른 개발과 배포를 지원합니다.   |
| 인증/회원가입         | Clerk                      | 소셜 로그인(구글 등) 및 인증 플로우를 신속하게 구현할 수 있는 인증 서비스입니다.           |
| 보안                  | Spring Security            | 강력한 인증 및 권한 부여 기능을 제공하여 애플리케이션의 보안을 강화합니다.                |
| 데이터베이스 액세스     | Spring Data JPA           | 데이터베이스와의 상호 작용을 단순화하고, ORM을 통해 객체와 데이터베이스 간의 매핑을 쉽게 관리합니다.   |
| 데이터베이스            | MySQL                      | 안정적이고 널리 사용되는 오픈 소스 관계형 데이터베이스입니다.                             |
| 파일 스토리지         | Firebase Storage           | 이미지, 비디오, 오디오 및 기타 사용자 생성 콘텐츠와 같은 파일을 저장하고 제공하는 데 사용됩니다. |
| 결제                  | Lemon Squeezy              | 구독, 라이선스 및 일회성 결제에 대한 안전하고 사용하기 쉬운 결제 솔루션입니다.               |
| AI 분석               | Gemini API + Prompt Engineering     | Gemini API와 프롬프트 엔지니어링을 활용하여 알고리즘 문제 분석 및 맞춤 문제 출제를 수행합니다. |
| API                   | RESTful API                | 프론트엔드와 백엔드 간의 통신을 위한 표준 인터페이스입니다.                              |
| 빌드 도구             | Vite                      | React 프론트엔드(대시보드, 랜딩페이지) 개발 및 번들링, 모노레포 환경에서 빠른 개발 경험을 제공합니다. |
| 빌드 도구(백엔드)      | Maven/Gradle               | Spring Boot 백엔드 빌드 및 의존성 관리를 위해 사용합니다.                                     |
| CI/CD               | Jenkins/GitHub Actions     | 코드 변경 사항을 자동으로 테스트하고 배포하여 개발 프로세스를 간소화합니다.                 |

## 3. 시스템 아키텍처 설계

### Monorepo 전략
- 본 프로젝트는 여러 앱(백엔드, 대시보드, 랜딩페이지)과 공통 라이브러리(lib)를 하나의 저장소에서 관리하는 Monorepo 방식을 사용합니다.
- 각 앱(apps 폴더)은 독립적으로 개발·배포할 수 있으며, libs 폴더에는 공통 타입, 비즈니스 로직, UI 컴포넌트가 포함되어 코드 재사용성과 일관성을 확보합니다.
- Monorepo 환경은 협업 및 CI/CD, 버전 일관성 관리, 공통 자산 활용에 유리합니다.

### 최상위 구성 요소
- **프론트엔드 (React + Clerk)**: 사용자 인터페이스를 제공하고, Clerk를 활용하여 소셜 로그인(구글) 및 회원가입 기능을 제공합니다.
    -   컴포넌트: Google 회원가입/로그인 UI(Clerk), 문제 등록 폼, 풀이 흐름 시각화, 챗봇 인터페이스, 맞춤 문제 풀이 환경, 학습 통계 대시보드
    -   상태 관리: Redux 또는 Context API를 사용하여 애플리케이션 상태를 관리합니다.
- **백엔드 (Spring Boot)**: API 엔드포인트를 제공하고 비즈니스 로직을 처리하며 데이터베이스와 상호 작용합니다.
    -   API 컨트롤러: 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등을 위한 API 제공
    -   서비스 레이어: 비즈니스 로직 구현 (AI 분석 연동, 맞춤 문제 생성, 사용자 관리, 결제 처리)
    -   데이터 액세스 레이어: Spring Data JPA를 사용하여 데이터베이스와 상호 작용
- **AI 분석 서비스 (Gemini API 기반)**: 알고리즘 문제 분석 및 맞춤 문제 생성을 외부 Gemini API를 활용하여 처리합니다.
    -   프롬프트 엔지니어링: Gemini API 호출 시 최적의 결과를 얻기 위해 다양한 프롬프트 전략을 적용합니다.
    -   문제 분석 로직: Gemini API를 통해 문제의 코드 흐름 분석 및 약점 식별을 수행합니다.
    -   맞춤 문제 생성 로직: Gemini API와 프롬프트를 활용해 사용자 약점에 맞는 문제를 생성합니다.
- **데이터베이스 (MySQL)**: 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장합니다.
    -   스키마 설계: 사용자, 문제, 풀이, 결제 테이블 설계
    -   데이터 액세스 최적화: 쿼리 최적화 및 인덱싱
- **파일 스토리지 (Firebase Storage)**: 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장합니다.
    -   파일 업로드 API: 사용자가 파일을 업로드할 수 있는 API 제공
    -   파일 접근 권한 관리: 사용자별 파일 접근 권한 설정

### 최상위 컴포넌트 상호 작용 다이어그램

```mermaid
graph TD
    A[Frontend (React)] --> B(Backend (Spring Boot))
    B --> C{Database (MySQL)}
    B --> D[AI 분석 서비스 (Gemini API)]
    B --> E[Firebase Storage]
    B --> F[Lemon Squeezy]

-   **Frontend (React) -> Backend (Spring Boot)**: 프론트엔드는 API 요청을 통해 백엔드와 통신합니다. 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등의 작업을 수행합니다.
-   **Backend (Spring Boot) -> Database (MySQL)**: 백엔드는 Spring Data JPA를 통해 데이터베이스와 상호 작용합니다. 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장하고 조회합니다.
-   **Backend (Spring Boot) -> AI 분석 서버**: 백엔드는 AI 분석 서버에 문제 분석 및 맞춤 문제 생성을 요청합니다.
-   **Backend (Spring Boot) -> Firebase Storage**: 백엔드는 Firebase Storage에 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장하고 접근합니다.
-   **Backend (Spring Boot) -> Lemon Squeezy**: 백엔드는 Lemon Squeezy API를 통해 구독 및 결제 처리를 수행합니다.

### 코드 구성 및 규칙

**도메인 기반 조직 전략**
- **도메인 분리**: 사용자 관리, 문제 관리, AI 분석, 결제 처리 등 비즈니스 도메인별로 코드를 분리합니다.
- **계층 기반 아키텍처**: 프레젠테이션 (React 컴포넌트), 비즈니스 로직 (Spring 서비스), 데이터 액세스 (Spring Data JPA 레포지토리), 인프라 (외부 API 연동) 계층으로 분리합니다.
- **기능 기반 모듈**: 사용자 인증, 문제 등록, AI 분석, 결제 처리 등 관련 기능을 함께 그룹화합니다.
- **공유 컴포넌트**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트를 전용 공유 모듈에 배치합니다.

**범용 파일 및 폴더 구조**
/
├── apps/
│   ├── backend/                # Spring Boot 백엔드 서비스 (API 서버)
│   ├── dashboard/              # React 기반 관리자/대시보드 사이트 (Vite 기반)
│   └── landing-page/           # React 기반 랜딩 페이지 (Vite 기반)
├── libs/
│   ├── api-types/              # 백엔드 API 요청/응답용 TypeScript 타입 정의
│   ├── core-logic/             # 공통 비즈니스 로직, 유틸 함수 (format, validation 등)
│   └── ui-components/          # 공통 React UI 컴포넌트 (Button, Input 등)
├── database/                   # 데이터베이스 스크립트 및 설정
│   └── schema.sql              # 데이터베이스 스키마 정의
├── .env                        # 환경 변수 파일
├── README.md                   # 프로젝트 설명 및 설정 방법
└── LICENSE                     # 라이선스 정보

### 데이터 흐름 및 통신 패턴
- **클라이언트-서버 통신**: 프론트엔드는 RESTful API를 통해 백엔드와 통신합니다. API 요청/응답 패턴을 사용합니다.
- **데이터베이스 상호 작용**: Spring Data JPA를 사용하여 데이터베이스와 상호 작용합니다. ORM을 통해 객체와 데이터베이스 간의 매핑을 관리합니다.
- **외부 서비스 통합**: Clerk(구글 소셜 로그인 등), Lemon Squeezy API, Firebase Storage API를 사용하여 외부 서비스와 통합합니다. API 키 및 인증 정보를 안전하게 관리합니다.
- **실시간 통신**: 필요에 따라 WebSocket 또는 SSE (Server-Sent Events)를 사용하여 실시간 업데이트를 제공할 수 있습니다. (예: 챗봇 메시지 전송)
- **데이터 동기화**: 분산된 컴포넌트 간의 데이터 일관성을 유지하기 위해 트랜잭션 관리 및 데이터 동기화 전략을 적용합니다.

## 4. 성능 및 최적화 전략

- **데이터베이스 쿼리 최적화**: 쿼리 성능 분석 도구를 사용하여 느린 쿼리를 식별하고 인덱싱 및 쿼리 재작성을 통해 최적화합니다.
- **캐싱**: 자주 액세스하는 데이터를 캐싱하여 데이터베이스 부하를 줄이고 응답 시간을 단축합니다. (예: Redis)
- **코드 최적화**: 불필요한 연산을 제거하고 알고리즘 효율성을 개선하여 코드 실행 속도를 높입니다.
- **로드 밸런싱**: 트래픽이 증가할 경우 로드 밸런서를 사용하여 여러 서버에 트래픽을 분산시켜 시스템 부하를 줄입니다.
- **CDN (콘텐츠 전송 네트워크)**: 정적 자산 (이미지, CSS, JavaScript 파일)을 CDN에 배포하여 사용자에게 더 빠르게 제공합니다.
- **AI 모델 최적화**: AI 분석 모델의 추론 속도를 높이기 위해 모델 경량화, 양자화, GPU 가속 등의 기술을 적용합니다.

## 5. 구현 로드맵 및 마일스톤

### 1단계: 기반 (MVP 구현)
- **핵심 인프라**: 기본 시스템 설정 및 필수 구성 요소 구축 (React, Spring Boot, MySQL, Firebase Storage, Lemon Squeezy 연동)
- **필수 기능**: 문제 등록, AI 분석, 약점 선택 UI, 챗봇 심층 분석, 맞춤 문제 자동 출제 및 채점, 기본 통계 구현
- **기본 보안**: Spring Security를 사용한 인증 및 권한 부여 구현
- **개발 환경**: 개발 환경 설정 및 CI/CD 기본 설정
- **예상 완료 기간**: 3개월

### 2단계: 기능 개선
- **고급 기능**: 프리미엄 기능 (무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동) 구현
- **성능 최적화**: 시스템 성능 개선 (데이터베이스 쿼리 최적화, 캐싱, 코드 최적화)
- **보안 강화**: 고급 보안 기능 구현 (취약점 분석 및 패치, 보안 감사)
- **모니터링 구현**: 시스템 모니터링 설정 및 로그 분석
- **예상 완료 기간**: 3개월

## 6. 위험 평가 및 완화 전략

### 기술적 위험 분석
- **기술 위험**: AI 분석 정확도 부족, 맞춤 문제 생성의 저작권 문제, 외부 API 의존성
- **성능 위험**: 트래픽 증가에 따른 시스템 성능 저하, AI 분석 서버의 응답 시간 지연
- **보안 위험**: SQL 인젝션, XSS 공격, 데이터 유출
- **통합 위험**: 외부 API (Lemon Squeezy, Firebase)의 장애 발생
- **완화 전략**:
    -   AI 모델 튜닝 및 데이터 증강을 통해 분석 정확도 향상
    -   자체 생성 문제 사용 및 저작권 검토
    -   외부 API 장애 대비 대체 API 또는 로컬 캐싱 구현
    -   로드 밸런싱 및 캐싱을 통해 시스템 성능 유지
    -   보안 취약점 점검 및 코드 검토, 보안 라이브러리 사용

### 프로젝트 인도 위험
- **일정 위험**: 개발 일정 지연, 외부 API 변경
- **자원 위험**: 팀 역량 부족, AI 엔지니어 부족
- **품질 위험**: 코드 품질 저하, 테스트 부족
- **배포 위험**: 배포 환경 문제, 롤백 실패
- **비상 계획**:
    -   일정 지연 시 기능 축소 또는 추가 인력 투입
    -   팀 역량 강화를 위한 교육 및 외부 전문가 자문
    -   코드 리뷰 및 자동화된 테스트 강화
    -   배포 전 철저한 테스트 및 롤백 계획 수립
</file>

<file path="vooster-docs/clean-code.md">
# Clean Code Guidelines

You are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:

## Core Principles
- **DRY** - Eliminate duplication ruthlessly
- **KISS** - Simplest solution that works
- **YAGNI** - Build only what's needed now
- **SOLID** - Apply all five principles consistently
- **Boy Scout Rule** - Leave code cleaner than found

## Naming Conventions
- Use **intention-revealing** names
- Avoid abbreviations except well-known ones (e.g., URL, API)
- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix
- Constants: UPPER_SNAKE_CASE
- No magic numbers - use named constants

## Functions & Methods
- **Single Responsibility** - one reason to change
- Maximum 20 lines (prefer under 10)
- Maximum 3 parameters (use objects for more)
- No side effects in pure functions
- Early returns over nested conditions

## Code Structure
- **Cyclomatic complexity** < 10
- Maximum nesting depth: 3 levels
- Organize by feature, not by type
- Dependencies point inward (Clean Architecture)
- Interfaces over implementations

## Comments & Documentation
- Code should be self-documenting
- Comments explain **why**, not what
- Update comments with code changes
- Delete commented-out code immediately
- Document public APIs thoroughly

## Error Handling
- Fail fast with clear messages
- Use exceptions over error codes
- Handle errors at appropriate levels
- Never catch generic exceptions
- Log errors with context

## Testing
- **TDD** when possible
- Test behavior, not implementation
- One assertion per test
- Descriptive test names: `should_X_when_Y`
- **AAA pattern**: Arrange, Act, Assert
- Maintain test coverage > 80%

## Performance & Optimization
- Profile before optimizing
- Optimize algorithms before micro-optimizations
- Cache expensive operations
- Lazy load when appropriate
- Avoid premature optimization

## Security
- Never trust user input
- Sanitize all inputs
- Use parameterized queries
- Follow **principle of least privilege**
- Keep dependencies updated
- No secrets in code

## Version Control
- Atomic commits - one logical change
- Imperative mood commit messages
- Reference issue numbers
- Branch names: `type/description`
- Rebase feature branches before merging

## Code Reviews
- Review for correctness first
- Check edge cases
- Verify naming clarity
- Ensure consistent style
- Suggest improvements constructively

## Refactoring Triggers
- Duplicate code (Rule of Three)
- Long methods/classes
- Feature envy
- Data clumps
- Divergent change
- Shotgun surgery

## Final Checklist
Before committing, ensure:
- [ ] All tests pass
- [ ] No linting errors
- [ ] No console logs
- [ ] No commented code
- [ ] No TODOs without tickets
- [ ] Performance acceptable
- [ ] Security considered
- [ ] Documentation updated

Remember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.
</file>

<file path="vooster-docs/guideline.md">
# AlgoRevise Code Guideline

## 1. Project Overview

AlgoRevise is an AI-powered algorithm problem management platform built using React for the frontend and Spring Boot for the backend. The platform provides AI analysis and visualization of problem-solving logic, AI chatbot support for identifying weaknesses, and custom test problem generation. Key architectural decisions include a component-based React frontend, a RESTful API for communication, a layered Spring Boot backend, and the use of Spring Data JPA for database interaction.

## 2. Core Principles

*   **Maintainability**: Code should be easy to understand, modify, and debug.
*   **Testability**: Code should be designed to facilitate unit and integration testing.
*   **Readability**: Code should be clear, concise, and well-documented.
*   **Performance**: Code should be efficient and optimized for speed and resource usage.
*   **Security**: Code should be written with security in mind, preventing common vulnerabilities.

## 3. Language-Specific Guidelines

### 3.1. React (Frontend)

*   **File Organization**:
    *   Components: `src/components/` (Reusable UI elements)
    *   Pages: `src/pages/` (Route-specific components)
    *   Services: `src/services/` (API interaction logic)
    *   Utils: `src/utils/` (Utility functions)
    *   Types: `src/types/` (Global Type definitions)
*   **Import/Dependency Management**:
    *   Use absolute imports (`src/`) for internal modules.
    *   Declare dependencies in `package.json` and use `npm` or `yarn`.
*   **Error Handling**:
    *   Use `try...catch` blocks for handling API errors.
    *   Implement error boundary components for catching rendering errors.

### 3.2. Spring Boot (Backend)

*   **File Organization**:
    *   Controllers: `src/main/java/com/example/algorevise/controller/` (REST API endpoints)
    *   Services: `src/main/java/com/example/algorevise/service/` (Business logic)
    *   Repositories: `src/main/java/com/example/algorevise/repository/` (Data access)
    *   Models: `src/main/java/com/example/algorevise/model/` (Entities)
    *   DTOs: `src/main/java/com/example/algorevise/dto/` (Data Transfer Objects)
    *   Config: `src/main/java/com/example/algorevise/config/` (Configuration files)
*   **Import/Dependency Management**:
    *   Use Maven (`pom.xml`) for dependency management.
    *   Organize dependencies into logical groups.
*   **Error Handling**:
    *   Use `@ControllerAdvice` for global exception handling.
    *   Return appropriate HTTP status codes and error messages in API responses.

### 3.3. Python (AI Analysis Server - if applicable)

*   **File Organization**:
    *   Models: `src/models/` (Machine learning models)
    *   Utils: `src/utils/` (Utility functions)
    *   Main script: `src/main.py` (Server entry point)
*   **Import/Dependency Management**:
    *   Use `requirements.txt` for dependency management.
    *   Use virtual environments (`venv`) to isolate dependencies.
*   **Error Handling**:
    *   Use `try...except` blocks to handle exceptions.
    *   Implement logging for debugging and monitoring.

## 4. Code Style Rules

### 4.1. MUST Follow:

#### 4.1.1. React (Frontend)

*   **Functional Components**: Use functional components with hooks for state management and side effects.
    *   Rationale: Promotes code reusability, testability, and readability.
    ```typescript
    // MUST: Functional Component with Hooks
    import React, { useState } from 'react';

    const MyComponent: React.FC = () => {
      const [count, setCount] = useState(0);

      return (
        <div>
          <p>Count: {count}</p>
          <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
      );
    };
    ```
*   **TypeScript**: Use TypeScript for type safety and improved code maintainability.
    *   Rationale: Prevents runtime errors and facilitates code refactoring.
    ```typescript
    // MUST: TypeScript interface
    interface User {
      id: number;
      name: string;
      email: string;
    }

    const greetUser = (user: User) => {
      console.log(`Hello, ${user.name}!`);
    };
    ```
*   **Consistent Naming**: Use consistent naming conventions for variables, functions, and components (e.g., `camelCase` for variables and functions, `PascalCase` for components).
    *   Rationale: Improves code readability and maintainability.
*   **Immutability**: Treat state as immutable and use appropriate methods to update it (e.g., spread operator).
    *   Rationale: Prevents unexpected side effects and simplifies state management.
    ```typescript
    // MUST: Immutable state update
    const updateArray = (index: number, newValue: any) => {
      setMyArray(prevArray => [
        ...prevArray.slice(0, index),
        newValue,
        ...prevArray.slice(index + 1)
      ]);
    };
    ```

#### 4.1.2. Spring Boot (Backend)

*   **Layered Architecture**: Adhere to a layered architecture (Controller, Service, Repository) for separation of concerns.
    *   Rationale: Improves code organization, testability, and maintainability.
*   **Dependency Injection**: Use dependency injection to manage dependencies between components.
    *   Rationale: Promotes loose coupling and testability.
    ```java
    // MUST: Dependency Injection
    @Service
    public class UserService {

      private final UserRepository userRepository;

      @Autowired
      public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
      }

      // ...
    }
    ```
*   **RESTful API Design**: Follow RESTful principles for API design (e.g., use appropriate HTTP methods, status codes, and resource naming).
    *   Rationale: Ensures consistency and interoperability.
*   **Spring Data JPA**: Utilize Spring Data JPA for database interactions.
    *   Rationale: Simplifies data access and reduces boilerplate code.
    ```java
    // MUST: Spring Data JPA Repository
    import org.springframework.data.jpa.repository.JpaRepository;
    import com.example.algorevise.model.User;

    public interface UserRepository extends JpaRepository<User, Long> {
      // Custom query methods can be defined here
    }
    ```
*   **DTOs**: Use Data Transfer Objects (DTOs) for transferring data between layers.
    *   Rationale: Decouples data models from API contracts and allows for data transformation.
*   **Logging**: Use a logging framework (e.g., SLF4J) for logging application events.
    *   Rationale: Facilitates debugging, monitoring, and auditing.

#### 4.1.3. General

*   **Code Comments**: Write clear and concise comments to explain complex logic or non-obvious code.
    *   Rationale: Improves code understanding and maintainability.
*   **Unit Tests**: Write unit tests for all critical components and functions.
    *   Rationale: Ensures code quality and prevents regressions.
*   **Error Handling**: Implement robust error handling to prevent application crashes and provide informative error messages.
    *   Rationale: Improves application stability and user experience.

### 4.2. MUST NOT Do:

#### 4.2.1. React (Frontend)

*   **Direct DOM Manipulation**: Avoid direct DOM manipulation using `document.getElementById` or similar methods. Use React's virtual DOM instead.
    *   Rationale: Can lead to performance issues and inconsistencies.
    ```typescript
    // MUST NOT: Direct DOM manipulation
    // document.getElementById('myElement').innerHTML = 'Hello!';

    // MUST: Use React's state and rendering
    const [text, setText] = useState('Hello!');
    // ...
    <div id="myElement">{text}</div>
    ```
*   **Mutating State Directly**: Do not directly mutate the state object. Use `setState` or the hook equivalent to trigger re-renders.
    *   Rationale: Direct mutation can lead to unexpected behavior and prevent React from properly updating the UI.
    ```typescript
    // MUST NOT: Direct state mutation
    // this.state.count = 5; // Incorrect

    // MUST: Use setState or useState hook
    setCount(5); // Correct
    ```
*   **Ignoring Linter Warnings**: Do not ignore linter warnings or errors. Address them promptly to maintain code quality.
    *   Rationale: Linters help identify potential issues and enforce coding standards.

#### 4.2.2. Spring Boot (Backend)

*   **Catching Generic Exceptions**: Avoid catching generic `Exception` without specific handling.
    *   Rationale: Can hide underlying issues and make debugging difficult.
    ```java
    // MUST NOT: Catching generic Exception
    // try {
    //   // ...
    // } catch (Exception e) {
    //   // ...
    // }

    // MUST: Catch specific exceptions
    try {
      // ...
    } catch (SQLException e) {
      // Handle database-related errors
    } catch (IOException e) {
      // Handle file-related errors
    }
    ```
*   **Ignoring Exceptions**: Never ignore exceptions without logging or handling them.
    *   Rationale: Can lead to hidden errors and application instability.
*   **Writing Complex Logic in Controllers**: Avoid writing complex business logic directly in controllers. Move it to the service layer.
    *   Rationale: Keeps controllers clean and promotes separation of concerns.
*   **Hardcoding Configuration**: Avoid hardcoding configuration values (e.g., database URLs, API keys). Use environment variables or configuration files.
    *   Rationale: Improves application portability and security.

#### 4.2.3. General

*   **Long Methods/Functions**: Avoid writing long methods or functions that perform multiple tasks. Break them down into smaller, more manageable units.
    *   Rationale: Improves code readability and testability.
*   **Magic Numbers/Strings**: Avoid using magic numbers or strings directly in the code. Define them as constants with meaningful names.
    *   Rationale: Improves code readability and maintainability.
    ```java
    // MUST NOT: Magic number
    // if (user.getAge() > 18) { ... }

    // MUST: Constant
    private static final int ADULT_AGE = 18;
    if (user.getAge() > ADULT_AGE) { ... }
    ```
*   **Nested Conditional Statements**: Avoid deeply nested conditional statements. Use guard clauses or other techniques to simplify the logic.
    *   Rationale: Improves code readability and reduces complexity.

## 5. Architecture Patterns

### 5.1. Component/Module Structure Guidelines

*   **Frontend (React)**:
    *   **Atomic Design**: Consider using Atomic Design principles to structure components (Atoms, Molecules, Organisms, Templates, Pages).
    *   **Container/Presentational Components**: Separate container components (which handle data fetching and state management) from presentational components (which focus on rendering UI).
*   **Backend (Spring Boot)**:
    *   **Domain-Driven Design (DDD)**: Apply DDD principles to structure the backend code around business domains.
    *   **Microservices**: Consider using a microservices architecture for scalability and maintainability (if the application becomes very large and complex).

### 5.2. Data Flow Patterns

*   **Unidirectional Data Flow (React)**: Follow the unidirectional data flow pattern in React, where data flows from parent to child components.
*   **RESTful API (Frontend/Backend)**: Use RESTful APIs for communication between the frontend and backend.
*   **Event-Driven Architecture (Backend)**: Consider using an event-driven architecture for asynchronous communication between services.

### 5.3. State Management Conventions (React)

*   **Context API**: Use React's Context API for managing global state that is accessed by many components.
*   **Redux (Optional)**: Consider using Redux for more complex state management scenarios, especially when dealing with asynchronous actions and data persistence.
*   **Centralized Store**: Store the application state in a centralized store for predictable state management.

### 5.4. API Design Standards

*   **RESTful Principles**: Adhere to RESTful principles for API design.
*   **Consistent Naming**: Use consistent naming conventions for API endpoints and request/response parameters.
*   **Versioning**: Use API versioning to maintain backward compatibility.
*   **Authentication/Authorization**: Implement proper authentication and authorization mechanisms to secure API endpoints.
*   **Error Handling**: Return informative error messages and appropriate HTTP status codes for API errors.
*   **Data Validation**: Validate all incoming data to prevent invalid data from being processed.
    *   Rationale: Prevents security vulnerabilities and ensures data integrity.
*   **Input Sanitization**: Sanitize all user inputs to prevent XSS and other injection attacks.
    *   Rationale: Improves application security.
```java
    // MUST: Validate input
    @PostMapping("/problems")
    public ResponseEntity<?> createProblem(@Valid @RequestBody ProblemDTO problemDTO, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return ResponseEntity.badRequest().body(bindingResult.getAllErrors());
        }
        // ...
    }
```
```typescript
// MUST: Validate input
function validateEmail(email: string): boolean {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}
```
</file>

<file path="vooster-docs/prd.md">
# 제품 기획서(PRD)

## 1. 제품명
AlgoRevise (가칭) – AI 기반 알고리즘 오답 관리 플랫폼

## 2. 제품 개요
AlgoRevise는 사용자가 풀었던 알고리즘 문제를 등록하면, AI가 풀이 논리 흐름을 자동 분석·시각화하고, 사용자가 막힌 로직을 선택하면 AI 챗봇이 해당 약점을 심층 진단한 뒤 맞춤형 테스트 문제를 출제·평가해 주는 웹앱입니다. 반복 복습과 동기 부여 기능으로 코딩 테스트 합격 가능성을 높여 줍니다.

## 3. 목표
1. 첫 3개월 내 MAU 1,000명 달성
2. 오답 재출제 후 정답률 20%p 이상 향상
3. 프리미엄 전환율 5% 이상

## 4. 타깃 사용자
알고리즘 문제를 집중적으로 학습하며 코딩 테스트를 준비하는 대학생·취준생(20~29세, 개발 직군 지망)

## 5. 문제 진술(Pain Point)
반복적으로 틀린 문제를 체계적으로 관리하지 못해, 같은 유형에서 계속 틀리고 학습 효율이 떨어진다.

## 6. 가치 제안(Value Proposition)
“AI가 약점을 찾아 주고, 맞춤 문제로 다시 훈련해 코딩 테스트 합격선을 확실히 넘게 한다.”

## 7. 주요 기능
### 7.1 핵심 기능
1. 문제 등록 & 풀이 흐름 자동 분석/시각화
2. 약점 구간 선택 → AI 챗봇 심층 분석 & 맞춤 테스트 문제 자동 출제

### 7.2 보조 기능
A. 막힌 로직 시각화 다이어그램
C. 학습 통계 대시보드
F. 레벨·뱃지 시스템

## 8. 사용자 스토리
1. 학생 김코딩은 백준 문제를 풀다 틀린 코드를 플랫폼에 업로드한다.
2. AI가 김코딩의 코드 흐름을 그래프로 보여주고, 논리 오류가 의심되는 단계에 강조 표시를 한다.
3. 김코딩이 막힌 단계(예: DP 전이식 설정)를 클릭한다.
4. AI 챗봇이 해당 단계의 개념과 일반 실수 패턴을 설명하고, 비슷한 난이도의 맞춤 문제를 출제한다.
5. 김코딩이 테스트 문제를 풀고 채점 결과를 확인한다.
6. 정답 시 오답노트는 “완료” 상태가 되며, 설정한 복습 주기(예: 7일) 후 “백로그”로 돌아와 재도전 알림을 받는다.

## 9. MVP 범위
필수:
- 문제 등록(코드/링크 업로드) & AI 분석
- 약점 선택 UI + 챗봇 심층 분석
- 맞춤 문제 자동 출제 및 채점
- 기본 통계(총 문제 수, 완수 비율)

제외(향후):
- 커뮤니티 공유, 다중 사용자 실시간 협업, 모바일 네이티브 앱

## 10. 성공 지표(KPI)
- DAU/MAU 비율 ≥ 25%
- 첫 맞춤 문제 정답률 ≥ 60%
- 복습 완료율 ≥ 40%
- 평균 세션 길이 ≥ 8분

## 11. 비즈니스 모델
Freemium
- 무료: 핵심 기능(문제 등록, AI 분석, 맞춤 문제 1회/일)
- 프리미엄(₩7,900/월): 무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동

## 12. 로드맵
| 분기 | 목표 |
|------|------|
| Q1  | MVP 개발·내부 베타  |
| Q2  | 대학 동아리 워크숍→퍼블릭 런칭, 프리미엄 결제 도입 |
| Q3  | 통계 대시보드·레벨 시스템, 모바일 반응형 개선 |
| Q4  | 커뮤니티 기능 실험, 해외 알고리즘 사이트 연동 |

## 13. 이해관계자 & 역할
- Product Owner(캡틴): 요구사항 우선순위 결정
- PM(Vooster): 기획·프로세스 관리
- AI 엔지니어: 모델 프롬프트·맞춤 문제 생성 로직
- 프론트엔드: React SPA 개발
- 백엔드: API, 데이터베이스, 챗봇 서비스 연동

## 14. 가정 및 리스크
- AI 분석 정확도가 80% 이상이어야 사용자 신뢰 확보(모델 튜닝 필요)
- 맞춤 문제 출제가 저작권 문제를 일으키지 않도록 자체 생성 문제 사용
- 대학생 대상 워크숍 확보 실패 시 초기 유입 지연 가능 → 온라인 커뮤니티 전략 준비

## 15. 성공 조건
- AI가 약점을 ‘눈에 보이게’ 설명하여 페인포인트를 즉시 해결
- 반복 학습 루프 완결(등록→분석→테스트→복습) UX가 5분 이내로 끝남

---
캡틴이 수정·추가하고 싶은 부분이 있으면 언제든 말씀해 주세요!
</file>

<file path="vooster-docs/step-by-step.md">
## Core Directive
You are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.

## Guiding Principles
- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity
- **Expert-Level Standards**: Every output must meet professional software engineering standards
- **Concrete Results**: Provide specific, actionable details at each step

---

## Phase 1: Codebase Exploration & Analysis
**REQUIRED ACTIONS:**
1. **Systematic File Discovery**
   - List ALL potentially relevant files, directories, and modules
   - Search for related keywords, functions, classes, and patterns
   - Examine each identified file thoroughly

2. **Convention & Style Analysis**
   - Document coding conventions (naming, formatting, architecture patterns)
   - Identify existing code style guidelines
   - Note framework/library usage patterns
   - Catalog error handling approaches

**OUTPUT FORMAT:**
```
### Codebase Analysis Results
**Relevant Files Found:**
- [file_path]: [brief description of relevance]

**Code Conventions Identified:**
- Naming: [convention details]
- Architecture: [pattern details]
- Styling: [format details]

**Key Dependencies & Patterns:**
- [library/framework]: [usage pattern]
```

---

## Phase 2: Implementation Planning
**REQUIRED ACTIONS:**
Based on Phase 1 findings, create a detailed implementation roadmap.

**OUTPUT FORMAT:**
```markdown
## Implementation Plan

### Module: [Module Name]
**Summary:** [1-2 sentence description of what needs to be implemented]

**Tasks:**
- [ ] [Specific implementation task]
- [ ] [Specific implementation task]

**Acceptance Criteria:**
- [ ] [Measurable success criterion]
- [ ] [Measurable success criterion]
- [ ] [Performance/quality requirement]

### Module: [Next Module Name]
[Repeat structure above]
```

---

## Phase 3: Implementation Execution
**REQUIRED ACTIONS:**
1. Implement each module following the plan from Phase 2
2. Verify ALL acceptance criteria are met before proceeding
3. Ensure code adheres to conventions identified in Phase 1

**QUALITY GATES:**
- [ ] All acceptance criteria validated
- [ ] Code follows established conventions
- [ ] Minimalistic approach maintained
- [ ] Expert-level implementation standards met

---

## Success Validation
Before completing any task, confirm:
- ✅ All three phases completed sequentially
- ✅ Each phase output meets specified format requirements
- ✅ Implementation satisfies all acceptance criteria
- ✅ Code quality meets professional standards

## Response Structure
Always structure your response as:
1. **Phase 1 Results**: [Codebase analysis findings]
2. **Phase 2 Plan**: [Implementation roadmap]  
3. **Phase 3 Implementation**: [Actual code with validation]
</file>

<file path=".gitignore">
# Dependencies
/node_modules
**/*/node_modules

# Build output
/dist
**/*/dist
/build
**/*/build
/out
**/*/out

# IDE configuration
.idea/
.vscode/

# Log files
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.*.local

# OS generated files
.DS_Store
Thumbs.db

# Gradle
.gradle
/apps/backend/build/
/apps/backend/.gradle/
*.jar
*.war

# Misc
repmix-output.xml
.claude/settings.local.json
</file>

<file path=".vooster/rules.json">
{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 기획서(PRD)\n\n## 1. 제품명\nAlgoRevise (가칭) – AI 기반 알고리즘 오답 관리 플랫폼\n\n## 2. 제품 개요\nAlgoRevise는 사용자가 풀었던 알고리즘 문제를 등록하면, AI가 풀이 논리 흐름을 자동 분석·시각화하고, 사용자가 막힌 로직을 선택하면 AI 챗봇이 해당 약점을 심층 진단한 뒤 맞춤형 테스트 문제를 출제·평가해 주는 웹앱입니다. 반복 복습과 동기 부여 기능으로 코딩 테스트 합격 가능성을 높여 줍니다.\n\n## 3. 목표\n1. 첫 3개월 내 MAU 1,000명 달성\n2. 오답 재출제 후 정답률 20%p 이상 향상\n3. 프리미엄 전환율 5% 이상\n\n## 4. 타깃 사용자\n알고리즘 문제를 집중적으로 학습하며 코딩 테스트를 준비하는 대학생·취준생(20~29세, 개발 직군 지망)\n\n## 5. 문제 진술(Pain Point)\n반복적으로 틀린 문제를 체계적으로 관리하지 못해, 같은 유형에서 계속 틀리고 학습 효율이 떨어진다.\n\n## 6. 가치 제안(Value Proposition)\n“AI가 약점을 찾아 주고, 맞춤 문제로 다시 훈련해 코딩 테스트 합격선을 확실히 넘게 한다.”\n\n## 7. 주요 기능\n### 7.1 핵심 기능\n1. 문제 등록 & 풀이 흐름 자동 분석/시각화\n2. 약점 구간 선택 → AI 챗봇 심층 분석 & 맞춤 테스트 문제 자동 출제\n\n### 7.2 보조 기능\nA. 막힌 로직 시각화 다이어그램\nC. 학습 통계 대시보드\nF. 레벨·뱃지 시스템\n\n## 8. 사용자 스토리\n1. 학생 김코딩은 백준 문제를 풀다 틀린 코드를 플랫폼에 업로드한다.\n2. AI가 김코딩의 코드 흐름을 그래프로 보여주고, 논리 오류가 의심되는 단계에 강조 표시를 한다.\n3. 김코딩이 막힌 단계(예: DP 전이식 설정)를 클릭한다.\n4. AI 챗봇이 해당 단계의 개념과 일반 실수 패턴을 설명하고, 비슷한 난이도의 맞춤 문제를 출제한다.\n5. 김코딩이 테스트 문제를 풀고 채점 결과를 확인한다.\n6. 정답 시 오답노트는 “완료” 상태가 되며, 설정한 복습 주기(예: 7일) 후 “백로그”로 돌아와 재도전 알림을 받는다.\n\n## 9. MVP 범위\n필수:\n- 문제 등록(코드/링크 업로드) & AI 분석\n- 약점 선택 UI + 챗봇 심층 분석\n- 맞춤 문제 자동 출제 및 채점\n- 기본 통계(총 문제 수, 완수 비율)\n\n제외(향후):\n- 커뮤니티 공유, 다중 사용자 실시간 협업, 모바일 네이티브 앱\n\n## 10. 성공 지표(KPI)\n- DAU/MAU 비율 ≥ 25%\n- 첫 맞춤 문제 정답률 ≥ 60%\n- 복습 완료율 ≥ 40%\n- 평균 세션 길이 ≥ 8분\n\n## 11. 비즈니스 모델\nFreemium\n- 무료: 핵심 기능(문제 등록, AI 분석, 맞춤 문제 1회/일)\n- 프리미엄(₩7,900/월): 무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동\n\n## 12. 로드맵\n| 분기 | 목표 |\n|------|------|\n| Q1  | MVP 개발·내부 베타  |\n| Q2  | 대학 동아리 워크숍→퍼블릭 런칭, 프리미엄 결제 도입 |\n| Q3  | 통계 대시보드·레벨 시스템, 모바일 반응형 개선 |\n| Q4  | 커뮤니티 기능 실험, 해외 알고리즘 사이트 연동 |\n\n## 13. 이해관계자 & 역할\n- Product Owner(캡틴): 요구사항 우선순위 결정\n- PM(Vooster): 기획·프로세스 관리\n- AI 엔지니어: 모델 프롬프트·맞춤 문제 생성 로직\n- 프론트엔드: React SPA 개발\n- 백엔드: API, 데이터베이스, 챗봇 서비스 연동\n\n## 14. 가정 및 리스크\n- AI 분석 정확도가 80% 이상이어야 사용자 신뢰 확보(모델 튜닝 필요)\n- 맞춤 문제 출제가 저작권 문제를 일으키지 않도록 자체 생성 문제 사용\n- 대학생 대상 워크숍 확보 실패 시 초기 유입 지연 가능 → 온라인 커뮤니티 전략 준비\n\n## 15. 성공 조건\n- AI가 약점을 ‘눈에 보이게’ 설명하여 페인포인트를 즉시 해결\n- 반복 학습 루프 완결(등록→분석→테스트→복습) UX가 5분 이내로 끝남\n\n---\n캡틴이 수정·추가하고 싶은 부분이 있으면 언제든 말씀해 주세요!",
      "writedAt": "2025-09-13T12:00:28.929Z"
    },
    {
      "type": "architecture",
      "content": "# 기술 요구사항 문서 (TRD)\n\n## 1. 기술 요약\n- **프로젝트 개요**: AlgoRevise는 React 기반 프론트엔드와 Spring Boot 기반 백엔드를 사용하여 AI 기반 알고리즘 오답 관리 플랫폼을 구축합니다. 사용자가 업로드한 알고리즘 문제의 풀이 흐름을 AI가 분석하고 시각화하며, 사용자는 약점 구간을 선택하여 AI 챗봇의 심층 분석 및 맞춤형 테스트 문제를 제공받습니다. Spring Security를 통해 보안을 강화하고, Spring Data JPA를 사용하여 데이터베이스와 효율적으로 상호 작용합니다. Firebase Storage를 사용하여 문제와 관련된 파일들을 저장하고, Lemon Squeezy를 통해 구독 및 결제 기능을 구현합니다.\n- **핵심 기술 스택**: React, TypeScript, Tailwind CSS, Spring Boot, Spring Security, Spring Data JPA, MySQL, Firebase Storage, Lemon Squeezy, Clerk\n- **주요 기술 목표**:\n    -   빠른 응답 속도와 안정적인 서비스 제공\n    -   확장 가능한 아키텍처 설계\n    -   높은 수준의 보안 유지\n- **주요 기술 가정**:\n    -   AI 분석 모델의 정확도가 80% 이상을 유지할 수 있다고 가정합니다.\n    -   사용자 트래픽이 예측 가능하며, 필요시 확장 가능하도록 설계합니다.\n    -   외부 API(Lemon Squeezy, Firebase)의 안정적인 작동을 가정합니다.\n\n## 2. 기술 스택\n\n| 범주                | 기술 / 라이브러리           | 이유                                                                                  |\n| ------------------- | --------------------------- | ------------------------------------------------------------------------------------- |\n| 프론트엔드            | React                      | 컴포넌트 기반의 UI 개발에 용이하며, TypeScript와 함께 사용하여 안정성과 개발 효율성을 높입니다. |\n| UI 프레임워크         | TypeScript, Tailwind CSS   | TypeScript로 코드의 안정성을 높이고, Tailwind CSS로 빠르고 일관된 UI 스타일링이 가능합니다.          |\n| 백엔드                | Spring Boot                | Java 기반의 엔터프라이즈 애플리케이션 개발에 최적화되어 있으며, 빠른 개발과 배포를 지원합니다.   |\n| 인증/회원가입         | Clerk                      | 소셜 로그인(구글 등) 및 인증 플로우를 신속하게 구현할 수 있는 인증 서비스입니다.           |\n| 보안                  | Spring Security            | 강력한 인증 및 권한 부여 기능을 제공하여 애플리케이션의 보안을 강화합니다.                |\n| 데이터베이스 액세스     | Spring Data JPA           | 데이터베이스와의 상호 작용을 단순화하고, ORM을 통해 객체와 데이터베이스 간의 매핑을 쉽게 관리합니다.   |\n| 데이터베이스            | MySQL                      | 안정적이고 널리 사용되는 오픈 소스 관계형 데이터베이스입니다.                             |\n| 파일 스토리지         | Firebase Storage           | 이미지, 비디오, 오디오 및 기타 사용자 생성 콘텐츠와 같은 파일을 저장하고 제공하는 데 사용됩니다. |\n| 결제                  | Lemon Squeezy              | 구독, 라이선스 및 일회성 결제에 대한 안전하고 사용하기 쉬운 결제 솔루션입니다.               |\n| AI 분석               | Gemini API + Prompt Engineering     | Gemini API와 프롬프트 엔지니어링을 활용하여 알고리즘 문제 분석 및 맞춤 문제 출제를 수행합니다. |\n| API                   | RESTful API                | 프론트엔드와 백엔드 간의 통신을 위한 표준 인터페이스입니다.                              |\n| 빌드 도구             | Vite                      | React 프론트엔드(대시보드, 랜딩페이지) 개발 및 번들링, 모노레포 환경에서 빠른 개발 경험을 제공합니다. |\n| 빌드 도구(백엔드)      | Maven/Gradle               | Spring Boot 백엔드 빌드 및 의존성 관리를 위해 사용합니다.                                     |\n| CI/CD               | Jenkins/GitHub Actions     | 코드 변경 사항을 자동으로 테스트하고 배포하여 개발 프로세스를 간소화합니다.                 |\n\n## 3. 시스템 아키텍처 설계\n\n### Monorepo 전략\n- 본 프로젝트는 여러 앱(백엔드, 대시보드, 랜딩페이지)과 공통 라이브러리(lib)를 하나의 저장소에서 관리하는 Monorepo 방식을 사용합니다.\n- 각 앱(apps 폴더)은 독립적으로 개발·배포할 수 있으며, libs 폴더에는 공통 타입, 비즈니스 로직, UI 컴포넌트가 포함되어 코드 재사용성과 일관성을 확보합니다.\n- Monorepo 환경은 협업 및 CI/CD, 버전 일관성 관리, 공통 자산 활용에 유리합니다.\n\n### 최상위 구성 요소\n- **프론트엔드 (React + Clerk)**: 사용자 인터페이스를 제공하고, Clerk를 활용하여 소셜 로그인(구글) 및 회원가입 기능을 제공합니다.\n    -   컴포넌트: Google 회원가입/로그인 UI(Clerk), 문제 등록 폼, 풀이 흐름 시각화, 챗봇 인터페이스, 맞춤 문제 풀이 환경, 학습 통계 대시보드\n    -   상태 관리: Redux 또는 Context API를 사용하여 애플리케이션 상태를 관리합니다.\n- **백엔드 (Spring Boot)**: API 엔드포인트를 제공하고 비즈니스 로직을 처리하며 데이터베이스와 상호 작용합니다.\n    -   API 컨트롤러: 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등을 위한 API 제공\n    -   서비스 레이어: 비즈니스 로직 구현 (AI 분석 연동, 맞춤 문제 생성, 사용자 관리, 결제 처리)\n    -   데이터 액세스 레이어: Spring Data JPA를 사용하여 데이터베이스와 상호 작용\n- **AI 분석 서비스 (Gemini API 기반)**: 알고리즘 문제 분석 및 맞춤 문제 생성을 외부 Gemini API를 활용하여 처리합니다.\n    -   프롬프트 엔지니어링: Gemini API 호출 시 최적의 결과를 얻기 위해 다양한 프롬프트 전략을 적용합니다.\n    -   문제 분석 로직: Gemini API를 통해 문제의 코드 흐름 분석 및 약점 식별을 수행합니다.\n    -   맞춤 문제 생성 로직: Gemini API와 프롬프트를 활용해 사용자 약점에 맞는 문제를 생성합니다.\n- **데이터베이스 (MySQL)**: 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장합니다.\n    -   스키마 설계: 사용자, 문제, 풀이, 결제 테이블 설계\n    -   데이터 액세스 최적화: 쿼리 최적화 및 인덱싱\n- **파일 스토리지 (Firebase Storage)**: 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장합니다.\n    -   파일 업로드 API: 사용자가 파일을 업로드할 수 있는 API 제공\n    -   파일 접근 권한 관리: 사용자별 파일 접근 권한 설정\n\n### 최상위 컴포넌트 상호 작용 다이어그램\n\n```mermaid\ngraph TD\n    A[Frontend (React)] --> B(Backend (Spring Boot))\n    B --> C{Database (MySQL)}\n    B --> D[AI 분석 서비스 (Gemini API)]\n    B --> E[Firebase Storage]\n    B --> F[Lemon Squeezy]\n\n-   **Frontend (React) -> Backend (Spring Boot)**: 프론트엔드는 API 요청을 통해 백엔드와 통신합니다. 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등의 작업을 수행합니다.\n-   **Backend (Spring Boot) -> Database (MySQL)**: 백엔드는 Spring Data JPA를 통해 데이터베이스와 상호 작용합니다. 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장하고 조회합니다.\n-   **Backend (Spring Boot) -> AI 분석 서버**: 백엔드는 AI 분석 서버에 문제 분석 및 맞춤 문제 생성을 요청합니다.\n-   **Backend (Spring Boot) -> Firebase Storage**: 백엔드는 Firebase Storage에 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장하고 접근합니다.\n-   **Backend (Spring Boot) -> Lemon Squeezy**: 백엔드는 Lemon Squeezy API를 통해 구독 및 결제 처리를 수행합니다.\n\n### 코드 구성 및 규칙\n\n**도메인 기반 조직 전략**\n- **도메인 분리**: 사용자 관리, 문제 관리, AI 분석, 결제 처리 등 비즈니스 도메인별로 코드를 분리합니다.\n- **계층 기반 아키텍처**: 프레젠테이션 (React 컴포넌트), 비즈니스 로직 (Spring 서비스), 데이터 액세스 (Spring Data JPA 레포지토리), 인프라 (외부 API 연동) 계층으로 분리합니다.\n- **기능 기반 모듈**: 사용자 인증, 문제 등록, AI 분석, 결제 처리 등 관련 기능을 함께 그룹화합니다.\n- **공유 컴포넌트**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트를 전용 공유 모듈에 배치합니다.\n\n**범용 파일 및 폴더 구조**\n/\n├── apps/\n│   ├── backend/                # Spring Boot 백엔드 서비스 (API 서버)\n│   ├── dashboard/              # React 기반 관리자/대시보드 사이트 (Vite 기반)\n│   └── landing-page/           # React 기반 랜딩 페이지 (Vite 기반)\n├── libs/\n│   ├── api-types/              # 백엔드 API 요청/응답용 TypeScript 타입 정의\n│   ├── core-logic/             # 공통 비즈니스 로직, 유틸 함수 (format, validation 등)\n│   └── ui-components/          # 공통 React UI 컴포넌트 (Button, Input 등)\n├── database/                   # 데이터베이스 스크립트 및 설정\n│   └── schema.sql              # 데이터베이스 스키마 정의\n├── .env                        # 환경 변수 파일\n├── README.md                   # 프로젝트 설명 및 설정 방법\n└── LICENSE                     # 라이선스 정보\n\n### 데이터 흐름 및 통신 패턴\n- **클라이언트-서버 통신**: 프론트엔드는 RESTful API를 통해 백엔드와 통신합니다. API 요청/응답 패턴을 사용합니다.\n- **데이터베이스 상호 작용**: Spring Data JPA를 사용하여 데이터베이스와 상호 작용합니다. ORM을 통해 객체와 데이터베이스 간의 매핑을 관리합니다.\n- **외부 서비스 통합**: Clerk(구글 소셜 로그인 등), Lemon Squeezy API, Firebase Storage API를 사용하여 외부 서비스와 통합합니다. API 키 및 인증 정보를 안전하게 관리합니다.\n- **실시간 통신**: 필요에 따라 WebSocket 또는 SSE (Server-Sent Events)를 사용하여 실시간 업데이트를 제공할 수 있습니다. (예: 챗봇 메시지 전송)\n- **데이터 동기화**: 분산된 컴포넌트 간의 데이터 일관성을 유지하기 위해 트랜잭션 관리 및 데이터 동기화 전략을 적용합니다.\n\n## 4. 성능 및 최적화 전략\n\n- **데이터베이스 쿼리 최적화**: 쿼리 성능 분석 도구를 사용하여 느린 쿼리를 식별하고 인덱싱 및 쿼리 재작성을 통해 최적화합니다.\n- **캐싱**: 자주 액세스하는 데이터를 캐싱하여 데이터베이스 부하를 줄이고 응답 시간을 단축합니다. (예: Redis)\n- **코드 최적화**: 불필요한 연산을 제거하고 알고리즘 효율성을 개선하여 코드 실행 속도를 높입니다.\n- **로드 밸런싱**: 트래픽이 증가할 경우 로드 밸런서를 사용하여 여러 서버에 트래픽을 분산시켜 시스템 부하를 줄입니다.\n- **CDN (콘텐츠 전송 네트워크)**: 정적 자산 (이미지, CSS, JavaScript 파일)을 CDN에 배포하여 사용자에게 더 빠르게 제공합니다.\n- **AI 모델 최적화**: AI 분석 모델의 추론 속도를 높이기 위해 모델 경량화, 양자화, GPU 가속 등의 기술을 적용합니다.\n\n## 5. 구현 로드맵 및 마일스톤\n\n### 1단계: 기반 (MVP 구현)\n- **핵심 인프라**: 기본 시스템 설정 및 필수 구성 요소 구축 (React, Spring Boot, MySQL, Firebase Storage, Lemon Squeezy 연동)\n- **필수 기능**: 문제 등록, AI 분석, 약점 선택 UI, 챗봇 심층 분석, 맞춤 문제 자동 출제 및 채점, 기본 통계 구현\n- **기본 보안**: Spring Security를 사용한 인증 및 권한 부여 구현\n- **개발 환경**: 개발 환경 설정 및 CI/CD 기본 설정\n- **예상 완료 기간**: 3개월\n\n### 2단계: 기능 개선\n- **고급 기능**: 프리미엄 기능 (무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동) 구현\n- **성능 최적화**: 시스템 성능 개선 (데이터베이스 쿼리 최적화, 캐싱, 코드 최적화)\n- **보안 강화**: 고급 보안 기능 구현 (취약점 분석 및 패치, 보안 감사)\n- **모니터링 구현**: 시스템 모니터링 설정 및 로그 분석\n- **예상 완료 기간**: 3개월\n\n## 6. 위험 평가 및 완화 전략\n\n### 기술적 위험 분석\n- **기술 위험**: AI 분석 정확도 부족, 맞춤 문제 생성의 저작권 문제, 외부 API 의존성\n- **성능 위험**: 트래픽 증가에 따른 시스템 성능 저하, AI 분석 서버의 응답 시간 지연\n- **보안 위험**: SQL 인젝션, XSS 공격, 데이터 유출\n- **통합 위험**: 외부 API (Lemon Squeezy, Firebase)의 장애 발생\n- **완화 전략**:\n    -   AI 모델 튜닝 및 데이터 증강을 통해 분석 정확도 향상\n    -   자체 생성 문제 사용 및 저작권 검토\n    -   외부 API 장애 대비 대체 API 또는 로컬 캐싱 구현\n    -   로드 밸런싱 및 캐싱을 통해 시스템 성능 유지\n    -   보안 취약점 점검 및 코드 검토, 보안 라이브러리 사용\n\n### 프로젝트 인도 위험\n- **일정 위험**: 개발 일정 지연, 외부 API 변경\n- **자원 위험**: 팀 역량 부족, AI 엔지니어 부족\n- **품질 위험**: 코드 품질 저하, 테스트 부족\n- **배포 위험**: 배포 환경 문제, 롤백 실패\n- **비상 계획**:\n    -   일정 지연 시 기능 축소 또는 추가 인력 투입\n    -   팀 역량 강화를 위한 교육 및 외부 전문가 자문\n    -   코드 리뷰 및 자동화된 테스트 강화\n    -   배포 전 철저한 테스트 및 롤백 계획 수립\n",
      "writedAt": "2025-09-13T12:00:28.930Z"
    },
    {
      "type": "guideline",
      "content": "# AlgoRevise Code Guideline\n\n## 1. Project Overview\n\nAlgoRevise is an AI-powered algorithm problem management platform built using React for the frontend and Spring Boot for the backend. The platform provides AI analysis and visualization of problem-solving logic, AI chatbot support for identifying weaknesses, and custom test problem generation. Key architectural decisions include a component-based React frontend, a RESTful API for communication, a layered Spring Boot backend, and the use of Spring Data JPA for database interaction.\n\n## 2. Core Principles\n\n*   **Maintainability**: Code should be easy to understand, modify, and debug.\n*   **Testability**: Code should be designed to facilitate unit and integration testing.\n*   **Readability**: Code should be clear, concise, and well-documented.\n*   **Performance**: Code should be efficient and optimized for speed and resource usage.\n*   **Security**: Code should be written with security in mind, preventing common vulnerabilities.\n\n## 3. Language-Specific Guidelines\n\n### 3.1. React (Frontend)\n\n*   **File Organization**:\n    *   Components: `src/components/` (Reusable UI elements)\n    *   Pages: `src/pages/` (Route-specific components)\n    *   Services: `src/services/` (API interaction logic)\n    *   Utils: `src/utils/` (Utility functions)\n    *   Types: `src/types/` (Global Type definitions)\n*   **Import/Dependency Management**:\n    *   Use absolute imports (`src/`) for internal modules.\n    *   Declare dependencies in `package.json` and use `npm` or `yarn`.\n*   **Error Handling**:\n    *   Use `try...catch` blocks for handling API errors.\n    *   Implement error boundary components for catching rendering errors.\n\n### 3.2. Spring Boot (Backend)\n\n*   **File Organization**:\n    *   Controllers: `src/main/java/com/example/algorevise/controller/` (REST API endpoints)\n    *   Services: `src/main/java/com/example/algorevise/service/` (Business logic)\n    *   Repositories: `src/main/java/com/example/algorevise/repository/` (Data access)\n    *   Models: `src/main/java/com/example/algorevise/model/` (Entities)\n    *   DTOs: `src/main/java/com/example/algorevise/dto/` (Data Transfer Objects)\n    *   Config: `src/main/java/com/example/algorevise/config/` (Configuration files)\n*   **Import/Dependency Management**:\n    *   Use Maven (`pom.xml`) for dependency management.\n    *   Organize dependencies into logical groups.\n*   **Error Handling**:\n    *   Use `@ControllerAdvice` for global exception handling.\n    *   Return appropriate HTTP status codes and error messages in API responses.\n\n### 3.3. Python (AI Analysis Server - if applicable)\n\n*   **File Organization**:\n    *   Models: `src/models/` (Machine learning models)\n    *   Utils: `src/utils/` (Utility functions)\n    *   Main script: `src/main.py` (Server entry point)\n*   **Import/Dependency Management**:\n    *   Use `requirements.txt` for dependency management.\n    *   Use virtual environments (`venv`) to isolate dependencies.\n*   **Error Handling**:\n    *   Use `try...except` blocks to handle exceptions.\n    *   Implement logging for debugging and monitoring.\n\n## 4. Code Style Rules\n\n### 4.1. MUST Follow:\n\n#### 4.1.1. React (Frontend)\n\n*   **Functional Components**: Use functional components with hooks for state management and side effects.\n    *   Rationale: Promotes code reusability, testability, and readability.\n    ```typescript\n    // MUST: Functional Component with Hooks\n    import React, { useState } from 'react';\n\n    const MyComponent: React.FC = () => {\n      const [count, setCount] = useState(0);\n\n      return (\n        <div>\n          <p>Count: {count}</p>\n          <button onClick={() => setCount(count + 1)}>Increment</button>\n        </div>\n      );\n    };\n    ```\n*   **TypeScript**: Use TypeScript for type safety and improved code maintainability.\n    *   Rationale: Prevents runtime errors and facilitates code refactoring.\n    ```typescript\n    // MUST: TypeScript interface\n    interface User {\n      id: number;\n      name: string;\n      email: string;\n    }\n\n    const greetUser = (user: User) => {\n      console.log(`Hello, ${user.name}!`);\n    };\n    ```\n*   **Consistent Naming**: Use consistent naming conventions for variables, functions, and components (e.g., `camelCase` for variables and functions, `PascalCase` for components).\n    *   Rationale: Improves code readability and maintainability.\n*   **Immutability**: Treat state as immutable and use appropriate methods to update it (e.g., spread operator).\n    *   Rationale: Prevents unexpected side effects and simplifies state management.\n    ```typescript\n    // MUST: Immutable state update\n    const updateArray = (index: number, newValue: any) => {\n      setMyArray(prevArray => [\n        ...prevArray.slice(0, index),\n        newValue,\n        ...prevArray.slice(index + 1)\n      ]);\n    };\n    ```\n\n#### 4.1.2. Spring Boot (Backend)\n\n*   **Layered Architecture**: Adhere to a layered architecture (Controller, Service, Repository) for separation of concerns.\n    *   Rationale: Improves code organization, testability, and maintainability.\n*   **Dependency Injection**: Use dependency injection to manage dependencies between components.\n    *   Rationale: Promotes loose coupling and testability.\n    ```java\n    // MUST: Dependency Injection\n    @Service\n    public class UserService {\n\n      private final UserRepository userRepository;\n\n      @Autowired\n      public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n      }\n\n      // ...\n    }\n    ```\n*   **RESTful API Design**: Follow RESTful principles for API design (e.g., use appropriate HTTP methods, status codes, and resource naming).\n    *   Rationale: Ensures consistency and interoperability.\n*   **Spring Data JPA**: Utilize Spring Data JPA for database interactions.\n    *   Rationale: Simplifies data access and reduces boilerplate code.\n    ```java\n    // MUST: Spring Data JPA Repository\n    import org.springframework.data.jpa.repository.JpaRepository;\n    import com.example.algorevise.model.User;\n\n    public interface UserRepository extends JpaRepository<User, Long> {\n      // Custom query methods can be defined here\n    }\n    ```\n*   **DTOs**: Use Data Transfer Objects (DTOs) for transferring data between layers.\n    *   Rationale: Decouples data models from API contracts and allows for data transformation.\n*   **Logging**: Use a logging framework (e.g., SLF4J) for logging application events.\n    *   Rationale: Facilitates debugging, monitoring, and auditing.\n\n#### 4.1.3. General\n\n*   **Code Comments**: Write clear and concise comments to explain complex logic or non-obvious code.\n    *   Rationale: Improves code understanding and maintainability.\n*   **Unit Tests**: Write unit tests for all critical components and functions.\n    *   Rationale: Ensures code quality and prevents regressions.\n*   **Error Handling**: Implement robust error handling to prevent application crashes and provide informative error messages.\n    *   Rationale: Improves application stability and user experience.\n\n### 4.2. MUST NOT Do:\n\n#### 4.2.1. React (Frontend)\n\n*   **Direct DOM Manipulation**: Avoid direct DOM manipulation using `document.getElementById` or similar methods. Use React's virtual DOM instead.\n    *   Rationale: Can lead to performance issues and inconsistencies.\n    ```typescript\n    // MUST NOT: Direct DOM manipulation\n    // document.getElementById('myElement').innerHTML = 'Hello!';\n\n    // MUST: Use React's state and rendering\n    const [text, setText] = useState('Hello!');\n    // ...\n    <div id=\"myElement\">{text}</div>\n    ```\n*   **Mutating State Directly**: Do not directly mutate the state object. Use `setState` or the hook equivalent to trigger re-renders.\n    *   Rationale: Direct mutation can lead to unexpected behavior and prevent React from properly updating the UI.\n    ```typescript\n    // MUST NOT: Direct state mutation\n    // this.state.count = 5; // Incorrect\n\n    // MUST: Use setState or useState hook\n    setCount(5); // Correct\n    ```\n*   **Ignoring Linter Warnings**: Do not ignore linter warnings or errors. Address them promptly to maintain code quality.\n    *   Rationale: Linters help identify potential issues and enforce coding standards.\n\n#### 4.2.2. Spring Boot (Backend)\n\n*   **Catching Generic Exceptions**: Avoid catching generic `Exception` without specific handling.\n    *   Rationale: Can hide underlying issues and make debugging difficult.\n    ```java\n    // MUST NOT: Catching generic Exception\n    // try {\n    //   // ...\n    // } catch (Exception e) {\n    //   // ...\n    // }\n\n    // MUST: Catch specific exceptions\n    try {\n      // ...\n    } catch (SQLException e) {\n      // Handle database-related errors\n    } catch (IOException e) {\n      // Handle file-related errors\n    }\n    ```\n*   **Ignoring Exceptions**: Never ignore exceptions without logging or handling them.\n    *   Rationale: Can lead to hidden errors and application instability.\n*   **Writing Complex Logic in Controllers**: Avoid writing complex business logic directly in controllers. Move it to the service layer.\n    *   Rationale: Keeps controllers clean and promotes separation of concerns.\n*   **Hardcoding Configuration**: Avoid hardcoding configuration values (e.g., database URLs, API keys). Use environment variables or configuration files.\n    *   Rationale: Improves application portability and security.\n\n#### 4.2.3. General\n\n*   **Long Methods/Functions**: Avoid writing long methods or functions that perform multiple tasks. Break them down into smaller, more manageable units.\n    *   Rationale: Improves code readability and testability.\n*   **Magic Numbers/Strings**: Avoid using magic numbers or strings directly in the code. Define them as constants with meaningful names.\n    *   Rationale: Improves code readability and maintainability.\n    ```java\n    // MUST NOT: Magic number\n    // if (user.getAge() > 18) { ... }\n\n    // MUST: Constant\n    private static final int ADULT_AGE = 18;\n    if (user.getAge() > ADULT_AGE) { ... }\n    ```\n*   **Nested Conditional Statements**: Avoid deeply nested conditional statements. Use guard clauses or other techniques to simplify the logic.\n    *   Rationale: Improves code readability and reduces complexity.\n\n## 5. Architecture Patterns\n\n### 5.1. Component/Module Structure Guidelines\n\n*   **Frontend (React)**:\n    *   **Atomic Design**: Consider using Atomic Design principles to structure components (Atoms, Molecules, Organisms, Templates, Pages).\n    *   **Container/Presentational Components**: Separate container components (which handle data fetching and state management) from presentational components (which focus on rendering UI).\n*   **Backend (Spring Boot)**:\n    *   **Domain-Driven Design (DDD)**: Apply DDD principles to structure the backend code around business domains.\n    *   **Microservices**: Consider using a microservices architecture for scalability and maintainability (if the application becomes very large and complex).\n\n### 5.2. Data Flow Patterns\n\n*   **Unidirectional Data Flow (React)**: Follow the unidirectional data flow pattern in React, where data flows from parent to child components.\n*   **RESTful API (Frontend/Backend)**: Use RESTful APIs for communication between the frontend and backend.\n*   **Event-Driven Architecture (Backend)**: Consider using an event-driven architecture for asynchronous communication between services.\n\n### 5.3. State Management Conventions (React)\n\n*   **Context API**: Use React's Context API for managing global state that is accessed by many components.\n*   **Redux (Optional)**: Consider using Redux for more complex state management scenarios, especially when dealing with asynchronous actions and data persistence.\n*   **Centralized Store**: Store the application state in a centralized store for predictable state management.\n\n### 5.4. API Design Standards\n\n*   **RESTful Principles**: Adhere to RESTful principles for API design.\n*   **Consistent Naming**: Use consistent naming conventions for API endpoints and request/response parameters.\n*   **Versioning**: Use API versioning to maintain backward compatibility.\n*   **Authentication/Authorization**: Implement proper authentication and authorization mechanisms to secure API endpoints.\n*   **Error Handling**: Return informative error messages and appropriate HTTP status codes for API errors.\n*   **Data Validation**: Validate all incoming data to prevent invalid data from being processed.\n    *   Rationale: Prevents security vulnerabilities and ensures data integrity.\n*   **Input Sanitization**: Sanitize all user inputs to prevent XSS and other injection attacks.\n    *   Rationale: Improves application security.\n```java\n    // MUST: Validate input\n    @PostMapping(\"/problems\")\n    public ResponseEntity<?> createProblem(@Valid @RequestBody ProblemDTO problemDTO, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            return ResponseEntity.badRequest().body(bindingResult.getAllErrors());\n        }\n        // ...\n    }\n```\n```typescript\n// MUST: Validate input\nfunction validateEmail(email: string): boolean {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n```\n",
      "writedAt": "2025-09-13T12:00:28.930Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-13T12:00:28.930Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-13T12:00:28.930Z"
    }
  ]
}
</file>

<file path=".vooster/vooster.json">
{
  "apiKey": "ak_g8ndaubdmjt6dnwvq4vt0kjd",
  "email": "wnsdudsla00@gmail.com",
  "savedAt": "2025-09-13T12:00:28.778Z"
}
</file>

<file path="apps/backend/build.gradle">
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'algorithm_note'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.github.alexdlaird:java-ngrok:2.3.16'
	implementation "com.svix:svix:1.76.1"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
</file>

<file path="apps/backend/settings.gradle">
rootProject.name = 'algorithm_note_v2'

include 'backend'
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/config/SecurityConfig.java">
package algorithm_note.algorithm_note_v2.global.config;

import algorithm_note.algorithm_note_v2.global.filter.ClerkJwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * Security configuration for the application with Clerk JWT authentication.
 */
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final ClerkJwtAuthenticationFilter clerkJwtAuthenticationFilter;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/webhooks/**", "/public/**", "/actuator/**").permitAll()
                .requestMatchers("/api/**").authenticated()
                .anyRequest().authenticated()
            )
            .addFilterBefore(clerkJwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/user/service/UserService.java">
package algorithm_note.algorithm_note_v2.user.service;

import algorithm_note.algorithm_note_v2.user.domain.User;
import algorithm_note.algorithm_note_v2.user.dto.UserRegisterRequestDto;
import algorithm_note.algorithm_note_v2.user.dto.UserUpdateRequestDto;
import algorithm_note.algorithm_note_v2.user.exception.UserNotFoundException;
import algorithm_note.algorithm_note_v2.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

/**
 * Service for managing User entities with Just-In-Time provisioning.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;

    @Transactional
    public User findOrCreateUser(Map<String, Object> jwtClaims) {
        String clerkId = extractClerkId(jwtClaims);
        String email = extractEmail(jwtClaims);
        String firstName = extractFirstName(jwtClaims);
        String lastName = extractLastName(jwtClaims);

        return userRepository.findByClerkId(clerkId)
                .map(existingUser -> updateExistingUser(existingUser, email, firstName, lastName))
                .orElseGet(() -> createNewUser(clerkId, email, firstName, lastName));
    }

    private User updateExistingUser(User existingUser, String email, String firstName, String lastName) {
        User updatedUser = existingUser.updateFromJwtClaims(email, firstName, lastName);
        User savedUser = userRepository.save(updatedUser);
        log.info("Updated existing user with Clerk ID: {}", existingUser.getClerkId());
        return savedUser;
    }

    private User createNewUser(String clerkId, String email, String firstName, String lastName) {
        User newUser = User.builder()
                .clerkId(clerkId)
                .email(email)
                .firstName(firstName)
                .lastName(lastName)
                .build();

        User savedUser = userRepository.save(newUser);
        log.info("Created new user with Clerk ID: {}", clerkId);
        return savedUser;
    }

    private String extractClerkId(Map<String, Object> jwtClaims) {
        String clerkId = (String) jwtClaims.get("sub");
        if (clerkId == null || clerkId.trim().isEmpty()) {
            throw new IllegalArgumentException("Missing or empty Clerk ID in JWT claims");
        }
        return clerkId;
    }

    private String extractEmail(Map<String, Object> jwtClaims) {
        String email = (String) jwtClaims.get("email");
        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException("Missing or empty email in JWT claims");
        }
        return email;
    }

    private String extractFirstName(Map<String, Object> jwtClaims) {
        return (String) jwtClaims.get("given_name");
    }

    private String extractLastName(Map<String, Object> jwtClaims) {
        return (String) jwtClaims.get("family_name");
    }

    @Transactional
    public User registerUser(UserRegisterRequestDto requestDto) {
        if (userRepository.existsByClerkId(requestDto.getClerkId())) {
            throw new IllegalArgumentException("User already exists with Clerk ID: " + requestDto.getClerkId());
        }

        User newUser = User.builder()
                .clerkId(requestDto.getClerkId())
                .email(requestDto.getEmail())
                .firstName(requestDto.getFirstName())
                .lastName(requestDto.getLastName())
                .build();

        User savedUser = userRepository.save(newUser);
        log.info("Registered new user via webhook with Clerk ID: {}", requestDto.getClerkId());
        return savedUser;
    }

    @Transactional
    public User updateUser(String clerkId, UserUpdateRequestDto requestDto) {
        User existingUser = userRepository.findByClerkId(clerkId)
                .orElseThrow(() -> new UserNotFoundException("User not found with Clerk ID: " + clerkId));

        User updatedUser = existingUser.updateFromJwtClaims(
                requestDto.getEmail(),
                requestDto.getFirstName(),
                requestDto.getLastName()
        );

        User savedUser = userRepository.save(updatedUser);
        log.info("Updated user with Clerk ID: {}", clerkId);
        return savedUser;
    }

    @Transactional(readOnly = true)
    public User getUserByClerkId(String clerkId) {
        return userRepository.findByClerkId(clerkId)
                .orElseThrow(() -> new UserNotFoundException("User not found with Clerk ID: " + clerkId));
    }
}
</file>

<file path="apps/dashboard/src/pages/Components/Components.view.tsx">
import React from 'react';
import { useComponents } from './useComponents';
import { Button, Card, Footer, Input, Spinner, Typography } from 'ui-components/src/components';

export const ComponentsView = () => {
  const { selectedComponent, components, handleComponentSelect } = useComponents();

  const renderButtonDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Button Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Variants</Typography>
          <div className="flex flex-wrap gap-3">
            <Button variant="primary">Primary Button</Button>
            <Button variant="secondary">Secondary Button</Button>
            <Button variant="outline">Outline Button</Button>
            <Button variant="ghost">Ghost Button</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex flex-wrap items-center gap-3">
            <Button size="sm">Small</Button>
            <Button size="md">Medium</Button>
            <Button size="lg">Large</Button>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">States</Typography>
          <div className="flex flex-wrap gap-3">
            <Button>Normal</Button>
            <Button isLoading>Loading</Button>
            <Button disabled>Disabled</Button>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderCardDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Card Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <Card variant="default">
          <Typography variant="h6" className="mb-2">Default Card</Typography>
          <Typography variant="body2" color="secondary">
            This is a default card with standard styling and shadow.
          </Typography>
        </Card>

        <Card variant="elevated" padding="lg">
          <Typography variant="h6" className="mb-2">Elevated Card</Typography>
          <Typography variant="body2" color="secondary">
            This card has an elevated appearance with more shadow depth and larger padding.
          </Typography>
        </Card>

        <Card variant="outlined" padding="sm">
          <Typography variant="h6" className="mb-2">Outlined Card</Typography>
          <Typography variant="body2" color="secondary">
            This card uses an outlined style with smaller padding.
          </Typography>
        </Card>
      </div>
    </div>
  );

  const renderInputDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Input Examples</Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <Input
            label="Basic Input"
            placeholder="Enter some text..."
            helperText="This is helper text"
          />

          <Input
            label="Email Input"
            type="email"
            placeholder="your@email.com"
          />

          <Input
            label="Password Input"
            type="password"
            placeholder="••••••••"
          />
        </div>

        <div className="space-y-4">
          <Input
            label="Input with Error"
            placeholder="Enter value"
            error="This field is required"
          />

          <Input
            label="Disabled Input"
            placeholder="Can't edit this"
            disabled
          />

          <Input
            label="Search Input"
            placeholder="Search..."
            leftIcon={<span>🔍</span>}
          />
        </div>
      </div>
    </Card>
  );

  const renderTypographyDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Typography Examples</Typography>

      <div className="space-y-4">
        <div>
          <Typography variant="h6" className="mb-3">Headings</Typography>
          <div className="space-y-2">
            <Typography variant="h1">Heading 1</Typography>
            <Typography variant="h2">Heading 2</Typography>
            <Typography variant="h3">Heading 3</Typography>
            <Typography variant="h4">Heading 4</Typography>
            <Typography variant="h5">Heading 5</Typography>
            <Typography variant="h6">Heading 6</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Body Text</Typography>
          <div className="space-y-2">
            <Typography variant="body1">Body 1 - Regular paragraph text for main content</Typography>
            <Typography variant="body2">Body 2 - Smaller text for secondary content</Typography>
            <Typography variant="caption">Caption - Very small text for labels and metadata</Typography>
            <Typography variant="overline">Overline - Small caps text</Typography>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="space-y-2">
            <Typography color="primary">Primary text color</Typography>
            <Typography color="secondary">Secondary text color</Typography>
            <Typography color="tertiary">Tertiary text color</Typography>
            <Typography color="success">Success text color</Typography>
            <Typography color="warning">Warning text color</Typography>
            <Typography color="error">Error text color</Typography>
            <Typography color="info">Info text color</Typography>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderFooterDemo = () => (
    <div className="space-y-6">
      <Typography variant="h4">Footer Examples</Typography>

      <div className="space-y-8">
        <div>
          <Typography variant="h6" className="mb-4">Basic Footer</Typography>
          <Footer />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Footer with Links</Typography>
          <Footer
            links={[
              { label: 'About', href: '/about' },
              { label: 'Contact', href: '/contact' },
              { label: 'Privacy', href: '/privacy' },
              { label: 'Terms', href: '/terms' }
            ]}
            socialLinks={[
              { label: 'GitHub', href: 'https://github.com', icon: '🐙' },
              { label: 'Twitter', href: 'https://twitter.com', icon: '🐦' },
              { label: 'LinkedIn', href: 'https://linkedin.com', icon: '💼' }
            ]}
          />
        </div>

        <div>
          <Typography variant="h6" className="mb-4">Custom Company Footer</Typography>
          <Footer
            companyName="Custom Company"
            copyrightYear={2024}
            links={[
              { label: 'Documentation', href: '/docs' },
              { label: 'API', href: '/api' },
              { label: 'Support', href: '/support' }
            ]}
          />
        </div>
      </div>
    </div>
  );

  const renderSpinnerDemo = () => (
    <Card className="space-y-6">
      <Typography variant="h4">Spinner Examples</Typography>
      <div className="space-y-6">
        <div>
          <Typography variant="h6" className="mb-3">Sizes</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner size="sm" />
              <Typography variant="caption" className="block mt-2">Small</Typography>
            </div>
            <div className="text-center">
              <Spinner size="md" />
              <Typography variant="caption" className="block mt-2">Medium</Typography>
            </div>
            <div className="text-center">
              <Spinner size="lg" />
              <Typography variant="caption" className="block mt-2">Large</Typography>
            </div>
            <div className="text-center">
              <Spinner size="xl" />
              <Typography variant="caption" className="block mt-2">Extra Large</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Colors</Typography>
          <div className="flex items-center gap-6">
            <div className="text-center">
              <Spinner color="brand" />
              <Typography variant="caption" className="block mt-2">Brand</Typography>
            </div>
            <div className="text-center">
              <Spinner color="neutral" />
              <Typography variant="caption" className="block mt-2">Neutral</Typography>
            </div>
            <div className="text-center bg-neutral-800 p-4 rounded">
              <Spinner color="white" />
              <Typography variant="caption" className="block mt-2 text-white">White</Typography>
            </div>
          </div>
        </div>

        <div>
          <Typography variant="h6" className="mb-3">Usage Examples</Typography>
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <Spinner size="sm" />
              <Typography variant="body2">Loading content...</Typography>
            </div>

            <Button isLoading disabled>
              Submit Form
            </Button>

            <div className="flex items-center justify-center p-8 bg-background-secondary rounded-lg">
              <div className="text-center">
                <Spinner size="lg" className="mb-3" />
                <Typography variant="body1">Processing your request</Typography>
                <Typography variant="body2" color="secondary">Please wait a moment</Typography>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );

  const renderSelectedDemo = () => {
    switch (selectedComponent) {
      case 'button':
        return renderButtonDemo();
      case 'card':
        return renderCardDemo();
      case 'footer':
        return renderFooterDemo();
      case 'input':
        return renderInputDemo();
      case 'spinner':
        return renderSpinnerDemo();
      case 'typography':
        return renderTypographyDemo();
      default:
        return renderButtonDemo();
    }
  };

  return (
    <div className="min-h-screen bg-background-primary">
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-8">
          <Typography variant="h2" className="mb-2">Component Library</Typography>
          <Typography variant="body1" color="secondary">
            Explore and test the reusable UI components built with Linear design system
          </Typography>
        </div>

        <div className="flex flex-col lg:flex-row gap-8">
          {/* Component Navigation */}
          <aside className="lg:w-64 shrink-0">
            <Card padding="sm">
              <Typography variant="h6" className="mb-4">Components</Typography>
              <nav className="space-y-2">
                {components.map((component) => (
                  <button
                    key={component.id}
                    onClick={() => handleComponentSelect(component.id)}
                    className={`w-full text-left p-3 rounded-md text-sm font-medium transition-colors ${
                      selectedComponent === component.id
                        ? 'bg-brand text-white'
                        : 'text-text-primary hover:bg-background-tertiary'
                    }`}
                  >
                    <div>
                      <div className="font-medium">{component.name}</div>
                      <div className={`text-xs mt-1 ${
                        selectedComponent === component.id ? 'text-white/80' : 'text-text-tertiary'
                      }`}>
                        {component.description}
                      </div>
                    </div>
                  </button>
                ))}
              </nav>
            </Card>
          </aside>

          {/* Component Demo */}
          <main className="flex-1">
            {renderSelectedDemo()}
          </main>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="apps/dashboard/src/pages/Components/useComponents.ts">
import { useState } from 'react';

export const useComponents = () => {
  const [selectedComponent, setSelectedComponent] = useState<string>('button');

  const components = [
    { id: 'button', name: 'Button', description: 'Interactive button component with multiple variants' },
    { id: 'card', name: 'Card', description: 'Container component for grouping related content' },
    { id: 'footer', name: 'Footer', description: 'Website footer with links and company information' },
    { id: 'input', name: 'Input', description: 'Form input component with validation support' },
    { id: 'spinner', name: 'Spinner', description: 'Loading spinner with different sizes and colors' },
    { id: 'typography', name: 'Typography', description: 'Text component with consistent styling' },
  ];

  const handleComponentSelect = (componentId: string) => {
    setSelectedComponent(componentId);
  };

  return {
    selectedComponent,
    components,
    handleComponentSelect,
  };
};
</file>

<file path="apps/dashboard/src/pages/Dashboard/index.tsx">
import { useAuthStore } from '../../store/useAuthStore';
import { useAiNoteModalStore } from '../../store/useAiNoteModalStore';
import { AiNoteModal } from '../../components/AiNoteModal';

export default function DashboardPage() {
  const { user, role } = useAuthStore();
  const { openModal } = useAiNoteModalStore();

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            Welcome to AlgoRevise Dashboard
          </h1>
          <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h2 className="text-lg font-semibold text-blue-900 mb-2">User Information</h2>
            <div className="space-y-2 text-sm">
              <p><span className="font-medium">Name:</span> {user?.firstName} {user?.lastName}</p>
              <p><span className="font-medium">Email:</span> {user?.emailAddress}</p>
              <p><span className="font-medium">Role:</span> {role || 'No role assigned'}</p>
              <p><span className="font-medium">User ID:</span> {user?.id}</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">AI Incorrect Answer Note</h3>
            <p className="text-gray-600 mb-4">Generate AI-powered notes from your algorithm solutions</p>
            <button
              onClick={openModal}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
            >
              Generate Incorrect Answer Note
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">View Analytics</h3>
            <p className="text-gray-600 mb-4">Check your learning progress and statistics</p>
            <button className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              View Analytics
            </button>
          </div>

          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">Practice Problems</h3>
            <p className="text-gray-600 mb-4">Solve AI-generated practice problems</p>
            <button className="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
              Start Practice
            </button>
          </div>
        </div>
      </div>

      {/* AI Note Modal */}
      <AiNoteModal />
    </div>
  );
}
</file>

<file path="apps/dashboard/src/pages/SignIn/useSignIn.ts">
import { useNavigate } from 'react-router-dom';

export function useSignIn() {
  const navigate = useNavigate();

  const handleEmailSignInClick = () => {
    navigate('/sign-in/email');
  };

  const handleSignUpClick = () => {
    navigate('/sign-up');
  };

  return {
    handleEmailSignInClick,
    handleSignUpClick
  };
}
</file>

<file path="apps/dashboard/src/pages/SignInWithEmail/useSignInWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignIn } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schema for email validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

export function useSignInWithEmail() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signIn } = useSignIn();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleEmailLogin = async () => {
    // Validate email with Zod
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signIn?.create({
        identifier: email,
      });
      console.log('Email sign-in initiated for:', email);

    } catch (err) {
      console.error('Sign-in error:', err);
      setError('An error occurred during sign-in. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await handleEmailLogin();
  };

  return {
    email,
    error,
    isLoading,
    handleEmailChange,
    handleBackToLogin,
    handleSubmit,
    handleContinueClick: handleEmailLogin
  };
}
</file>

<file path="apps/dashboard/src/pages/SignUp/useSignUp.ts">
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp as useClerkSignUp } from '@clerk/clerk-react';

export function useSignUp() {
  const [hasGoogleHistory, setHasGoogleHistory] = useState(false);
  const navigate = useNavigate();
  const { signUp, isLoaded } = useClerkSignUp();

  useEffect(() => {
    const googleHistory = localStorage.getItem('previous-google-login');
    setHasGoogleHistory(!!googleHistory);
  }, []);

  const handleGoogleSignUp = async () => {
    if (!isLoaded || !signUp) {
      console.error('Clerk is not loaded yet');
      return;
    }

    try {
      await signUp.authenticateWithRedirect({
        strategy: 'oauth_google',
        redirectUrl: '/sso-callback',
        redirectUrlComplete: '/dashboard',
      });

      // Store Google login preference
      localStorage.setItem('previous-google-login', 'true');
    } catch (error) {
      console.error('Error signing up with Google:', error);
    }
  };

  const handleEmailSignUp = () => {
    navigate('/sign-up/email');
  };

  const handleSignInClick = () => {
    navigate('/sign-in');
  };

  return {
    hasGoogleHistory,
    isLoaded,
    handleGoogleSignUp,
    handleEmailSignUp,
    handleSignInClick
  };
}
</file>

<file path="apps/dashboard/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    '../../libs/ui-components/src/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          DEFAULT: "#5E6AD2",
          light: "#7B83EB",
          dark: "#4C5AA8"
        },
        neutral: {
          black: "#0D0E10",
          900: "#16181D",
          800: "#1C1F26",
          700: "#22252C",
          600: "#2A2D34",
          500: "#35393F",
          400: "#4E5158",
          300: "#6B7280",
          100: "#D1D5DB",
          50: "#F3F4F6",
          white: "#FFFFFF"
        },
        semantic: {
          success: "#10B981",
          warning: "#F59E0B",
          error: "#EF4444",
          info: "#3B82F6"
        },
        background: {
          primary: "#FAFBFC",
          secondary: "#FFFFFF",
          tertiary: "#F8F9FA"
        },
        text: {
          primary: "#0D0E10",
          secondary: "#6B7280",
          tertiary: "#9CA3AF",
          inverse: "#FFFFFF"
        }
      },
      fontFamily: {
        sans: ["Inter", "-apple-system", "BlinkMacSystemFont", "'Segoe UI'", "Roboto", "sans-serif"],
        mono: ["'SF Mono'", "Monaco", "'Cascadia Code'", "'Roboto Mono'", "Consolas", "'Courier New'", "monospace"]
      },
      fontSize: {
        xs: "12px",
        sm: "14px",
        base: "16px",
        lg: "18px",
        xl: "20px",
        "2xl": "24px",
        "3xl": "30px",
        "4xl": "36px",
        "5xl": "48px",
        "6xl": "64px"
      },
      fontWeight: {
        light: "300",
        normal: "400",
        medium: "500",
        semibold: "600",
        bold: "700"
      },
      lineHeight: {
        tight: "1.25",
        snug: "1.375",
        normal: "1.5",
        relaxed: "1.625",
        loose: "2"
      },
      spacing: {
        "1": "4px",
        "2": "8px",
        "3": "12px",
        "4": "16px",
        "5": "20px",
        "6": "24px",
        "8": "32px",
        "10": "40px",
        "12": "48px",
        "16": "64px",
        "20": "80px",
        "24": "96px",
        "32": "128px"
      },
      borderRadius: {
        sm: "2px",
        DEFAULT: "6px",
        md: "8px",
        lg: "12px",
        xl: "16px"
      },
      boxShadow: {
        xs: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
        sm: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)",
        md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)",
        lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
        xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)",
        "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
      }
    },
  },
  plugins: [],
}
</file>

<file path="apps/landing-page/src/index.css">
/* CSS Reset - 브라우저 기본 스타일 제거 */
@tailwind base;
@tailwind components;
@tailwind utilities;
@import "tailwindcss";
@import "ui-components/src/index.css";
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* 추가적인 브라우저 기본값 제거 */
button, input, optgroup, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

button, select {
  text-transform: none;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* 링크 기본 스타일 제거 */
a {
  color: inherit;
  text-decoration: none;
}

/* 브라우저 기본 포커스 스타일 제거 */
:focus {
  outline: none;
}
</file>

<file path="apps/landing-page/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, useNavigate } from 'react-router-dom'
import { ClerkProvider } from '@clerk/clerk-react'
import './index.css'
import App from './App.tsx'

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error('Missing Publishable Key');
}

function ClerkProviderWithRoutes() {
  const navigate = useNavigate();

  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={import.meta.env.VITE_CLERK_SIGN_IN_URL}
      signUpUrl={import.meta.env.VITE_CLERK_SIGN_UP_URL}
    >
      <App />
    </ClerkProvider>
  );
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <ClerkProviderWithRoutes />
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

AlgoRevise is an AI-powered algorithm problem management platform built as a monorepo with React frontend and Spring Boot backend. The platform analyzes user-uploaded algorithm solutions, visualizes solution flow, and provides personalized test problems based on identified weaknesses.

## Architecture & Structure

**Monorepo Organization:**
- `apps/dashboard/` - React-based user dashboard (Vite + TypeScript)
- `apps/landing-page/` - React-based marketing site (Vite + TypeScript)
- `apps/backend/` - Spring Boot API server (planned)
- `libs/ui-components/` - Shared React UI components with Storybook
- `libs/api-types/` - TypeScript API type definitions
- `libs/core-logic/` - Shared business logic and utilities

**Key Technologies:**
- Frontend: React 19.1.1, TypeScript, Tailwind CSS, Vite
- Authentication: Clerk for social login and user management
- State Management: Zustand (client state), TanStack Query (server state)
- UI Libraries: Lucide React (icons), ReactFlow (diagrams), Recharts (charts)
- Package Manager: pnpm with workspaces

## Development Commands

**Root Level:**
```bash
pnpm dev          # Start all apps in parallel with live reload
pnpm build        # Build all apps for production
pnpm lint         # Run linting across all apps
```

**Individual Apps:**
```bash
cd apps/dashboard
pnpm dev          # Start dashboard development server
pnpm build        # Build dashboard for production
pnpm lint         # Lint dashboard code
```

## Code Architecture Guidelines

**Component Pattern (MANDATORY):**
All React components MUST follow view-logic separation:
- `useComponentName.ts` - Logic hook managing state/effects
- `ComponentName.view.tsx` - Presentation component (no state/effects)
- `index.tsx` - Container connecting logic to view

**Dependency Management:**
- Each package maintains independent dependencies in its own `package.json`
- Before importing any library, verify it exists in the current package's dependencies
- Add missing dependencies with versions from `rules/front/libary.md` before coding

**File Organization:**
- UI components: `libs/ui-components/src/components/[component-name]/`
- App pages: `apps/[app]/src/pages/[page-name]/`
- API services: `apps/[app]/src/services/`
- Schemas: `apps/[app]/src/schemas/` (Zod validation)
- Global state: `apps/[app]/src/store/` (Zustand stores)

## Environment Configuration

**Clerk Authentication Setup:**
- Dashboard: `.env` with `VITE_CLERK_PUBLISHABLE_KEY` and routing URLs
- Landing Page: Separate `.env` with same variables
- Both apps wrapped with `ClerkProvider` and `BrowserRouter` in `main.tsx`

## Design System

**Colors & Styling:**
- Linear-inspired minimal design system
- Light/dark mode support with semantic color tokens
- 4px-based spacing scale (2=8px, 3=12px, 4=16px, etc.)
- System fonts with clear information hierarchy

**Component Standards:**
- Use Tailwind utility classes for all styling
- Follow accessibility guidelines (WCAG AA contrast, keyboard navigation)
- Consistent interaction states (hover, focus, active, disabled)

## Important Rules & Guidelines

**Development Process:**
1. Read comprehensive rules in `rules/` directory before coding
2. Follow three-phase approach: Analysis → Planning → Implementation
3. Maintain clean code principles (DRY, KISS, SOLID)
4. Use view-logic separation for ALL components

**Library Usage:**
- Styling: Tailwind CSS only (no CSS-in-JS)
- Icons: Lucide React exclusively
- Forms: React Hook Form + Zod validation
- Data viz: Recharts (charts), ReactFlow (diagrams)
- Date handling: date-fns

**Quality Standards:**
- TypeScript for all code (prefer interfaces over types)
- Functional components with hooks (no classes)
- Descriptive variable names with auxiliary verbs (`isLoading`, `hasError`)
- Maximum function length: 20 lines (prefer under 10)

## Key Files Reference

**Rules Documentation:**
- `rules/global/architecture.md` - Technical requirements and system design
- `rules/global/step-by-step.md` - Three-phase development process
- `rules/global/clean-code.md` - Code quality guidelines
- `rules/front/react.md` - React-specific patterns and conventions
- `rules/front/libary.md` - Library usage and version specifications
- `rules/front/folder.md` - File and folder organization rules
- `rules/global/prd.md` - Product requirements and business context
</file>

<file path="libs/ui-components/src/components/Button/Button.view.tsx">
import React from 'react';
import { useButton } from './useButton';
import type { ButtonProps } from './useButton';

export const ButtonView = (props: ButtonProps) => {
  const { buttonProps, isLoading } = useButton(props);
  const { children, leftIcon, rightIcon } = props;

  return (
    <button {...buttonProps}>
      {isLoading ? (
        <div className="flex items-center">
          <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent mr-2" />
          Loading...
        </div>
      ) : (
        <div className="flex items-center">
          {leftIcon && <span className="mr-2">{leftIcon}</span>}
          {children}
          {rightIcon && <span className="ml-2">{rightIcon}</span>}
        </div>
      )}
    </button>
  );
};
</file>

<file path="libs/ui-components/src/components/Card/Card.view.tsx">
import React from 'react';
import { useCard } from './useCard';
import type { CardProps } from './useCard';

export const CardView = (props: CardProps) => {
  const { cardProps } = useCard(props);
  const { children } = props;

  return (
    <div {...cardProps}>
      {children}
    </div>
  );
};
</file>

<file path="libs/ui-components/src/components/Card/useCard.ts">
import type { HTMLAttributes } from 'react';

export interface CardProps extends HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'elevated' | 'outlined';
  padding?: 'none' | 'sm' | 'md' | 'lg';
}

export const useCard = (props: CardProps) => {
  const {
    variant = 'default',
    padding = 'md',
    className = '',
    ...rest
  } = props;

  const getVariantClasses = () => {
    switch (variant) {
      case 'default':
        return 'bg-background-secondary border border-neutral-100';
      case 'elevated':
        return 'bg-background-secondary shadow-sm border border-neutral-50';
      case 'outlined':
        return 'bg-background-secondary border-2 border-neutral-100';
      default:
        return 'bg-background-secondary border border-neutral-100';
    }
  };

  const getPaddingClasses = () => {
    switch (padding) {
      case 'none':
        return 'p-0';
      case 'sm':
        return 'p-4';
      case 'md':
        return 'p-6';
      case 'lg':
        return 'p-8';
      default:
        return 'p-6';
    }
  };

  const baseClasses = 'rounded-md';
  const cardClasses = `${baseClasses} ${getVariantClasses()} ${getPaddingClasses()} ${className}`;

  return {
    cardProps: {
      ...rest,
      className: cardClasses,
    },
    variant,
    padding,
  };
};
</file>

<file path="libs/ui-components/src/components/index.ts">
// Import CSS to ensure Tailwind styles are available
import '../index.css';
export { Button } from './Button';
export type { ButtonProps } from './Button';

export { Card } from './Card';
export type { CardProps } from './Card';

export { Footer } from './Footer';
export type { FooterProps } from './Footer';

export { Input } from './Input';
export type { InputProps } from './Input';

export { Spinner } from './Spinner';
export type { SpinnerProps } from './Spinner';

export { Typography } from './Typography';
export type { TypographyProps } from './Typography';

export { SignInWithGoogleButton } from './sign-in-with-google-button';

export { SignInWithEmailButton } from './sign-in-with-email-button';
</file>

<file path="libs/ui-components/src/components/Input/useInput.ts">
import { useState } from 'react';
import type { InputHTMLAttributes, ChangeEvent } from 'react';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const useInput = (props: InputProps) => {
  const {
    label,
    error,
    helperText,
    className = '',
    onChange,
    ...rest
  } = props;

  const [isFocused, setIsFocused] = useState(false);

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    onChange?.(event);
  };

  const handleFocus = () => {
    setIsFocused(true);
  };

  const handleBlur = () => {
    setIsFocused(false);
  };

  const getInputClasses = () => {
    const baseClasses = 'w-full px-4 py-3 text-sm bg-background-secondary border rounded-md transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-1';

    if (error) {
      return `${baseClasses} border-semantic-error focus:border-semantic-error focus:ring-semantic-error/20 text-text-primary`;
    }

    if (isFocused) {
      return `${baseClasses} border-brand focus:border-brand focus:ring-brand/20 text-text-primary`;
    }

    return `${baseClasses} border-neutral-100 hover:border-neutral-300 text-text-primary ${className}`;
  };

  const getLabelClasses = () => {
    const baseClasses = 'block text-sm font-medium mb-2';
    return error ? `${baseClasses} text-semantic-error` : `${baseClasses} text-text-primary`;
  };

  const getHelperTextClasses = () => {
    const baseClasses = 'text-xs mt-1';
    return error ? `${baseClasses} text-semantic-error` : `${baseClasses} text-text-secondary`;
  };

  return {
    inputProps: {
      ...rest,
      onChange: handleChange,
      onFocus: handleFocus,
      onBlur: handleBlur,
      className: getInputClasses(),
    },
    labelClasses: getLabelClasses(),
    helperTextClasses: getHelperTextClasses(),
    isFocused,
    hasError: !!error,
  };
};
</file>

<file path="libs/ui-components/src/components/sign-in-with-google-button/index.tsx">
import { useSignInWithGoogleButton } from './useSignInWithGoogleButton'
import { SignInWithGoogleButtonView } from './SignInWithGoogleButton.view'

export const SignInWithGoogleButton = () => {
  const { isLoaded, signInWithGoogle } = useSignInWithGoogleButton()

  return (
    <SignInWithGoogleButtonView
      isLoading={!isLoaded}
      onClick={signInWithGoogle}
    />
  )
}
</file>

<file path="libs/ui-components/src/components/Typography/Typography.view.tsx">
import React from 'react';
import { useTypography } from './useTypography';
import type { TypographyProps } from './useTypography';

export const TypographyView = (props: TypographyProps) => {
  const { elementType, typographyProps } = useTypography(props);
  const { children } = props;

  const Element = elementType as React.ElementType;

  return (
    <Element {...typographyProps}>
      {children}
    </Element>
  );
};
</file>

<file path="libs/ui-components/src/components/Typography/useTypography.ts">
import type { HTMLAttributes, ElementType } from 'react';

export interface TypographyProps extends HTMLAttributes<HTMLElement> {
  variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'body1' | 'body2' | 'caption' | 'overline';
  color?: 'primary' | 'secondary' | 'tertiary' | 'inverse' | 'success' | 'warning' | 'error' | 'info';
  weight?: 'light' | 'normal' | 'medium' | 'semibold' | 'bold';
  align?: 'left' | 'center' | 'right';
  as?: ElementType;
}

export const useTypography = (props: TypographyProps) => {
  const {
    variant = 'body1',
    color = 'primary',
    weight,
    align = 'left',
    as,
    className = '',
    ...rest
  } = props;

  const getElementType = (): ElementType => {
    if (as) return as;

    switch (variant) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return variant;
      case 'caption':
      case 'overline':
        return 'span';
      default:
        return 'p';
    }
  };

  const getVariantClasses = () => {
    switch (variant) {
      case 'h1':
        return 'text-5xl font-bold leading-tight';
      case 'h2':
        return 'text-4xl font-bold leading-tight';
      case 'h3':
        return 'text-3xl font-semibold leading-snug';
      case 'h4':
        return 'text-2xl font-semibold leading-snug';
      case 'h5':
        return 'text-xl font-medium leading-normal';
      case 'h6':
        return 'text-lg font-medium leading-normal';
      case 'body1':
        return 'text-base leading-normal';
      case 'body2':
        return 'text-sm leading-normal';
      case 'caption':
        return 'text-xs leading-normal';
      case 'overline':
        return 'text-xs font-medium uppercase tracking-wide leading-normal';
      default:
        return 'text-base leading-normal';
    }
  };

  const getColorClasses = () => {
    switch (color) {
      case 'primary':
        return 'text-text-primary';
      case 'secondary':
        return 'text-text-secondary';
      case 'tertiary':
        return 'text-text-tertiary';
      case 'inverse':
        return 'text-text-inverse';
      case 'success':
        return 'text-semantic-success';
      case 'warning':
        return 'text-semantic-warning';
      case 'error':
        return 'text-semantic-error';
      case 'info':
        return 'text-semantic-info';
      default:
        return 'text-text-primary';
    }
  };

  const getWeightClasses = () => {
    if (!weight) return '';

    switch (weight) {
      case 'light':
        return 'font-light';
      case 'normal':
        return 'font-normal';
      case 'medium':
        return 'font-medium';
      case 'semibold':
        return 'font-semibold';
      case 'bold':
        return 'font-bold';
      default:
        return '';
    }
  };

  const getAlignClasses = () => {
    switch (align) {
      case 'left':
        return 'text-left';
      case 'center':
        return 'text-center';
      case 'right':
        return 'text-right';
      default:
        return 'text-left';
    }
  };

  const typographyClasses = `${getVariantClasses()} ${getColorClasses()} ${getWeightClasses()} ${getAlignClasses()} ${className}`.trim();

  return {
    elementType: getElementType(),
    typographyProps: {
      ...rest,
      className: typographyClasses,
    },
    variant,
    color,
    weight,
    align,
  };
};
</file>

<file path="libs/ui-components/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          DEFAULT: "#5E6AD2",
          light: "#7B83EB",
          dark: "#4C5AA8"
        },
        neutral: {
          black: "#0D0E10",
          900: "#16181D",
          800: "#1C1F26",
          700: "#22252C",
          600: "#2A2D34",
          500: "#35393F",
          400: "#4E5158",
          300: "#6B7280",
          100: "#D1D5DB",
          50: "#F3F4F6",
          white: "#FFFFFF"
        },
        semantic: {
          success: "#10B981",
          warning: "#F59E0B",
          error: "#EF4444",
          info: "#3B82F6"
        },
        background: {
          primary: "#FAFBFC",
          secondary: "#FFFFFF",
          tertiary: "#F8F9FA"
        },
        text: {
          primary: "#0D0E10",
          secondary: "#6B7280",
          tertiary: "#9CA3AF",
          inverse: "#FFFFFF"
        }
      },
      fontFamily: {
        sans: ["Inter", "-apple-system", "BlinkMacSystemFont", "'Segoe UI'", "Roboto", "sans-serif"],
        mono: ["'SF Mono'", "Monaco", "'Cascadia Code'", "'Roboto Mono'", "Consolas", "'Courier New'", "monospace"]
      },
      fontSize: {
        xs: "12px",
        sm: "14px",
        base: "16px",
        lg: "18px",
        xl: "20px",
        "2xl": "24px",
        "3xl": "30px",
        "4xl": "36px",
        "5xl": "48px",
        "6xl": "64px"
      },
      fontWeight: {
        light: "300",
        normal: "400",
        medium: "500",
        semibold: "600",
        bold: "700"
      },
      lineHeight: {
        tight: "1.25",
        snug: "1.375",
        normal: "1.5",
        relaxed: "1.625",
        loose: "2"
      },
      spacing: {
        "1": "4px",
        "2": "8px",
        "3": "12px",
        "4": "16px",
        "5": "20px",
        "6": "24px",
        "8": "32px",
        "10": "40px",
        "12": "48px",
        "16": "64px",
        "20": "80px",
        "24": "96px",
        "32": "128px"
      },
      borderRadius: {
        sm: "2px",
        DEFAULT: "6px",
        md: "8px",
        lg: "12px",
        xl: "16px"
      },
      boxShadow: {
        xs: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
        sm: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)",
        md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)",
        lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)",
        xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)",
        "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)"
      }
    },
  },
  plugins: [],
}
</file>

<file path="rules/global/architecture.md">
# 기술 요구사항 문서 (TRD)

## 1. 기술 요약
- **프로젝트 개요**: AlgoRevise는 React 기반 프론트엔드와 Spring Boot 기반 백엔드를 사용하여 AI 기반 알고리즘 오답 관리 플랫폼을 구축합니다. 사용자가 업로드한 알고리즘 문제의 풀이 흐름을 AI가 분석하고 시각화하며, 사용자는 약점 구간을 선택하여 AI 챗봇의 심층 분석 및 맞춤형 테스트 문제를 제공받습니다. Spring Security를 통해 보안을 강화하고, Spring Data JPA를 사용하여 데이터베이스와 효율적으로 상호 작용합니다. Firebase Storage를 사용하여 문제와 관련된 파일들을 저장하고, Lemon Squeezy를 통해 구독 및 결제 기능을 구현합니다.
- **핵심 기술 스택**: React, TypeScript, Tailwind CSS, Spring Boot, Spring Security, Spring Data JPA, MySQL, Firebase Storage, Lemon Squeezy, Clerk
- **주요 기술 목표**:
    -   빠른 응답 속도와 안정적인 서비스 제공
    -   확장 가능한 아키텍처 설계
    -   높은 수준의 보안 유지
- **주요 기술 가정**:
    -   AI 분석 모델의 정확도가 80% 이상을 유지할 수 있다고 가정합니다.
    -   사용자 트래픽이 예측 가능하며, 필요시 확장 가능하도록 설계합니다.
    -   외부 API(Lemon Squeezy, Firebase)의 안정적인 작동을 가정합니다.

## 2. 기술 스택

| 범주                | 기술 / 라이브러리           | 이유                                                                                  |
| ------------------- | --------------------------- | ------------------------------------------------------------------------------------- |
| 프론트엔드            | React                      | 컴포넌트 기반의 UI 개발에 용이하며, TypeScript와 함께 사용하여 안정성과 개발 효율성을 높입니다. |
| UI 프레임워크         | TypeScript, Tailwind CSS   | TypeScript로 코드의 안정성을 높이고, Tailwind CSS로 빠르고 일관된 UI 스타일링이 가능합니다.          |
| 백엔드                | Spring Boot                | Java 기반의 엔터프라이즈 애플리케이션 개발에 최적화되어 있으며, 빠른 개발과 배포를 지원합니다.   |
| 인증/회원가입         | Clerk                      | 소셜 로그인(구글 등) 및 인증 플로우를 신속하게 구현할 수 있는 인증 서비스입니다.           |
| 보안                  | Spring Security            | 강력한 인증 및 권한 부여 기능을 제공하여 애플리케이션의 보안을 강화합니다.                |
| 데이터베이스 액세스     | Spring Data JPA           | 데이터베이스와의 상호 작용을 단순화하고, ORM을 통해 객체와 데이터베이스 간의 매핑을 쉽게 관리합니다.   |
| 데이터베이스            | MySQL                      | 안정적이고 널리 사용되는 오픈 소스 관계형 데이터베이스입니다.                             |
| 파일 스토리지         | Firebase Storage           | 이미지, 비디오, 오디오 및 기타 사용자 생성 콘텐츠와 같은 파일을 저장하고 제공하는 데 사용됩니다. |
| 결제                  | Lemon Squeezy              | 구독, 라이선스 및 일회성 결제에 대한 안전하고 사용하기 쉬운 결제 솔루션입니다.               |
| AI 분석               | Gemini API + Prompt Engineering     | Gemini API와 프롬프트 엔지니어링을 활용하여 알고리즘 문제 분석 및 맞춤 문제 출제를 수행합니다. |
| API                   | RESTful API                | 프론트엔드와 백엔드 간의 통신을 위한 표준 인터페이스입니다.                              |
| 빌드 도구             | Vite                      | React 프론트엔드(대시보드, 랜딩페이지) 개발 및 번들링, 모노레포 환경에서 빠른 개발 경험을 제공합니다. |
| 빌드 도구(백엔드)      | Maven/Gradle               | Spring Boot 백엔드 빌드 및 의존성 관리를 위해 사용합니다.                                     |
| CI/CD               | Jenkins/GitHub Actions     | 코드 변경 사항을 자동으로 테스트하고 배포하여 개발 프로세스를 간소화합니다.                 |

## 3. 시스템 아키텍처 설계

### Monorepo 전략
- 본 프로젝트는 여러 앱(백엔드, 대시보드, 랜딩페이지)과 공통 라이브러리(lib)를 하나의 저장소에서 관리하는 Monorepo 방식을 사용합니다.
- 각 앱(apps 폴더)은 독립적으로 개발·배포할 수 있으며, libs 폴더에는 공통 타입, 비즈니스 로직, UI 컴포넌트가 포함되어 코드 재사용성과 일관성을 확보합니다.
- Monorepo 환경은 협업 및 CI/CD, 버전 일관성 관리, 공통 자산 활용에 유리합니다.

### 최상위 구성 요소
- **프론트엔드 (React + Clerk)**: 사용자 인터페이스를 제공하고, Clerk를 활용하여 소셜 로그인(구글) 및 회원가입 기능을 제공합니다.
    -   컴포넌트: Google 회원가입/로그인 UI(Clerk), 문제 등록 폼, 풀이 흐름 시각화, 챗봇 인터페이스, 맞춤 문제 풀이 환경, 학습 통계 대시보드
    -   상태 관리: Redux 또는 Context API를 사용하여 애플리케이션 상태를 관리합니다.
- **백엔드 (Spring Boot)**: API 엔드포인트를 제공하고 비즈니스 로직을 처리하며 데이터베이스와 상호 작용합니다.
    -   API 컨트롤러: 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등을 위한 API 제공
    -   서비스 레이어: 비즈니스 로직 구현 (AI 분석 연동, 맞춤 문제 생성, 사용자 관리, 결제 처리)
    -   데이터 액세스 레이어: Spring Data JPA를 사용하여 데이터베이스와 상호 작용
- **AI 분석 서비스 (Gemini API 기반)**: 알고리즘 문제 분석 및 맞춤 문제 생성을 외부 Gemini API를 활용하여 처리합니다.
    -   프롬프트 엔지니어링: Gemini API 호출 시 최적의 결과를 얻기 위해 다양한 프롬프트 전략을 적용합니다.
    -   문제 분석 로직: Gemini API를 통해 문제의 코드 흐름 분석 및 약점 식별을 수행합니다.
    -   맞춤 문제 생성 로직: Gemini API와 프롬프트를 활용해 사용자 약점에 맞는 문제를 생성합니다.
- **데이터베이스 (MySQL)**: 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장합니다.
    -   스키마 설계: 사용자, 문제, 풀이, 결제 테이블 설계
    -   데이터 액세스 최적화: 쿼리 최적화 및 인덱싱
- **파일 스토리지 (Firebase Storage)**: 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장합니다.
    -   파일 업로드 API: 사용자가 파일을 업로드할 수 있는 API 제공
    -   파일 접근 권한 관리: 사용자별 파일 접근 권한 설정

### 최상위 컴포넌트 상호 작용 다이어그램

```mermaid
graph TD
    A[Frontend (React)] --> B(Backend (Spring Boot))
    B --> C{Database (MySQL)}
    B --> D[AI 분석 서비스 (Gemini API)]
    B --> E[Firebase Storage]
    B --> F[Lemon Squeezy]

-   **Frontend (React) -> Backend (Spring Boot)**: 프론트엔드는 API 요청을 통해 백엔드와 통신합니다. 문제 등록, AI 분석 요청, 챗봇 질의, 맞춤 문제 요청, 결제 처리 등의 작업을 수행합니다.
-   **Backend (Spring Boot) -> Database (MySQL)**: 백엔드는 Spring Data JPA를 통해 데이터베이스와 상호 작용합니다. 사용자 정보, 문제 정보, 풀이 기록, 결제 정보 등을 저장하고 조회합니다.
-   **Backend (Spring Boot) -> AI 분석 서버**: 백엔드는 AI 분석 서버에 문제 분석 및 맞춤 문제 생성을 요청합니다.
-   **Backend (Spring Boot) -> Firebase Storage**: 백엔드는 Firebase Storage에 사용자가 업로드한 코드 파일 및 기타 관련 파일을 저장하고 접근합니다.
-   **Backend (Spring Boot) -> Lemon Squeezy**: 백엔드는 Lemon Squeezy API를 통해 구독 및 결제 처리를 수행합니다.

### 코드 구성 및 규칙

**도메인 기반 조직 전략**
- **도메인 분리**: 사용자 관리, 문제 관리, AI 분석, 결제 처리 등 비즈니스 도메인별로 코드를 분리합니다.
- **계층 기반 아키텍처**: 프레젠테이션 (React 컴포넌트), 비즈니스 로직 (Spring 서비스), 데이터 액세스 (Spring Data JPA 레포지토리), 인프라 (외부 API 연동) 계층으로 분리합니다.
- **기능 기반 모듈**: 사용자 인증, 문제 등록, AI 분석, 결제 처리 등 관련 기능을 함께 그룹화합니다.
- **공유 컴포넌트**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트를 전용 공유 모듈에 배치합니다.

**백엔드 Spring Boot 아키텍처 규칙**
- **Package-by-Feature 구조**: 기능별로 패키지를 구성하여 관련 컴포넌트(controller, service, dto, repository, domain)를 함께 배치
- **중앙집중식 예외 처리**: `@RestControllerAdvice`를 사용한 글로벌 예외 핸들러 구현, 비즈니스 로직에서는 `try-catch` 사용 금지
- **DTO 사용 원칙**: Controller에서 Entity 객체 직접 사용 금지, 모든 Request/Response는 DTO를 통해 처리
- **의존성 주입**: 필드 주입 금지, 생성자 주입만 사용 (`@RequiredArgsConstructor` + `final` 키워드 권장)
- **RESTful API 설계**: 리소스 중심의 명사형 URI 사용, HTTP 메서드로 CRUD 작업 표현

**범용 파일 및 폴더 구조**
/
├── apps/
│   ├── backend/                # Spring Boot 백엔드 서비스 (API 서버)
│   ├── dashboard/              # React 기반 관리자/대시보드 사이트 (Vite 기반)
│   └── landing-page/           # React 기반 랜딩 페이지 (Vite 기반)
├── libs/
│   ├── api-types/              # 백엔드 API 요청/응답용 TypeScript 타입 정의
│   ├── core-logic/             # 공통 비즈니스 로직, 유틸 함수 (format, validation 등)
│   └── ui-components/          # 공통 React UI 컴포넌트 (Button, Input 등)
├── database/                   # 데이터베이스 스크립트 및 설정
│   └── schema.sql              # 데이터베이스 스키마 정의
├── .env                        # 환경 변수 파일
├── README.md                   # 프로젝트 설명 및 설정 방법
└── LICENSE                     # 라이선스 정보

### 데이터 흐름 및 통신 패턴
- **클라이언트-서버 통신**: 프론트엔드는 RESTful API를 통해 백엔드와 통신합니다. API 요청/응답 패턴을 사용합니다.
- **데이터베이스 상호 작용**: Spring Data JPA를 사용하여 데이터베이스와 상호 작용합니다. ORM을 통해 객체와 데이터베이스 간의 매핑을 관리합니다.
- **외부 서비스 통합**: Clerk(구글 소셜 로그인 등), Lemon Squeezy API, Firebase Storage API를 사용하여 외부 서비스와 통합합니다. API 키 및 인증 정보를 안전하게 관리합니다.
- **실시간 통신**: 필요에 따라 WebSocket 또는 SSE (Server-Sent Events)를 사용하여 실시간 업데이트를 제공할 수 있습니다. (예: 챗봇 메시지 전송)
- **데이터 동기화**: 분산된 컴포넌트 간의 데이터 일관성을 유지하기 위해 트랜잭션 관리 및 데이터 동기화 전략을 적용합니다.

## 4. 성능 및 최적화 전략

- **데이터베이스 쿼리 최적화**: 쿼리 성능 분석 도구를 사용하여 느린 쿼리를 식별하고 인덱싱 및 쿼리 재작성을 통해 최적화합니다.
- **캐싱**: 자주 액세스하는 데이터를 캐싱하여 데이터베이스 부하를 줄이고 응답 시간을 단축합니다. (예: Redis)
- **코드 최적화**: 불필요한 연산을 제거하고 알고리즘 효율성을 개선하여 코드 실행 속도를 높입니다.
- **로드 밸런싱**: 트래픽이 증가할 경우 로드 밸런서를 사용하여 여러 서버에 트래픽을 분산시켜 시스템 부하를 줄입니다.
- **CDN (콘텐츠 전송 네트워크)**: 정적 자산 (이미지, CSS, JavaScript 파일)을 CDN에 배포하여 사용자에게 더 빠르게 제공합니다.
- **AI 모델 최적화**: AI 분석 모델의 추론 속도를 높이기 위해 모델 경량화, 양자화, GPU 가속 등의 기술을 적용합니다.

## 5. 구현 로드맵 및 마일스톤

### 1단계: 기반 (MVP 구현)
- **핵심 인프라**: 기본 시스템 설정 및 필수 구성 요소 구축 (React, Spring Boot, MySQL, Firebase Storage, Lemon Squeezy 연동)
- **필수 기능**: 문제 등록, AI 분석, 약점 선택 UI, 챗봇 심층 분석, 맞춤 문제 자동 출제 및 채점, 기본 통계 구현
- **기본 보안**: Spring Security를 사용한 인증 및 권한 부여 구현
- **개발 환경**: 개발 환경 설정 및 CI/CD 기본 설정
- **예상 완료 기간**: 3개월

### 2단계: 기능 개선
- **고급 기능**: 프리미엄 기능 (무제한 맞춤 문제, 고급 통계, 레벨·뱃지, 복습 캘린더 연동) 구현
- **성능 최적화**: 시스템 성능 개선 (데이터베이스 쿼리 최적화, 캐싱, 코드 최적화)
- **보안 강화**: 고급 보안 기능 구현 (취약점 분석 및 패치, 보안 감사)
- **모니터링 구현**: 시스템 모니터링 설정 및 로그 분석
- **예상 완료 기간**: 3개월

## 6. 위험 평가 및 완화 전략

### 기술적 위험 분석
- **기술 위험**: AI 분석 정확도 부족, 맞춤 문제 생성의 저작권 문제, 외부 API 의존성
- **성능 위험**: 트래픽 증가에 따른 시스템 성능 저하, AI 분석 서버의 응답 시간 지연
- **보안 위험**: SQL 인젝션, XSS 공격, 데이터 유출
- **통합 위험**: 외부 API (Lemon Squeezy, Firebase)의 장애 발생
- **완화 전략**:
    -   AI 모델 튜닝 및 데이터 증강을 통해 분석 정확도 향상
    -   자체 생성 문제 사용 및 저작권 검토
    -   외부 API 장애 대비 대체 API 또는 로컬 캐싱 구현
    -   로드 밸런싱 및 캐싱을 통해 시스템 성능 유지
    -   보안 취약점 점검 및 코드 검토, 보안 라이브러리 사용

### 프로젝트 인도 위험
- **일정 위험**: 개발 일정 지연, 외부 API 변경
- **자원 위험**: 팀 역량 부족, AI 엔지니어 부족
- **품질 위험**: 코드 품질 저하, 테스트 부족
- **배포 위험**: 배포 환경 문제, 롤백 실패
- **비상 계획**:
    -   일정 지연 시 기능 축소 또는 추가 인력 투입
    -   팀 역량 강화를 위한 교육 및 외부 전문가 자문
    -   코드 리뷰 및 자동화된 테스트 강화
    -   배포 전 철저한 테스트 및 롤백 계획 수립
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/controller/WebhookController.java">
package algorithm_note.algorithm_note_v2.global.controller;

import algorithm_note.algorithm_note_v2.global.dto.ClerkUserDto;
import algorithm_note.algorithm_note_v2.global.dto.ClerkWebhookEventDto;
import algorithm_note.algorithm_note_v2.global.dto.ClerkWebhookResponseDto;
import algorithm_note.algorithm_note_v2.global.exception.UserProcessingException;
import algorithm_note.algorithm_note_v2.global.service.ClerkUserService;
import algorithm_note.algorithm_note_v2.global.service.ClerkWebhookVerificationService;
import algorithm_note.algorithm_note_v2.user.domain.User;
import algorithm_note.algorithm_note_v2.user.dto.UserRegisterRequestDto;
import algorithm_note.algorithm_note_v2.user.service.UserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.svix.exceptions.WebhookVerificationException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/webhooks")
@RequiredArgsConstructor
public class WebhookController {

    private final ClerkWebhookVerificationService verificationService;
    private final ClerkUserService clerkUserService;
    private final UserService userService;
    private final ObjectMapper objectMapper;

    @PostMapping("/clerk")
    public ResponseEntity<ClerkWebhookResponseDto> handleClerkWebhook(@RequestHeader Map<String,String> header,
                                                                       @RequestBody String payload) throws WebhookVerificationException, JsonProcessingException {
        log.info("header: {}", header);
        log.info("payload: {}", payload);

        verificationService.verify(payload, header);

        ClerkWebhookEventDto webhookEvent = objectMapper.readValue(payload, ClerkWebhookEventDto.class);
        log.info("Successfully verified Clerk webhook event: {}", webhookEvent.getType());

        if ("user.created".equals(webhookEvent.getType())) {
            return handleUserCreatedEvent(webhookEvent);
        }

        log.info("Webhook event type {} not processed", webhookEvent.getType());
        return ResponseEntity.ok(
            ClerkWebhookResponseDto.success("Event received but not processed", null, null));
    }

    private ResponseEntity<ClerkWebhookResponseDto> handleUserCreatedEvent(ClerkWebhookEventDto webhookEvent) {
        ClerkUserDto clerkUser = webhookEvent.getData();
        String userId = clerkUser.getId();

        if (userId == null || userId.isEmpty()) {
            throw new IllegalArgumentException("User ID is missing in webhook event");
        }

        try {
            // 1. 사용자를 데이터베이스에 등록
            UserRegisterRequestDto userRegistrationData = createUserRegistrationData(clerkUser);
            User savedUser = userService.registerUser(userRegistrationData);
            log.info("Successfully saved user to database: {}", savedUser.getClerkId());

            // 2. Clerk에서 사용자에게 역할 할당
            clerkUserService.assignDefaultRole(userId);
            log.info("Successfully assigned default role to user: {}", userId);

            return ResponseEntity.ok(
                ClerkWebhookResponseDto.success("User processed successfully", userId, "member")
            );
        } catch (IllegalArgumentException ex) {
            // 사용자가 이미 존재하는 경우 등 비즈니스 예외
            log.warn("User registration failed: {}", ex.getMessage());
            return ResponseEntity.ok(
                ClerkWebhookResponseDto.success("User already exists", userId, "member")
            );
        } catch (Exception ex) {
            // 기타 예외는 UserProcessingException으로 변환하여 GlobalExceptionHandler에서 처리
            throw new UserProcessingException("Failed to process user creation for user: " + userId, ex);
        }
    }

    /**
     * Clerk 웹훅 데이터를 UserRegisterRequestDto로 변환합니다.
     */
    private UserRegisterRequestDto createUserRegistrationData(ClerkUserDto clerkUser) {
        String email = extractPrimaryEmail(clerkUser);

        return UserRegisterRequestDto.of(
            clerkUser.getId(),
            email,
            clerkUser.getFirstName(),
            clerkUser.getLastName()
        );
    }

    /**
     * Clerk 사용자 데이터에서 기본 이메일 주소를 추출합니다.
     */
    private String extractPrimaryEmail(ClerkUserDto clerkUser) {
        if (clerkUser.getEmailAddresses() == null || clerkUser.getEmailAddresses().length == 0) {
            throw new IllegalArgumentException("No email addresses found for user: " + clerkUser.getId());
        }

        // 첫 번째 이메일 주소를 기본 이메일로 사용
        ClerkUserDto.EmailAddress primaryEmail = clerkUser.getEmailAddresses()[0];
        if (primaryEmail.getEmailAddress() == null || primaryEmail.getEmailAddress().trim().isEmpty()) {
            throw new IllegalArgumentException("Primary email address is empty for user: " + clerkUser.getId());
        }

        return primaryEmail.getEmailAddress();
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/exception/GlobalExceptionHandler.java">
package algorithm_note.algorithm_note_v2.global.exception;

import algorithm_note.algorithm_note_v2.global.dto.ClerkWebhookResponseDto;
import algorithm_note.algorithm_note_v2.user.dto.UserResponseDto;
import algorithm_note.algorithm_note_v2.user.exception.UserNotFoundException;
import com.svix.exceptions.WebhookVerificationException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.Map;

@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(WebhookVerificationException.class)
    public ResponseEntity<ClerkWebhookResponseDto> handleWebhookVerificationException(WebhookVerificationException ex) {
        log.warn("Webhook verification failed: {}", ex.getMessage());
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(ClerkWebhookResponseDto.failure("Invalid webhook signature"));
    }

    @ExceptionHandler(JwtVerificationException.class)
    public ResponseEntity<Map<String, Object>> handleJwtVerificationException(JwtVerificationException ex) {
        log.warn("JWT verification failed: {}", ex.getMessage());
        Map<String, Object> errorResponse = Map.of(
                "error", "Authentication failed",
                "message", ex.getMessage(),
                "status", HttpStatus.UNAUTHORIZED.value()
        );
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
    }

    @ExceptionHandler(UserProcessingException.class)
    public ResponseEntity<ClerkWebhookResponseDto> handleUserProcessingException(UserProcessingException ex) {
        log.error("Error processing user: {}", ex.getMessage(), ex);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ClerkWebhookResponseDto.failure(ex.getMessage()));
    }

    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<UserResponseDto> handleUserNotFoundException(UserNotFoundException ex) {
        log.warn("User not found: {}", ex.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(UserResponseDto.failure(ex.getMessage()));
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ClerkWebhookResponseDto> handleIllegalArgumentException(IllegalArgumentException ex) {
        log.warn("Invalid argument: {}", ex.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ClerkWebhookResponseDto.failure(ex.getMessage()));
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ClerkWebhookResponseDto> handleGenericException(Exception ex) {
        log.error("Unexpected error occurred", ex);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ClerkWebhookResponseDto.failure("Internal server error"));
    }
}
</file>

<file path="apps/backend/src/main/java/algorithm_note/algorithm_note_v2/global/service/ClerkUserService.java">
package algorithm_note.algorithm_note_v2.global.service;

import algorithm_note.algorithm_note_v2.global.exception.UserProcessingException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
public class ClerkUserService {

    private final WebClient webClient;

    public ClerkUserService(@Value("${clerk.secret.key}") String clerkSecretKey) {
        log.info("Loaded Clerk Secret Key: '{}'", clerkSecretKey);
        if (clerkSecretKey == null || clerkSecretKey.isBlank()) {
            throw new IllegalArgumentException("Clerk Secret Key is NULL or EMPTY. Check application.properties.");
        }

        this.webClient = WebClient.builder()
            .baseUrl("https://api.clerk.com/v1")
            .defaultHeader(HttpHeaders.AUTHORIZATION, "Bearer " + clerkSecretKey)
            .build();
    }

    public void assignDefaultRole(String userId) {
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("role", "member");

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("public_metadata", metadata);

        webClient.patch()
            .uri("/users/{id}/metadata", userId)
            .bodyValue(requestBody)
            .retrieve()
            .bodyToMono(String.class)
            .doOnError(error -> {
                throw new UserProcessingException("Failed to assign role to user: " + userId, error);
            })
            .block();
    }
}
</file>

<file path="apps/backend/src/main/resources/application.properties">
spring.application.name=algorithm_note_v2

spring.datasource.url=jdbc:mysql://localhost:3306/algornote?serverTimezone=Asia/Seoul&useSSL=false
spring.datasource.username=root
spring.datasource.password=4592
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

# Clerk Webhook Configuration
clerk.webhook.secret=whsec_PTebnShO53Ib5u1ergumd+8WUifkEPWS
clerk.webhook.api-secret=${CLERK_SECRET_KEY}
clerk.webhook.api-url=https://api.clerk.dev/v1
clerk.webhook.max-timestamp-diff=${CLERK_WEBHOOK_MAX_TIMESTAMP_DIFF:300}
clerk.secret.key=sk_test_V3H3hrrtR3DUqxIYh50zYQj2sn6tiYgyjPDnetIcje

# Clerk JWT Configuration
clerk.jwt.instance-domain=${CLERK_INSTANCE_DOMAIN:your-clerk-instance.clerk.dev}
clerk.jwt.issuer=${CLERK_JWT_ISSUER:https://your-clerk-instance.clerk.dev}
clerk.jwt.audience=${CLERK_JWT_AUDIENCE:}
clerk.jwt.jwks-cache-expiration-seconds=${CLERK_JWKS_CACHE_EXPIRATION:3600}

server.port = 8085
</file>

<file path="apps/dashboard/src/index.css">
@import "tailwindcss";
@import "ui-components/src/index.css";

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* 추가적인 브라우저 기본값 제거 */
button, input, optgroup, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

button, select {
  text-transform: none;
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* 링크 기본 스타일 제거 */
a {
  color: inherit;
  text-decoration: none;
}

/* 브라우저 기본 포커스 스타일 제거 */
:focus {
  outline: none;
}
</file>

<file path="apps/dashboard/src/pages/SignIn/index.tsx">
import SignInPageView from "./SignInPage.view";
import { useSignIn } from "./useSignIn";

const SignInPage = () => {
  const { handleEmailSignInClick, handleSignUpClick } = useSignIn();

  return (
    <SignInPageView
      onEmailSignInClick={handleEmailSignInClick}
      onSignUpClick={handleSignUpClick}
    />
  )
}

export default SignInPage;
</file>

<file path="apps/dashboard/src/pages/SignIn/SignInPage.view.tsx">
import React from 'react';
import { SignInWithGoogleButton } from '../../../../../libs/ui-components/src/components/index';
import { SignInWithEmailButton } from '../../../../../libs/ui-components/src/components/index';

interface SignInPageViewProps {
  onEmailSignInClick: () => void;
  onSignUpClick: () => void;
}

const SignInPageView: React.FC<SignInPageViewProps> = ({ onEmailSignInClick, onSignUpClick }) => {
  return (
    <main className="bg-black text-white min-h-screen flex items-center justify-center p-4">
      
      <div className="w-full max-w-xs flex flex-col items-center">
        
        <div className="h-10 w-10 mb-8 bg-white rounded-full">
            {/* <YourLogo className="h-10 w-10" /> */}
        </div>
        
        <h1 className="text-xl font-normal mb-6">Log in to AlgorNote</h1>
        
        <div className="w-full flex flex-col space-y-3">
          <SignInWithGoogleButton />
          <SignInWithEmailButton onClick={onEmailSignInClick} />
        </div>
        
        <p className="mt-8 text-sm text-gray-400 text-xs">
          Don't have an account?
          <button onClick={onSignUpClick} className="font-semibold text-white hover:underline ml-1 text-xs">
            Sign up
          </button> or
          <a href="#" className="font-semibold text-white hover:underline ml-1 text-xs">
            Learn more
          </a>
        </p>

      </div>
    </main>
  );
};

export default SignInPageView;
</file>

<file path="apps/dashboard/src/pages/SignUpWithEmail/useSignUpWithEmail.ts">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSignUp } from '@clerk/clerk-react';
import { z } from 'zod';

// Zod schemas for validation
const emailSchema = z.object({
  email: z
    .string()
    .min(1, 'Email is required')
    .email('Please enter a valid email address')
});

const passwordSchema = z.object({
  password: z
    .string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number')
});

const verificationCodeSchema = z.object({
  code: z
    .string()
    .min(6, 'Verification code must be 6 digits')
    .max(6, 'Verification code must be 6 digits')
});

type SignUpStep = 'email' | 'password' | 'verification';

export function useSignUpWithEmail() {
  const [step, setStep] = useState<SignUpStep>('email');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const { signUp, setActive } = useSignUp();

  const handleEmailChange = (value: string) => {
    setEmail(value);
    if (error) {
      setError('');
    }
  };

  const handlePasswordChange = (value: string) => {
    setPassword(value);
    if (error) {
      setError('');
    }
  };

  const handleVerificationCodeChange = (value: string) => {
    setVerificationCode(value);
    if (error) {
      setError('');
    }
  };

  const handleBackToLogin = () => {
    navigate('/sign-in');
  };

  const handleBackToEmail = () => {
    setStep('email');
    setPassword('');
    setError('');
  };

  const handleBackToPassword = () => {
    setStep('password');
    setVerificationCode('');
    setError('');
  };

  const checkEmailAndProceed = async () => {
    const validation = emailSchema.safeParse({ email });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      await signUp?.create({
        emailAddress: email,
      });

      setStep('password');
    } catch (err: any) {
      console.error('Email check error:', err);

      // Check if it's an existing user error
      if (err.errors?.some((error: any) =>
        error.code === 'form_identifier_exists' ||
        error.code === 'form_identifier_not_found'
      )) {
        setError('This email is already registered. Please sign in instead.');
      } else {
        setError('An error occurred. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const createAccount = async () => {
    const validation = passwordSchema.safeParse({ password });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      // Create account with email and password
      await signUp?.update({
        password: password,
      });

      // Send verification email
      await signUp?.prepareEmailAddressVerification({ strategy: 'email_code' });

      setStep('verification');
    } catch (err: any) {
      console.error('Account creation error:', err);
      setError('Failed to create account. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const verifyEmailAndComplete = async () => {
    const validation = verificationCodeSchema.safeParse({ code: verificationCode });

    if (!validation.success) {
      setError(validation.error.errors[0].message);
      return;
    }

    setError('');
    setIsLoading(true);

    try {
      const result = await signUp?.attemptEmailAddressVerification({
        code: verificationCode,
      });


      // 이메일인증에 성공했을 때
      if (result?.status === 'complete' && result.createdSessionId) {
        console.log('reuslt', result);

        if (setActive) {
          await setActive({ session: result.createdSessionId });
          navigate('/setup-account');
        } else {
          console.error('setActive is not available');
          setError('Authentication setup failed. Please try again.');
        }
      }
    } catch (err: any) {
      console.error('Verification error:', err);
      setError('Invalid verification code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  const handleContinueClick = async () => {
    switch (step) {
      case 'email':
        await checkEmailAndProceed();
        break;
      case 'password':
        await createAccount();
        break;
      case 'verification':
        await verifyEmailAndComplete();
        break;
    }
  };

  return {
    step,
    email,
    password,
    verificationCode,
    error,
    isLoading,
    handleEmailChange,
    handlePasswordChange,
    handleVerificationCodeChange,
    handleBackToLogin,
    handleBackToEmail,
    handleBackToPassword,
    handleSubmit,
    handleContinueClick
  };
}
</file>

<file path="apps/dashboard/src/pages/SSOCallback/index.tsx">
import { useEffect } from 'react'
import { useClerk, useSession } from '@clerk/clerk-react'
import { useNavigate } from 'react-router-dom'

interface RedirectResult {
  createdSessionId?: string;
}

export default function SSOCallbackPage() {
  const { handleRedirectCallback } = useClerk();
  const { session, isLoaded } = useSession(); // isLoaded 추가
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        await handleRedirectCallback({
          afterSignInUrl: '/dashboard',
          afterSignUpUrl: '/setup-account'
        }) as RedirectResult;
      } catch (error) {
        console.error('SSO callback error:', error);
        navigate('/error');
      }
    })();
  }, []); 

  useEffect(() => {
    if (isLoaded && session) {
      console.log('Session is active, navigating...');
      navigate('/setup-account');
    }
  }, [isLoaded, session, navigate]);

  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">세션 확인 중...</p>
        </div>
      </div>
    );
  }

  // 로딩 UI
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600">인증 처리 중...</p>
      </div>
    </div>
  );
}
</file>

<file path="apps/landing-page/src/App.tsx">
import { Home } from './pages/home'

function App() {
   return <Home />
} 

export default App
</file>

<file path="libs/ui-components/src/components/sign-in-with-google-button/SignInWithGoogleButton.view.tsx">
interface SignInWithGoogleButtonViewProps {
  isLoading: boolean
  onClick: () => void
}

export const SignInWithGoogleButtonView = ({
  isLoading,
  onClick,
}: SignInWithGoogleButtonViewProps) => {
  return (
    <button
      onClick={onClick}
      disabled={isLoading}
      type="button"
      className =" flex items-center justify-center gap-2 w-full px-4 py-2.5
        bg-[#6E64E4] text-white font-medium rounded-lg text-xs
        transition-colors duration-200
        hover:bg-[#5C53C9]
        disabled:opacity-70 disabled:cursor-not-allowed
      "
    >
      <span>Continue with Google</span>
    </button>
  )
}
</file>

<file path="libs/ui-components/src/components/sign-in-with-google-button/useSignInWithGoogleButton.ts">
import { useSignIn } from '@clerk/clerk-react'

export const useSignInWithGoogleButton = () => {
  const { signIn, isLoaded } = useSignIn()

  const signInWithGoogle = async () => {
    if (!isLoaded || !signIn) {
      console.error('Clerk is not loaded yet')
      return
    }

    try {
      await signIn.authenticateWithRedirect({
        strategy: 'oauth_google',
        redirectUrl: '/sso-callback',
        redirectUrlComplete: '/setup-account',
      })
    } catch (error) {
      console.error('Error signing in with Google:', error)
    }
  }

  return {
    isLoaded,
    signInWithGoogle,
  }
}
</file>

<file path="rules/front/react.md">
```markdown
You are an expert in TypeScript, React, Shadcn UI, Radix UI, and Tailwind.

### Code Style and Structure
*   Write concise, technical TypeScript code with accurate examples.
*   Use functional and declarative programming patterns; avoid classes.
*   Prefer iteration and modularization over code duplication.
*   Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
*   Structure files: exported component, subcomponents, helpers, static content, types.

### Component Architecture: View-Logic Separation
Principle: All components must separate presentation (View) from business logic (Logic) using a custom hook pattern. This enhances reusability, testability, and maintainability.

*   **View Component (`*.view.tsx`):**
    *   **Responsibility:** Renders the UI based on props. It should be a "dumb" component.
    *   **Contains:** JSX, styling via `className`.
    *   **Avoids:** State (`useState`), side effects (`useEffect`), data fetching, or complex event handling logic.

*   **Logic Hook (`use*.ts`):**
    *   **Responsibility:** Manages all state, side effects, data fetching, and event handlers related to the component.
    *   **Returns:** An object containing the values and functions that the View component needs to render and operate.

*   **Container Component (`index.tsx`):**
    *   **Responsibility:** Connects the Logic Hook to the View Component. It calls the hook and passes the returned values as props to the View. This is the main exported component.

**Example Structure:** For a `UserProfile` component:

`libs/ui-components/src/components/user-profile/useUserProfile.ts` (Logic Hook)

```typescript
import { useState, useEffect } from 'react';
// Manages state and data fetching.
export function useUserProfile(userId: string) {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Fetch user data...
    fetch(`/api/users/${userId}`)
      .then(res => res.json())
      .then(data => {
        setUser(data);
        setIsLoading(false);
      });
  }, [userId]);

  return { user, isLoading };
}
```

`libs/ui-components/src/components/user-profile/UserProfile.view.tsx` (View Component)

```typescript
// Purely for presentation. Receives all data and functions as props.
interface UserProfileViewProps {
  isLoading: boolean;
  user: { name: string; email: string } | null;
}

export function UserProfileView({ isLoading, user }: UserProfileViewProps) {
  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <div>User not found.</div>;
  }

  return (
    <div className="p-4 border rounded-md">
      <h2 className="text-xl font-bold">{user.name}</h2>
      <p className="text-gray-500">{user.email}</p>
    </div>
  );
}
```

`libs/ui-components/src/components/user-profile/index.tsx` (Container)

```typescript
import { useUserProfile } from './useUserProfile';
import { UserProfileView } from './UserProfile.view';

// Connects logic to the view and is exported for use in the app.
interface UserProfileProps {
  userId: string;
}

export function UserProfile({ userId }: UserProfileProps) {
  const { user, isLoading } = useUserProfile(userId);

  return <UserProfileView user={user} isLoading={isLoading} />;
}
```

### Naming Conventions
*   Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
*   Favor named exports for components.

### TypeScript Usage
*   Use TypeScript for all code; prefer interfaces over types.
*   Avoid enums; use maps instead.
*   Use functional components with TypeScript interfaces.
*   **Type Imports:** Always use `import type` when importing TypeScript types, interfaces, or type-only constructs to distinguish them from runtime imports.

### Syntax and Formatting
*   Use the "function" keyword for pure functions.
*   Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
*   Use declarative JSX.

### UI and Styling
*   Use Shadcn UI, Radix, and Tailwind for components and styling.
*   **Single Source of Truth:** Always reference the `/theme/theme.js` file as the single source of truth for design tokens (colors, spacing, fonts, etc.) when applying styles with Tailwind.
*   Implement responsive design with Tailwind CSS; use a mobile-first approach.

### Performance Optimization
*   Minimize `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC).
*   Wrap client components in `Suspense` with `fallback`.
*   Use dynamic loading for non-critical components.
*   Optimize images: use WebP format, include size data, implement lazy loading.

### Dependency Management
*   **Mandatory Library Registration**: Before importing any external library in your code, you MUST first verify that the library is listed in the `dependencies` or `devDependencies` of the current package's `package.json` file.
*   **Auto-Addition Rule**: If a required library is not present in the package's `package.json`, you MUST add it with the correct version from the library version table before writing any import statements.
*   **Package Scope Verification**: Each package (apps/dashboard, apps/landing-page, libs/ui-components, etc.) maintains its own dependencies. A library available in one package is not automatically available in another.
*   **Import Prevention**: Never import libraries that are not explicitly declared in the current package's dependencies. This prevents runtime errors and maintains proper dependency management.

### Key Conventions
*   Use `'nuqs'` for URL search parameter state management.
*   Optimize Web Vitals (LCP, CLS, FID).
*   Limit `'use client'`:
    *   Favor server components and Next.js SSR.
    *   Use only for Web API access in small components.
    *   Avoid for data fetching or state management.
*   Follow Next.js docs for Data Fetching, Rendering, and Routing.
```
</file>

<file path="apps/dashboard/package.json">
{
  "name": "dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@ai-sdk/react": "^2.0.44",
    "@clerk/clerk-react": "^5.2.8",
    "@codemirror/lang-cpp": "^6.0.2",
    "@codemirror/lang-java": "^6.0.1",
    "@codemirror/lang-javascript": "^6.2.2",
    "@codemirror/lang-python": "^6.1.6",
    "@codemirror/view": "^6.34.2",
    "@tanstack/react-query": "^5.51.15",
    "@uiw/codemirror-theme-vscode": "^4.23.6",
    "@uiw/react-codemirror": "^4.23.6",
    "ai": "^5.0.44",
    "axios": "^1.7.2",
    "firebase": "^10.12.4",
    "framer-motion": "^11.3.19",
    "lucide-react": "^0.417.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.52.1",
    "react-router-dom": "^6.25.1",
    "reactflow": "^11.11.4",
    "recharts": "^2.12.7",
    "ui-components": "workspace:*",
    "zod": "^3.23.8",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="apps/dashboard/src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import { ClerkProvider } from '@clerk/clerk-react';
import './index.css';
import App from './App.tsx';

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error('Missing Publishable Key');
}

function ClerkProviderWithRoutes() {
  const navigate = useNavigate();

  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={import.meta.env.VITE_CLERK_SIGN_IN_URL}
      signUpUrl={import.meta.env.VITE_CLERK_SIGN_UP_URL}
    >
      <App />
    </ClerkProvider>
  );
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <ClerkProviderWithRoutes />
    </BrowserRouter>
  </StrictMode>
);
</file>

<file path="libs/ui-components/package.json">
{
  "name": "ui-components",
  "version": "1.0.0",
  "description": "",
  "main": "src/components/index.ts",
  "module": "src/components/index.ts",
  "types": "src/components/index.ts",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "@clerk/clerk-react": "^5.2.8",
    "@clerk/types": "^4.86.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@tailwindcss/postcss": "^4.1.13",
    "clsx": "^2.1.1",
    "tailwind-merge": "^2.4.0"
  },
  "devDependencies": {
    "@types/react": "^19.1.13",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "tailwindcss": "^4.1.13"
  },
  "peerDependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.16.0"
}
</file>

<file path="libs/ui-components/src/components/sign-in-with-email-button/index.tsx">
import React from 'react'

interface SignInWithEmailButtonProps extends React.ComponentPropsWithoutRef<'button'> {
  onClick: () => void;
  children?: React.ReactNode;
}

export const SignInWithEmailButton = ({
  onClick,
  disabled,
  children,
  ...props
}: SignInWithEmailButtonProps) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      type="button"
      className={`
        flex items-center justify-center gap-2 w-full px-4 py-2.5
        bg-[#1E2025] text-[#E3E4E6] font-medium rounded-lg text-xs
        transition-colors duration-200
        hover:bg-[#2a2d33]
        disabled:opacity-75 disabled:cursor-not-allowed
      `}
      {...props}
    >
      <span>{children || 'Continue with Email'}</span>
    </button>
  )
}
</file>

<file path="apps/dashboard/src/App.tsx">
import { Routes, Route } from "react-router-dom"
import { AuthProvider } from "./components/AuthProvider"
import { ProtectedRoute } from "./components/ProtectedRoute"
import { useApiClient } from "./hooks/useApiClient"
import SignInPage from "./pages/SignIn"
import SignInWithEmailPage from "./pages/SignInWithEmail"
import SignUpPage from "./pages/SignUp"
import SignUpWithEmailPage from "./pages/SignUpWithEmail"
import SSOCallbackPage from "./pages/SSOCallback"
import SetupAccountPage from "./pages/SetupAccount"
import DashboardPage from "./pages/Dashboard"
import UnauthorizedPage from "./pages/Unauthorized"
import { Components } from "./pages/Components"

function AppContent() {
  // Initialize API client with authentication
  useApiClient();

  return (
    <Routes>
        <Route path="/" element={<SignInPage />} />
        <Route path="/sign-in" element={<SignInPage />} />
        <Route path="/sign-in/email" element={<SignInWithEmailPage />} />
        <Route path="/sign-up" element={<SignUpPage />} />
        <Route path="/sign-up/email" element={<SignUpWithEmailPage />} />
        <Route path="/sso-callback" element={<SSOCallbackPage />} />
        <Route path="/setup-account" element={<SetupAccountPage />} />
        <Route path="/unauthorized" element={<UnauthorizedPage />} />

        <Route
          path="/dashboard"
          element={
            //<ProtectedRoute requiredRole="member">
              <DashboardPage />
            //</ProtectedRoute>
          }
        />

        <Route path="/components" element={<Components />} />
      </Routes>
  );
}

function App() {
  return (
      <AuthProvider>
        <AppContent />
      </AuthProvider>
  );
}

export default App
</file>

</files>
